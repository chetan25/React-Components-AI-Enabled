var c_=Object.defineProperty;var p_=(Ms,es,Rr)=>es in Ms?c_(Ms,es,{enumerable:!0,configurable:!0,writable:!0,value:Rr}):Ms[es]=Rr;var Me=(Ms,es,Rr)=>p_(Ms,typeof es!="symbol"?es+"":es,Rr);(function(){"use strict";var Ms={"./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":(It,Se,j)=>{It.exports=j.p+"ort-wasm-simd-threaded.jsep.wasm"},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(It,Se,j)=>{j.r(Se),j.d(Se,{Environment:()=>Ve,Interpreter:()=>dt,Template:()=>Et,parse:()=>Te,tokenize:()=>D});var F=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro"}),he=Object.freeze({set:F.Set,for:F.For,in:F.In,is:F.Is,if:F.If,else:F.Else,endif:F.EndIf,elif:F.ElseIf,endfor:F.EndFor,and:F.And,or:F.Or,not:F.Not,"not in":F.NotIn,macro:F.Macro,endmacro:F.EndMacro,true:F.BooleanLiteral,false:F.BooleanLiteral,True:F.BooleanLiteral,False:F.BooleanLiteral}),be=class{constructor(M,H){this.value=M,this.type=H}};function Ce(M){return/\w/.test(M)}function Ee(M){return/[0-9]/.test(M)}var U=[["{%",F.OpenStatement],["%}",F.CloseStatement],["{{",F.OpenExpression],["}}",F.CloseExpression],["(",F.OpenParen],[")",F.CloseParen],["{",F.OpenCurlyBracket],["}",F.CloseCurlyBracket],["[",F.OpenSquareBracket],["]",F.CloseSquareBracket],[",",F.Comma],[".",F.Dot],[":",F.Colon],["|",F.Pipe],["<=",F.ComparisonBinaryOperator],[">=",F.ComparisonBinaryOperator],["==",F.ComparisonBinaryOperator],["!=",F.ComparisonBinaryOperator],["<",F.ComparisonBinaryOperator],[">",F.ComparisonBinaryOperator],["+",F.AdditiveBinaryOperator],["-",F.AdditiveBinaryOperator],["*",F.MultiplicativeBinaryOperator],["/",F.MultiplicativeBinaryOperator],["%",F.MultiplicativeBinaryOperator],["=",F.Equals]],P=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function z(M,H={}){return M.endsWith(`
`)&&(M=M.slice(0,-1)),M=M.replace(/{#.*?#}/gs,"{##}"),H.lstrip_blocks&&(M=M.replace(/^[ \t]*({[#%])/gm,"$1")),H.trim_blocks&&(M=M.replace(/([#%]})\n/g,"$1")),M.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function D(M,H={}){var Xe,Rt,ht;const $=[],Z=z(M,H);let pe=0;const et=Tt=>{let zt="";for(;Tt(Z[pe]);){if(Z[pe]==="\\"){if(++pe,pe>=Z.length)throw new SyntaxError("Unexpected end of input");const St=Z[pe++],dr=P.get(St);if(dr===void 0)throw new SyntaxError(`Unexpected escaped character: ${St}`);zt+=dr;continue}if(zt+=Z[pe++],pe>=Z.length)throw new SyntaxError("Unexpected end of input")}return zt};e:for(;pe<Z.length;){const Tt=(Xe=$.at(-1))==null?void 0:Xe.type;if(Tt===void 0||Tt===F.CloseStatement||Tt===F.CloseExpression){let St="";for(;pe<Z.length&&!(Z[pe]==="{"&&(Z[pe+1]==="%"||Z[pe+1]==="{"));)St+=Z[pe++];if(St.length>0){$.push(new be(St,F.Text));continue}}et(St=>/\s/.test(St));const zt=Z[pe];if(zt==="-"||zt==="+"){const St=(Rt=$.at(-1))==null?void 0:Rt.type;if(St===F.Text||St===void 0)throw new SyntaxError(`Unexpected character: ${zt}`);switch(St){case F.Identifier:case F.NumericLiteral:case F.BooleanLiteral:case F.StringLiteral:case F.CloseParen:case F.CloseSquareBracket:break;default:{++pe;const dr=et(Ee);$.push(new be(`${zt}${dr}`,dr.length>0?F.NumericLiteral:F.UnaryOperator));continue}}}for(const[St,dr]of U)if(Z.slice(pe,pe+St.length)===St){$.push(new be(St,dr)),pe+=St.length;continue e}if(zt==="'"||zt==='"'){++pe;const St=et(dr=>dr!==zt);$.push(new be(St,F.StringLiteral)),++pe;continue}if(Ee(zt)){const St=et(Ee);$.push(new be(St,F.NumericLiteral));continue}if(Ce(zt)){const St=et(Ce),dr=Object.hasOwn(he,St)?he[St]:F.Identifier;dr===F.In&&((ht=$.at(-1))==null?void 0:ht.type)===F.Not?($.pop(),$.push(new be("not in",F.NotIn))):$.push(new be(St,dr));continue}throw new SyntaxError(`Unexpected character: ${zt}`)}return $}var q=class{constructor(){Me(this,"type","Statement")}},re=class extends q{constructor(H){super();Me(this,"type","Program");this.body=H}},fe=class extends q{constructor(H,$,Z){super();Me(this,"type","If");this.test=H,this.body=$,this.alternate=Z}},le=class extends q{constructor(H,$,Z,pe){super();Me(this,"type","For");this.loopvar=H,this.iterable=$,this.body=Z,this.defaultBlock=pe}},O=class extends q{constructor(H,$){super();Me(this,"type","Set");this.assignee=H,this.value=$}},ee=class extends q{constructor(H,$,Z){super();Me(this,"type","Macro");this.name=H,this.args=$,this.body=Z}},ce=class extends q{constructor(){super(...arguments);Me(this,"type","Expression")}},X=class extends ce{constructor(H,$,Z){super();Me(this,"type","MemberExpression");this.object=H,this.property=$,this.computed=Z}},K=class extends ce{constructor(H,$){super();Me(this,"type","CallExpression");this.callee=H,this.args=$}},N=class extends ce{constructor(H){super();Me(this,"type","Identifier");this.value=H}},k=class extends ce{constructor(H){super();Me(this,"type","Literal");this.value=H}},R=class extends k{constructor(){super(...arguments);Me(this,"type","NumericLiteral")}},E=class extends k{constructor(){super(...arguments);Me(this,"type","StringLiteral")}},de=class extends k{constructor(){super(...arguments);Me(this,"type","BooleanLiteral")}},we=class extends k{constructor(){super(...arguments);Me(this,"type","ArrayLiteral")}},$e=class extends k{constructor(){super(...arguments);Me(this,"type","TupleLiteral")}},Oe=class extends k{constructor(){super(...arguments);Me(this,"type","ObjectLiteral")}},Fe=class extends ce{constructor(H,$,Z){super();Me(this,"type","BinaryExpression");this.operator=H,this.left=$,this.right=Z}},nt=class extends ce{constructor(H,$){super();Me(this,"type","FilterExpression");this.operand=H,this.filter=$}},Je=class extends ce{constructor(H,$){super();Me(this,"type","SelectExpression");this.iterable=H,this.test=$}},lt=class extends ce{constructor(H,$,Z){super();Me(this,"type","TestExpression");this.operand=H,this.negate=$,this.test=Z}},me=class extends ce{constructor(H,$){super();Me(this,"type","UnaryExpression");this.operator=H,this.argument=$}},W=class extends ce{constructor(H=void 0,$=void 0,Z=void 0){super();Me(this,"type","SliceExpression");this.start=H,this.stop=$,this.step=Z}},ue=class extends ce{constructor(H,$){super();Me(this,"type","KeywordArgumentExpression");this.key=H,this.value=$}};function Te(M){const H=new re([]);let $=0;function Z(ye,rt){const ut=M[$++];if(!ut||ut.type!==ye)throw new Error(`Parser Error: ${rt}. ${ut.type} !== ${ye}.`);return ut}function pe(){switch(M[$].type){case F.Text:return Rt();case F.OpenStatement:return ht();case F.OpenExpression:return Tt();default:throw new SyntaxError(`Unexpected token type: ${M[$].type}`)}}function et(...ye){return $+ye.length<=M.length&&ye.some((rt,ut)=>rt!==M[$+ut].type)}function Xe(...ye){return $+ye.length<=M.length&&ye.every((rt,ut)=>rt===M[$+ut].type)}function Rt(){return new E(Z(F.Text,"Expected text token").value)}function ht(){Z(F.OpenStatement,"Expected opening statement token");let ye;switch(M[$].type){case F.Set:++$,ye=zt(),Z(F.CloseStatement,"Expected closing statement token");break;case F.If:++$,ye=St(),Z(F.OpenStatement,"Expected {% token"),Z(F.EndIf,"Expected endif token"),Z(F.CloseStatement,"Expected %} token");break;case F.Macro:++$,ye=dr(),Z(F.OpenStatement,"Expected {% token"),Z(F.EndMacro,"Expected endmacro token"),Z(F.CloseStatement,"Expected %} token");break;case F.For:++$,ye=Zr(),Z(F.OpenStatement,"Expected {% token"),Z(F.EndFor,"Expected endfor token"),Z(F.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${M[$].type}`)}return ye}function Tt(){Z(F.OpenExpression,"Expected opening expression token");const ye=Dr();return Z(F.CloseExpression,"Expected closing expression token"),ye}function zt(){const ye=Dr();if(Xe(F.Equals)){++$;const rt=zt();return new O(ye,rt)}return ye}function St(){var Ht,_r,Nr,Xr,or,Gr,jr,zn;const ye=Dr();Z(F.CloseStatement,"Expected closing statement token");const rt=[],ut=[];for(;!(((Ht=M[$])==null?void 0:Ht.type)===F.OpenStatement&&(((_r=M[$+1])==null?void 0:_r.type)===F.ElseIf||((Nr=M[$+1])==null?void 0:Nr.type)===F.Else||((Xr=M[$+1])==null?void 0:Xr.type)===F.EndIf));)rt.push(pe());if(((or=M[$])==null?void 0:or.type)===F.OpenStatement&&((Gr=M[$+1])==null?void 0:Gr.type)!==F.EndIf)if(++$,Xe(F.ElseIf))Z(F.ElseIf,"Expected elseif token"),ut.push(St());else for(Z(F.Else,"Expected else token"),Z(F.CloseStatement,"Expected closing statement token");!(((jr=M[$])==null?void 0:jr.type)===F.OpenStatement&&((zn=M[$+1])==null?void 0:zn.type)===F.EndIf);)ut.push(pe());return new fe(ye,rt,ut)}function dr(){const ye=qt();if(ye.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const rt=ft();Z(F.CloseStatement,"Expected closing statement token");const ut=[];for(;et(F.OpenStatement,F.EndMacro);)ut.push(pe());return new ee(ye,rt,ut)}function Tr(ye=!1){const rt=ye?qt:Dr,ut=[rt()],Ht=Xe(F.Comma);for(;Ht&&(++$,ut.push(rt()),!!Xe(F.Comma)););return Ht?new $e(ut):ut[0]}function Zr(){const ye=Tr(!0);if(!(ye instanceof N||ye instanceof $e))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${ye.type} instead`);Z(F.In,"Expected `in` keyword following loop variable");const rt=Dr();Z(F.CloseStatement,"Expected closing statement token");const ut=[];for(;et(F.OpenStatement,F.EndFor)&&et(F.OpenStatement,F.Else);)ut.push(pe());const Ht=[];if(Xe(F.OpenStatement,F.Else))for(++$,++$,Z(F.CloseStatement,"Expected closing statement token");et(F.OpenStatement,F.EndFor);)Ht.push(pe());return new le(ye,rt,ut,Ht)}function Dr(){return en()}function en(){const ye=ot();if(Xe(F.If)){++$;const rt=ot();if(Xe(F.Else)){++$;const ut=ot();return new fe(rt,[ye],[ut])}else return new Je(ye,rt)}return ye}function ot(){let ye=V();for(;Xe(F.Or);){const rt=M[$];++$;const ut=V();ye=new Fe(rt,ye,ut)}return ye}function V(){let ye=ge();for(;Xe(F.And);){const rt=M[$];++$;const ut=ge();ye=new Fe(rt,ye,ut)}return ye}function ge(){let ye;for(;Xe(F.Not);){const rt=M[$];++$;const ut=ge();ye=new me(rt,ut)}return ye??Ie()}function Ie(){let ye=tt();for(;Xe(F.ComparisonBinaryOperator)||Xe(F.In)||Xe(F.NotIn);){const rt=M[$];++$;const ut=tt();ye=new Fe(rt,ye,ut)}return ye}function tt(){let ye=Bt();for(;Xe(F.AdditiveBinaryOperator);){const rt=M[$];++$;const ut=Bt();ye=new Fe(rt,ye,ut)}return ye}function xe(){const ye=_t();return Xe(F.OpenParen)?Qe(ye):ye}function Qe(ye){let rt=new K(ye,ft());return Xe(F.OpenParen)&&(rt=Qe(rt)),rt}function ft(){Z(F.OpenParen,"Expected opening parenthesis for arguments list");const ye=gt();return Z(F.CloseParen,"Expected closing parenthesis for arguments list"),ye}function gt(){const ye=[];for(;!Xe(F.CloseParen);){let rt=Dr();if(Xe(F.Equals)){if(++$,!(rt instanceof N))throw new SyntaxError("Expected identifier for keyword argument");const ut=Dr();rt=new ue(rt,ut)}ye.push(rt),Xe(F.Comma)&&++$}return ye}function kt(){const ye=[];let rt=!1;for(;!Xe(F.CloseSquareBracket);)Xe(F.Colon)?(ye.push(void 0),++$,rt=!0):(ye.push(Dr()),Xe(F.Colon)&&(++$,rt=!0));if(ye.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(rt){if(ye.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new W(...ye)}return ye[0]}function _t(){let ye=qt();for(;Xe(F.Dot)||Xe(F.OpenSquareBracket);){const rt=M[$];++$;let ut;const Ht=rt.type!==F.Dot;if(Ht)ut=kt(),Z(F.CloseSquareBracket,"Expected closing square bracket");else if(ut=qt(),ut.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");ye=new X(ye,ut,Ht)}return ye}function Bt(){let ye=Nt();for(;Xe(F.MultiplicativeBinaryOperator);){const rt=M[$];++$;const ut=Nt();ye=new Fe(rt,ye,ut)}return ye}function Nt(){let ye=Dt();for(;Xe(F.Is);){++$;const rt=Xe(F.Not);rt&&++$;let ut=qt();if(ut instanceof de&&(ut=new N(ut.value.toString())),!(ut instanceof N))throw new SyntaxError("Expected identifier for the test");ye=new lt(ye,rt,ut)}return ye}function Dt(){let ye=xe();for(;Xe(F.Pipe);){++$;let rt=qt();if(!(rt instanceof N))throw new SyntaxError("Expected identifier for the filter");Xe(F.OpenParen)&&(rt=Qe(rt)),ye=new nt(ye,rt)}return ye}function qt(){const ye=M[$];switch(ye.type){case F.NumericLiteral:return++$,new R(Number(ye.value));case F.StringLiteral:return++$,new E(ye.value);case F.BooleanLiteral:return++$,new de(ye.value.toLowerCase()==="true");case F.Identifier:return++$,new N(ye.value);case F.OpenParen:{++$;const rt=Tr();if(M[$].type!==F.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${M[$].type} instead`);return++$,rt}case F.OpenSquareBracket:{++$;const rt=[];for(;!Xe(F.CloseSquareBracket);)rt.push(Dr()),Xe(F.Comma)&&++$;return++$,new we(rt)}case F.OpenCurlyBracket:{++$;const rt=new Map;for(;!Xe(F.CloseCurlyBracket);){const ut=Dr();Z(F.Colon,"Expected colon between key and value in object literal");const Ht=Dr();rt.set(ut,Ht),Xe(F.Comma)&&++$}return++$,new Oe(rt)}default:throw new SyntaxError(`Unexpected token: ${ye.type}`)}}for(;$<M.length;)H.body.push(pe());return H}function Ne(M,H,$=1){H===void 0&&(H=M,M=0);const Z=[];for(let pe=M;pe<H;pe+=$)Z.push(pe);return Z}function at(M,H,$,Z=1){const pe=Math.sign(Z);pe>=0?(H=(H??(H=0))<0?Math.max(M.length+H,0):Math.min(H,M.length),$=($??($=M.length))<0?Math.max(M.length+$,0):Math.min($,M.length)):(H=(H??(H=M.length-1))<0?Math.max(M.length+H,-1):Math.min(H,M.length-1),$=($??($=-1))<-1?Math.max(M.length+$,-1):Math.min($,M.length-1));const et=[];for(let Xe=H;pe*Xe<pe*$;Xe+=Z)et.push(M[Xe]);return et}function se(M){return M.replace(/\b\w/g,H=>H.toUpperCase())}var Ke=class{constructor(M=void 0){Me(this,"type","RuntimeValue");Me(this,"value");Me(this,"builtins",new Map);this.value=M}__bool__(){return new mt(!!this.value)}},ct=class extends Ke{constructor(){super(...arguments);Me(this,"type","NumericValue")}},Be=class extends Ke{constructor(){super(...arguments);Me(this,"type","StringValue");Me(this,"builtins",new Map([["upper",new Ge(()=>new Be(this.value.toUpperCase()))],["lower",new Ge(()=>new Be(this.value.toLowerCase()))],["strip",new Ge(()=>new Be(this.value.trim()))],["title",new Ge(()=>new Be(se(this.value)))],["length",new ct(this.value.length)]]))}},mt=class extends Ke{constructor(){super(...arguments);Me(this,"type","BooleanValue")}},bt=class extends Ke{constructor(){super(...arguments);Me(this,"type","ObjectValue");Me(this,"builtins",new Map([["get",new Ge(([H,$])=>{if(!(H instanceof Be))throw new Error(`Object key must be a string: got ${H.type}`);return this.value.get(H.value)??$??new Ze})],["items",new Ge(()=>new J(Array.from(this.value.entries()).map(([H,$])=>new J([new Be(H),$]))))]]))}__bool__(){return new mt(this.value.size>0)}},He=class extends bt{constructor(){super(...arguments);Me(this,"type","KeywordArgumentsValue")}},J=class extends Ke{constructor(){super(...arguments);Me(this,"type","ArrayValue");Me(this,"builtins",new Map([["length",new ct(this.value.length)]]))}__bool__(){return new mt(this.value.length>0)}},Ae=class extends J{constructor(){super(...arguments);Me(this,"type","TupleValue")}},Ge=class extends Ke{constructor(){super(...arguments);Me(this,"type","FunctionValue")}},Ze=class extends Ke{constructor(){super(...arguments);Me(this,"type","NullValue")}},je=class extends Ke{constructor(){super(...arguments);Me(this,"type","UndefinedValue")}},Ve=class{constructor(M){Me(this,"variables",new Map([["namespace",new Ge(M=>{if(M.length===0)return new bt(new Map);if(M.length!==1||!(M[0]instanceof bt))throw new Error("`namespace` expects either zero arguments or a single object argument");return M[0]})]]));Me(this,"tests",new Map([["boolean",M=>M.type==="BooleanValue"],["callable",M=>M instanceof Ge],["odd",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${M.type}`);return M.value%2!==0}],["even",M=>{if(M.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${M.type}`);return M.value%2===0}],["false",M=>M.type==="BooleanValue"&&!M.value],["true",M=>M.type==="BooleanValue"&&M.value],["string",M=>M.type==="StringValue"],["number",M=>M.type==="NumericValue"],["integer",M=>M.type==="NumericValue"&&Number.isInteger(M.value)],["iterable",M=>M instanceof J||M instanceof Be],["lower",M=>{const H=M.value;return M.type==="StringValue"&&H===H.toLowerCase()}],["upper",M=>{const H=M.value;return M.type==="StringValue"&&H===H.toUpperCase()}],["none",M=>M.type==="NullValue"],["defined",M=>M.type!=="UndefinedValue"],["undefined",M=>M.type==="UndefinedValue"],["equalto",(M,H)=>M.value===H.value],["eq",(M,H)=>M.value===H.value]]));this.parent=M}set(M,H){return this.declareVariable(M,yt(H))}declareVariable(M,H){if(this.variables.has(M))throw new SyntaxError(`Variable already declared: ${M}`);return this.variables.set(M,H),H}setVariable(M,H){return this.variables.set(M,H),H}resolve(M){if(this.variables.has(M))return this;if(this.parent)return this.parent.resolve(M);throw new Error(`Unknown variable: ${M}`)}lookupVariable(M){try{return this.resolve(M).variables.get(M)??new je}catch{return new je}}},dt=class{constructor(M){Me(this,"global");this.global=M??new Ve}run(M){return this.evaluate(M,this.global)}evaluateBinaryExpression(M,H){const $=this.evaluate(M.left,H);switch(M.operator.value){case"and":return $.__bool__().value?this.evaluate(M.right,H):$;case"or":return $.__bool__().value?$:this.evaluate(M.right,H)}const Z=this.evaluate(M.right,H);switch(M.operator.value){case"==":return new mt($.value==Z.value);case"!=":return new mt($.value!=Z.value)}if($ instanceof je||Z instanceof je)throw new Error("Cannot perform operation on undefined values");if($ instanceof Ze||Z instanceof Ze)throw new Error("Cannot perform operation on null values");if($ instanceof ct&&Z instanceof ct)switch(M.operator.value){case"+":return new ct($.value+Z.value);case"-":return new ct($.value-Z.value);case"*":return new ct($.value*Z.value);case"/":return new ct($.value/Z.value);case"%":return new ct($.value%Z.value);case"<":return new mt($.value<Z.value);case">":return new mt($.value>Z.value);case">=":return new mt($.value>=Z.value);case"<=":return new mt($.value<=Z.value)}else if($ instanceof J&&Z instanceof J)switch(M.operator.value){case"+":return new J($.value.concat(Z.value))}else if(Z instanceof J){const pe=Z.value.find(et=>et.value===$.value)!==void 0;switch(M.operator.value){case"in":return new mt(pe);case"not in":return new mt(!pe)}}if($ instanceof Be||Z instanceof Be)switch(M.operator.value){case"+":return new Be($.value.toString()+Z.value.toString())}if($ instanceof Be&&Z instanceof Be)switch(M.operator.value){case"in":return new mt(Z.value.includes($.value));case"not in":return new mt(!Z.value.includes($.value))}if($ instanceof Be&&Z instanceof bt)switch(M.operator.value){case"in":return new mt(Z.value.has($.value));case"not in":return new mt(!Z.value.has($.value))}throw new SyntaxError(`Unknown operator "${M.operator.value}" between ${$.type} and ${Z.type}`)}evaluateArguments(M,H){const $=[],Z=new Map;for(const pe of M)if(pe.type==="KeywordArgumentExpression"){const et=pe;Z.set(et.key.value,this.evaluate(et.value,H))}else{if(Z.size>0)throw new Error("Positional arguments must come before keyword arguments");$.push(this.evaluate(pe,H))}return[$,Z]}evaluateFilterExpression(M,H){const $=this.evaluate(M.operand,H);if(M.filter.type==="Identifier"){const Z=M.filter;if(Z.value==="tojson")return new Be(Pt($));if($ instanceof J)switch(Z.value){case"list":return $;case"first":return $.value[0];case"last":return $.value[$.value.length-1];case"length":return new ct($.value.length);case"reverse":return new J($.value.reverse());case"sort":return new J($.value.sort((pe,et)=>{if(pe.type!==et.type)throw new Error(`Cannot compare different types: ${pe.type} and ${et.type}`);switch(pe.type){case"NumericValue":return pe.value-et.value;case"StringValue":return pe.value.localeCompare(et.value);default:throw new Error(`Cannot compare type: ${pe.type}`)}}));default:throw new Error(`Unknown ArrayValue filter: ${Z.value}`)}else if($ instanceof Be)switch(Z.value){case"length":return new ct($.value.length);case"upper":return new Be($.value.toUpperCase());case"lower":return new Be($.value.toLowerCase());case"title":return new Be(se($.value));case"capitalize":return new Be($.value.charAt(0).toUpperCase()+$.value.slice(1));case"trim":return new Be($.value.trim());case"indent":return new Be($.value.split(`
`).map((pe,et)=>et===0||pe.length===0?pe:"    "+pe).join(`
`));case"string":return $;default:throw new Error(`Unknown StringValue filter: ${Z.value}`)}else if($ instanceof ct)switch(Z.value){case"abs":return new ct(Math.abs($.value));default:throw new Error(`Unknown NumericValue filter: ${Z.value}`)}else if($ instanceof bt)switch(Z.value){case"items":return new J(Array.from($.value.entries()).map(([pe,et])=>new J([new Be(pe),et])));case"length":return new ct($.value.size);default:throw new Error(`Unknown ObjectValue filter: ${Z.value}`)}throw new Error(`Cannot apply filter "${Z.value}" to type: ${$.type}`)}else if(M.filter.type==="CallExpression"){const Z=M.filter;if(Z.callee.type!=="Identifier")throw new Error(`Unknown filter: ${Z.callee.type}`);const pe=Z.callee.value;if(pe==="tojson"){const[,et]=this.evaluateArguments(Z.args,H),Xe=et.get("indent")??new Ze;if(!(Xe instanceof ct||Xe instanceof Ze))throw new Error("If set, indent must be a number");return new Be(Pt($,Xe.value))}if($ instanceof J){switch(pe){case"selectattr":{if($.value.some(zt=>!(zt instanceof bt)))throw new Error("`selectattr` can only be applied to array of objects");if(Z.args.some(zt=>zt.type!=="StringLiteral"))throw new Error("arguments of `selectattr` must be strings");const[et,Xe,Rt]=Z.args.map(zt=>this.evaluate(zt,H));let ht;if(Xe){const zt=H.tests.get(Xe.value);if(!zt)throw new Error(`Unknown test: ${Xe.value}`);ht=zt}else ht=(...zt)=>zt[0].__bool__().value;const Tt=$.value.filter(zt=>{const St=zt.value.get(et.value);return St?ht(St,Rt):!1});return new J(Tt)}case"map":{const[,et]=this.evaluateArguments(Z.args,H);if(et.has("attribute")){const Xe=et.get("attribute");if(!(Xe instanceof Be))throw new Error("attribute must be a string");const Rt=et.get("default"),ht=$.value.map(Tt=>{if(!(Tt instanceof bt))throw new Error("items in map must be an object");return Tt.value.get(Xe.value)??Rt??new je});return new J(ht)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${pe}`)}else if($ instanceof Be){switch(pe){case"indent":{const[et,Xe]=this.evaluateArguments(Z.args,H),Rt=et.at(0)??Xe.get("width")??new ct(4);if(!(Rt instanceof ct))throw new Error("width must be a number");const ht=et.at(1)??Xe.get("first")??new mt(!1),Tt=et.at(2)??Xe.get("blank")??new mt(!1),zt=$.value.split(`
`),St=" ".repeat(Rt.value),dr=zt.map((Tr,Zr)=>!ht.value&&Zr===0||!Tt.value&&Tr.length===0?Tr:St+Tr);return new Be(dr.join(`
`))}}throw new Error(`Unknown StringValue filter: ${pe}`)}else throw new Error(`Cannot apply filter "${pe}" to type: ${$.type}`)}throw new Error(`Unknown filter: ${M.filter.type}`)}evaluateTestExpression(M,H){const $=this.evaluate(M.operand,H),Z=H.tests.get(M.test.value);if(!Z)throw new Error(`Unknown test: ${M.test.value}`);const pe=Z($);return new mt(M.negate?!pe:pe)}evaluateUnaryExpression(M,H){const $=this.evaluate(M.argument,H);switch(M.operator.value){case"not":return new mt(!$.value);default:throw new SyntaxError(`Unknown operator: ${M.operator.value}`)}}evalProgram(M,H){return this.evaluateBlock(M.body,H)}evaluateBlock(M,H){let $="";for(const Z of M){const pe=this.evaluate(Z,H);pe.type!=="NullValue"&&pe.type!=="UndefinedValue"&&($+=pe.value)}return new Be($)}evaluateIdentifier(M,H){return H.lookupVariable(M.value)}evaluateCallExpression(M,H){const[$,Z]=this.evaluateArguments(M.args,H);Z.size>0&&$.push(new He(Z));const pe=this.evaluate(M.callee,H);if(pe.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${pe.type}`);return pe.value($,H)}evaluateSliceExpression(M,H,$){if(!(M instanceof J||M instanceof Be))throw new Error("Slice object must be an array or string");const Z=this.evaluate(H.start,$),pe=this.evaluate(H.stop,$),et=this.evaluate(H.step,$);if(!(Z instanceof ct||Z instanceof je))throw new Error("Slice start must be numeric or undefined");if(!(pe instanceof ct||pe instanceof je))throw new Error("Slice stop must be numeric or undefined");if(!(et instanceof ct||et instanceof je))throw new Error("Slice step must be numeric or undefined");return M instanceof J?new J(at(M.value,Z.value,pe.value,et.value)):new Be(at(Array.from(M.value),Z.value,pe.value,et.value).join(""))}evaluateMemberExpression(M,H){const $=this.evaluate(M.object,H);let Z;if(M.computed){if(M.property.type==="SliceExpression")return this.evaluateSliceExpression($,M.property,H);Z=this.evaluate(M.property,H)}else Z=new Be(M.property.value);let pe;if($ instanceof bt){if(!(Z instanceof Be))throw new Error(`Cannot access property with non-string: got ${Z.type}`);pe=$.value.get(Z.value)??$.builtins.get(Z.value)}else if($ instanceof J||$ instanceof Be)if(Z instanceof ct)pe=$.value.at(Z.value),$ instanceof Be&&(pe=new Be($.value.at(Z.value)));else if(Z instanceof Be)pe=$.builtins.get(Z.value);else throw new Error(`Cannot access property with non-string/non-number: got ${Z.type}`);else{if(!(Z instanceof Be))throw new Error(`Cannot access property with non-string: got ${Z.type}`);pe=$.builtins.get(Z.value)}return pe instanceof Ke?pe:new je}evaluateSet(M,H){const $=this.evaluate(M.value,H);if(M.assignee.type==="Identifier"){const Z=M.assignee.value;H.setVariable(Z,$)}else if(M.assignee.type==="MemberExpression"){const Z=M.assignee,pe=this.evaluate(Z.object,H);if(!(pe instanceof bt))throw new Error("Cannot assign to member of non-object");if(Z.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");pe.value.set(Z.property.value,$)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(M.assignee)}`);return new Ze}evaluateIf(M,H){const $=this.evaluate(M.test,H);return this.evaluateBlock($.__bool__().value?M.body:M.alternate,H)}evaluateFor(M,H){const $=new Ve(H);let Z,pe;if(M.iterable.type==="SelectExpression"){const Tt=M.iterable;pe=this.evaluate(Tt.iterable,$),Z=Tt.test}else pe=this.evaluate(M.iterable,$);if(!(pe instanceof J))throw new Error(`Expected iterable type in for loop: got ${pe.type}`);const et=[],Xe=[];for(let Tt=0;Tt<pe.value.length;++Tt){const zt=new Ve($),St=pe.value[Tt];let dr;if(M.loopvar.type==="Identifier")dr=Tr=>Tr.setVariable(M.loopvar.value,St);else if(M.loopvar.type==="TupleLiteral"){const Tr=M.loopvar;if(St.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${St.type}`);const Zr=St;if(Tr.value.length!==Zr.value.length)throw new Error(`Too ${Tr.value.length>Zr.value.length?"few":"many"} items to unpack`);dr=Dr=>{for(let en=0;en<Tr.value.length;++en){if(Tr.value[en].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Tr.value[en].type}`);Dr.setVariable(Tr.value[en].value,Zr.value[en])}}}else throw new Error(`Invalid loop variable(s): ${M.loopvar.type}`);Z&&(dr(zt),!this.evaluate(Z,zt).__bool__().value)||(et.push(St),Xe.push(dr))}let Rt="",ht=!0;for(let Tt=0;Tt<et.length;++Tt){const zt=new Map([["index",new ct(Tt+1)],["index0",new ct(Tt)],["revindex",new ct(et.length-Tt)],["revindex0",new ct(et.length-Tt-1)],["first",new mt(Tt===0)],["last",new mt(Tt===et.length-1)],["length",new ct(et.length)],["previtem",Tt>0?et[Tt-1]:new je],["nextitem",Tt<et.length-1?et[Tt+1]:new je]]);$.setVariable("loop",new bt(zt)),Xe[Tt]($);const St=this.evaluateBlock(M.body,$);Rt+=St.value,ht=!1}if(ht){const Tt=this.evaluateBlock(M.defaultBlock,$);Rt+=Tt.value}return new Be(Rt)}evaluateMacro(M,H){return H.setVariable(M.name.value,new Ge(($,Z)=>{var Xe;const pe=new Ve(Z);$=$.slice();let et;((Xe=$.at(-1))==null?void 0:Xe.type)==="KeywordArgumentsValue"&&(et=$.pop());for(let Rt=0;Rt<M.args.length;++Rt){const ht=M.args[Rt],Tt=$[Rt];if(ht.type==="Identifier"){const zt=ht;if(!Tt)throw new Error(`Missing positional argument: ${zt.value}`);pe.setVariable(zt.value,Tt)}else if(ht.type==="KeywordArgumentExpression"){const zt=ht,St=Tt??(et==null?void 0:et.value.get(zt.key.value))??this.evaluate(zt.value,pe);pe.setVariable(zt.key.value,St)}else throw new Error(`Unknown argument type: ${ht.type}`)}return this.evaluateBlock(M.body,pe)})),new Ze}evaluate(M,H){if(M===void 0)return new je;switch(M.type){case"Program":return this.evalProgram(M,H);case"Set":return this.evaluateSet(M,H);case"If":return this.evaluateIf(M,H);case"For":return this.evaluateFor(M,H);case"Macro":return this.evaluateMacro(M,H);case"NumericLiteral":return new ct(Number(M.value));case"StringLiteral":return new Be(M.value);case"BooleanLiteral":return new mt(M.value);case"ArrayLiteral":return new J(M.value.map($=>this.evaluate($,H)));case"TupleLiteral":return new Ae(M.value.map($=>this.evaluate($,H)));case"ObjectLiteral":{const $=new Map;for(const[Z,pe]of M.value){const et=this.evaluate(Z,H);if(!(et instanceof Be))throw new Error(`Object keys must be strings: got ${et.type}`);$.set(et.value,this.evaluate(pe,H))}return new bt($)}case"Identifier":return this.evaluateIdentifier(M,H);case"CallExpression":return this.evaluateCallExpression(M,H);case"MemberExpression":return this.evaluateMemberExpression(M,H);case"UnaryExpression":return this.evaluateUnaryExpression(M,H);case"BinaryExpression":return this.evaluateBinaryExpression(M,H);case"FilterExpression":return this.evaluateFilterExpression(M,H);case"TestExpression":return this.evaluateTestExpression(M,H);default:throw new SyntaxError(`Unknown node type: ${M.type}`)}}};function yt(M){switch(typeof M){case"number":return new ct(M);case"string":return new Be(M);case"boolean":return new mt(M);case"undefined":return new je;case"object":return M===null?new Ze:Array.isArray(M)?new J(M.map(yt)):new bt(new Map(Object.entries(M).map(([H,$])=>[H,yt($)])));case"function":return new Ge((H,$)=>{const Z=M(...H.map(pe=>pe.value))??null;return yt(Z)});default:throw new Error(`Cannot convert to runtime value: ${M}`)}}function Pt(M,H,$){const Z=$??0;switch(M.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(M.value);case"ArrayValue":case"ObjectValue":{const pe=H?" ".repeat(H):"",et=`
`+pe.repeat(Z),Xe=et+pe;if(M.type==="ArrayValue"){const Rt=M.value.map(ht=>Pt(ht,H,Z+1));return H?`[${Xe}${Rt.join(`,${Xe}`)}${et}]`:`[${Rt.join(", ")}]`}else{const Rt=Array.from(M.value.entries()).map(([ht,Tt])=>{const zt=`"${ht}": ${Pt(Tt,H,Z+1)}`;return H?`${Xe}${zt}`:zt});return H?`{${Rt.join(",")}${et}}`:`{${Rt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${M.type}`)}}var Et=class{constructor(M){Me(this,"parsed");const H=D(M,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=Te(H)}render(M){const H=new Ve;H.set("false",!1),H.set("true",!0),H.set("raise_exception",pe=>{throw new Error(pe)}),H.set("range",Ne);for(const[pe,et]of Object.entries(M))H.set(pe,et);return new dt(H).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{registerBackend:()=>be,resolveBackendAndExecutionProviders:()=>Ee});const F=new Map,he=[],be=(U,P,z)=>{if(P&&typeof P.init=="function"&&typeof P.createInferenceSessionHandler=="function"){const D=F.get(U);if(D===void 0)F.set(U,{backend:P,priority:z});else{if(D.priority>z)return;if(D.priority===z&&D.backend!==P)throw new Error(`cannot register backend "${U}" using priority ${z}`)}if(z>=0){const q=he.indexOf(U);q!==-1&&he.splice(q,1);for(let re=0;re<he.length;re++)if(F.get(he[re]).priority<=z){he.splice(re,0,U);return}he.push(U)}return}throw new TypeError("not a valid backend")},Ce=async U=>{const P=F.get(U);if(!P)return"backend not found.";if(P.initialized)return P.backend;if(P.aborted)return P.error;{const z=!!P.initPromise;try{return z||(P.initPromise=P.backend.init(U)),await P.initPromise,P.initialized=!0,P.backend}catch(D){return z||(P.error=`${D}`,P.aborted=!0),P.error}finally{delete P.initPromise}}},Ee=async U=>{const P=U.executionProviders||[],z=P.map(O=>typeof O=="string"?O:O.name),D=z.length===0?he:z;let q;const re=[],fe=new Set;for(const O of D){const ee=await Ce(O);typeof ee=="string"?re.push({name:O,err:ee}):(q||(q=ee),q===ee&&fe.add(O))}if(!q)throw new Error(`no available backend found. ERR: ${re.map(O=>`[${O.name}] ${O.err}`).join(", ")}`);for(const{name:O,err:ee}of re)z.includes(O)&&console.warn(`removing requested execution provider "${O}" from session options because it is not available: ${ee}`);const le=P.filter(O=>fe.has(typeof O=="string"?O:O.name));return[q,new Proxy(U,{get:(O,ee)=>ee==="executionProviders"?le:Reflect.get(O,ee)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":(It,Se,j)=>{j.r(Se),j.d(Se,{registerBackend:()=>F.registerBackend});var F=j("./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{env:()=>be});var F=j("./node_modules/onnxruntime-common/dist/esm/version.js");let he="warning";const be={wasm:{},webgl:{},webgpu:{},versions:{common:F.version},set logLevel(Ce){if(Ce!==void 0){if(typeof Ce!="string"||["verbose","info","warning","error","fatal"].indexOf(Ce)===-1)throw new Error(`Unsupported logging level: ${Ce}`);he=Ce}},get logLevel(){return he}};Object.defineProperty(be,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":(It,Se,j)=>{j.r(Se),j.d(Se,{env:()=>he});var F=j("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const he=F.env},"./node_modules/onnxruntime-common/dist/esm/index.js":(It,Se,j)=>{j.r(Se),j.d(Se,{InferenceSession:()=>be.InferenceSession,TRACE:()=>Ee.TRACE,TRACE_FUNC_BEGIN:()=>Ee.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>Ee.TRACE_FUNC_END,Tensor:()=>Ce.Tensor,TrainingSession:()=>U.TrainingSession,env:()=>he.env,registerBackend:()=>F.registerBackend});var F=j("./node_modules/onnxruntime-common/dist/esm/backend.js"),he=j("./node_modules/onnxruntime-common/dist/esm/env.js"),be=j("./node_modules/onnxruntime-common/dist/esm/inference-session.js"),Ce=j("./node_modules/onnxruntime-common/dist/esm/tensor.js");j("./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),j("./node_modules/onnxruntime-common/dist/esm/tensor-factory.js");var Ee=j("./node_modules/onnxruntime-common/dist/esm/trace.js");j("./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),j("./node_modules/onnxruntime-common/dist/esm/onnx-value.js");var U=j("./node_modules/onnxruntime-common/dist/esm/training-session.js")},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{InferenceSession:()=>Ce});var F=j("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),he=j("./node_modules/onnxruntime-common/dist/esm/tensor.js"),be=j("./node_modules/onnxruntime-common/dist/esm/trace.js");class Ce{constructor(U){this.handler=U}async run(U,P,z){(0,be.TRACE_FUNC_BEGIN)();const D={};let q={};if(typeof U!="object"||U===null||U instanceof he.Tensor||Array.isArray(U))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let re=!0;if(typeof P=="object"){if(P===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(P instanceof he.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(P)){if(P.length===0)throw new TypeError("'fetches' cannot be an empty array.");re=!1;for(const O of P){if(typeof O!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(O)===-1)throw new RangeError(`'fetches' contains invalid output name: ${O}.`);D[O]=null}if(typeof z=="object"&&z!==null)q=z;else if(typeof z<"u")throw new TypeError("'options' must be an object.")}else{let O=!1;const ee=Object.getOwnPropertyNames(P);for(const ce of this.outputNames)if(ee.indexOf(ce)!==-1){const X=P[ce];(X===null||X instanceof he.Tensor)&&(O=!0,re=!1,D[ce]=X)}if(O){if(typeof z=="object"&&z!==null)q=z;else if(typeof z<"u")throw new TypeError("'options' must be an object.")}else q=P}}else if(typeof P<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const O of this.inputNames)if(typeof U[O]>"u")throw new Error(`input '${O}' is missing in 'feeds'.`);if(re)for(const O of this.outputNames)D[O]=null;const fe=await this.handler.run(U,D,q),le={};for(const O in fe)if(Object.hasOwnProperty.call(fe,O)){const ee=fe[O];ee instanceof he.Tensor?le[O]=ee:le[O]=new he.Tensor(ee.type,ee.data,ee.dims)}return(0,be.TRACE_FUNC_END)(),le}async release(){return this.handler.dispose()}static async create(U,P,z,D){(0,be.TRACE_FUNC_BEGIN)();let q,re={};if(typeof U=="string"){if(q=U,typeof P=="object"&&P!==null)re=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(U instanceof Uint8Array){if(q=U,typeof P=="object"&&P!==null)re=P;else if(typeof P<"u")throw new TypeError("'options' must be an object.")}else if(U instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&U instanceof SharedArrayBuffer){const ee=U;let ce=0,X=U.byteLength;if(typeof P=="object"&&P!==null)re=P;else if(typeof P=="number"){if(ce=P,!Number.isSafeInteger(ce))throw new RangeError("'byteOffset' must be an integer.");if(ce<0||ce>=ee.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${ee.byteLength}).`);if(X=U.byteLength-ce,typeof z=="number"){if(X=z,!Number.isSafeInteger(X))throw new RangeError("'byteLength' must be an integer.");if(X<=0||ce+X>ee.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${ee.byteLength-ce}].`);if(typeof D=="object"&&D!==null)re=D;else if(typeof D<"u")throw new TypeError("'options' must be an object.")}else if(typeof z<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof P<"u")throw new TypeError("'options' must be an object.");q=new Uint8Array(ee,ce,X)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[fe,le]=await(0,F.resolveBackendAndExecutionProviders)(re),O=await fe.createInferenceSessionHandler(q,le);return(0,be.TRACE_FUNC_END)(),new Ce(O)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":(It,Se,j)=>{j.r(Se),j.d(Se,{InferenceSession:()=>he});var F=j("./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js");const he=F.InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":(It,Se,j)=>{j.r(Se)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":(It,Se,j)=>{j.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{tensorToDataURL:()=>F,tensorToImageData:()=>he});const F=(be,Ce)=>{const Ee=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);Ee.width=be.dims[3],Ee.height=be.dims[2];const U=Ee.getContext("2d");if(U!=null){let P,z;(Ce==null?void 0:Ce.tensorLayout)!==void 0&&Ce.tensorLayout==="NHWC"?(P=be.dims[2],z=be.dims[3]):(P=be.dims[3],z=be.dims[2]);const D=(Ce==null?void 0:Ce.format)!==void 0?Ce.format:"RGB",q=Ce==null?void 0:Ce.norm;let re,fe;q===void 0||q.mean===void 0?re=[255,255,255,255]:typeof q.mean=="number"?re=[q.mean,q.mean,q.mean,q.mean]:(re=[q.mean[0],q.mean[1],q.mean[2],0],q.mean[3]!==void 0&&(re[3]=q.mean[3])),q===void 0||q.bias===void 0?fe=[0,0,0,0]:typeof q.bias=="number"?fe=[q.bias,q.bias,q.bias,q.bias]:(fe=[q.bias[0],q.bias[1],q.bias[2],0],q.bias[3]!==void 0&&(fe[3]=q.bias[3]));const le=z*P;let O=0,ee=le,ce=le*2,X=-1;D==="RGBA"?(O=0,ee=le,ce=le*2,X=le*3):D==="RGB"?(O=0,ee=le,ce=le*2):D==="RBG"&&(O=0,ce=le,ee=le*2);for(let K=0;K<z;K++)for(let N=0;N<P;N++){const k=(be.data[O++]-fe[0])*re[0],R=(be.data[ee++]-fe[1])*re[1],E=(be.data[ce++]-fe[2])*re[2],de=X===-1?255:(be.data[X++]-fe[3])*re[3];U.fillStyle="rgba("+k+","+R+","+E+","+de+")",U.fillRect(N,K,1,1)}if("toDataURL"in Ee)return Ee.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},he=(be,Ce)=>{const Ee=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let U;if(Ee!=null){let P,z,D;(Ce==null?void 0:Ce.tensorLayout)!==void 0&&Ce.tensorLayout==="NHWC"?(P=be.dims[2],z=be.dims[1],D=be.dims[3]):(P=be.dims[3],z=be.dims[2],D=be.dims[1]);const q=Ce!==void 0&&Ce.format!==void 0?Ce.format:"RGB",re=Ce==null?void 0:Ce.norm;let fe,le;re===void 0||re.mean===void 0?fe=[255,255,255,255]:typeof re.mean=="number"?fe=[re.mean,re.mean,re.mean,re.mean]:(fe=[re.mean[0],re.mean[1],re.mean[2],255],re.mean[3]!==void 0&&(fe[3]=re.mean[3])),re===void 0||re.bias===void 0?le=[0,0,0,0]:typeof re.bias=="number"?le=[re.bias,re.bias,re.bias,re.bias]:(le=[re.bias[0],re.bias[1],re.bias[2],0],re.bias[3]!==void 0&&(le[3]=re.bias[3]));const O=z*P;if(Ce!==void 0&&(Ce.format!==void 0&&D===4&&Ce.format!=="RGBA"||D===3&&Ce.format!=="RGB"&&Ce.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const ee=4;let ce=0,X=1,K=2,N=3,k=0,R=O,E=O*2,de=-1;q==="RGBA"?(k=0,R=O,E=O*2,de=O*3):q==="RGB"?(k=0,R=O,E=O*2):q==="RBG"&&(k=0,E=O,R=O*2),U=Ee.createImageData(P,z);for(let we=0;we<z*P;ce+=ee,X+=ee,K+=ee,N+=ee,we++)U.data[ce]=(be.data[k++]-le[0])*fe[0],U.data[X]=(be.data[R++]-le[1])*fe[1],U.data[K]=(be.data[E++]-le[2])*fe[2],U.data[N]=de===-1?255:(be.data[de++]-le[3])*fe[3]}else throw new Error("Can not access image data");return U}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":(It,Se,j)=>{j.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{bufferToTensor:()=>he,tensorFromGpuBuffer:()=>Ee,tensorFromImage:()=>be,tensorFromPinnedBuffer:()=>U,tensorFromTexture:()=>Ce});var F=j("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const he=(P,z)=>{if(P===void 0)throw new Error("Image buffer must be defined");if(z.height===void 0||z.width===void 0)throw new Error("Image height and width must be defined");if(z.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:D,width:q}=z,re=z.norm??{mean:255,bias:0};let fe,le;typeof re.mean=="number"?fe=[re.mean,re.mean,re.mean,re.mean]:fe=[re.mean[0],re.mean[1],re.mean[2],re.mean[3]??255],typeof re.bias=="number"?le=[re.bias,re.bias,re.bias,re.bias]:le=[re.bias[0],re.bias[1],re.bias[2],re.bias[3]??0];const O=z.format!==void 0?z.format:"RGBA",ee=z.tensorFormat!==void 0&&z.tensorFormat!==void 0?z.tensorFormat:"RGB",ce=D*q,X=ee==="RGBA"?new Float32Array(ce*4):new Float32Array(ce*3);let K=4,N=0,k=1,R=2,E=3,de=0,we=ce,$e=ce*2,Oe=-1;O==="RGB"&&(K=3,N=0,k=1,R=2,E=-1),ee==="RGBA"?Oe=ce*3:ee==="RBG"?(de=0,$e=ce,we=ce*2):ee==="BGR"&&($e=0,we=ce,de=ce*2);for(let nt=0;nt<ce;nt++,N+=K,R+=K,k+=K,E+=K)X[de++]=(P[N]+le[0])/fe[0],X[we++]=(P[k]+le[1])/fe[1],X[$e++]=(P[R]+le[2])/fe[2],Oe!==-1&&E!==-1&&(X[Oe++]=(P[E]+le[3])/fe[3]);return ee==="RGBA"?new F.Tensor("float32",X,[1,4,D,q]):new F.Tensor("float32",X,[1,3,D,q])},be=async(P,z)=>{const D=typeof HTMLImageElement<"u"&&P instanceof HTMLImageElement,q=typeof ImageData<"u"&&P instanceof ImageData,re=typeof ImageBitmap<"u"&&P instanceof ImageBitmap,fe=typeof P=="string";let le,O=z??{};const ee=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},ce=X=>X instanceof HTMLCanvasElement||X instanceof OffscreenCanvas?X.getContext("2d"):null;if(D){const X=ee();X.width=P.width,X.height=P.height;const K=ce(X);if(K!=null){let N=P.height,k=P.width;if(z!==void 0&&z.resizedHeight!==void 0&&z.resizedWidth!==void 0&&(N=z.resizedHeight,k=z.resizedWidth),z!==void 0){if(O=z,z.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");O.tensorFormat="RGBA",O.height=N,O.width=k}else O.tensorFormat="RGBA",O.height=N,O.width=k;K.drawImage(P,0,0),le=K.getImageData(0,0,k,N).data}else throw new Error("Can not access image data")}else if(q){let X,K;if(z!==void 0&&z.resizedWidth!==void 0&&z.resizedHeight!==void 0?(X=z.resizedHeight,K=z.resizedWidth):(X=P.height,K=P.width),z!==void 0&&(O=z),O.format="RGBA",O.height=X,O.width=K,z!==void 0){const N=ee();N.width=K,N.height=X;const k=ce(N);if(k!=null)k.putImageData(P,0,0),le=k.getImageData(0,0,K,X).data;else throw new Error("Can not access image data")}else le=P.data}else if(re){if(z===void 0)throw new Error("Please provide image config with format for Imagebitmap");const X=ee();X.width=P.width,X.height=P.height;const K=ce(X);if(K!=null){const N=P.height,k=P.width;return K.drawImage(P,0,0,k,N),le=K.getImageData(0,0,k,N).data,O.height=N,O.width=k,he(le,O)}else throw new Error("Can not access image data")}else{if(fe)return new Promise((X,K)=>{const N=ee(),k=ce(N);if(!P||!k)return K();const R=new Image;R.crossOrigin="Anonymous",R.src=P,R.onload=()=>{N.width=R.width,N.height=R.height,k.drawImage(R,0,0,N.width,N.height);const E=k.getImageData(0,0,N.width,N.height);O.height=N.height,O.width=N.width,X(he(E.data,O))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(le!==void 0)return he(le,O);throw new Error("Input data provided is not supported - aborted tensor creation")},Ce=(P,z)=>{const{width:D,height:q,download:re,dispose:fe}=z,le=[1,q,D,4];return new F.Tensor({location:"texture",type:"float32",texture:P,dims:le,download:re,dispose:fe})},Ee=(P,z)=>{const{dataType:D,dims:q,download:re,dispose:fe}=z;return new F.Tensor({location:"gpu-buffer",type:D??"float32",gpuBuffer:P,dims:q,download:re,dispose:fe})},U=(P,z,D)=>new F.Tensor({location:"cpu-pinned",type:P,data:z,dims:D??[z.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":(It,Se,j)=>{j.r(Se)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":(It,Se,j)=>{j.r(Se),j.d(Se,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>he,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>F,checkTypedArray:()=>Ce});const F=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),he=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let be=!1;const Ce=()=>{if(!be){be=!0;const Ee=typeof BigInt64Array<"u"&&BigInt64Array.from,U=typeof BigUint64Array<"u"&&BigUint64Array.from,P=typeof Float16Array<"u"&&Float16Array.from;Ee&&(F.set("int64",BigInt64Array),he.set(BigInt64Array,"int64")),U&&(F.set("uint64",BigUint64Array),he.set(BigUint64Array,"uint64")),P?(F.set("float16",Float16Array),he.set(Float16Array,"float16")):F.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{Tensor:()=>Ee});var F=j("./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),he=j("./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),be=j("./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),Ce=j("./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class Ee{constructor(P,z,D){(0,be.checkTypedArray)();let q,re;if(typeof P=="object"&&"location"in P)switch(this.dataLocation=P.location,q=P.type,re=P.dims,P.location){case"cpu-pinned":{const le=be.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(q);if(!le)throw new TypeError(`unsupported type "${q}" to create tensor from pinned buffer`);if(!(P.data instanceof le))throw new TypeError(`buffer should be of type ${le.name}`);this.cpuData=P.data;break}case"texture":{if(q!=="float32")throw new TypeError(`unsupported type "${q}" to create tensor from texture`);this.gpuTextureData=P.texture,this.downloader=P.download,this.disposer=P.dispose;break}case"gpu-buffer":{if(q!=="float32"&&q!=="float16"&&q!=="int32"&&q!=="int64"&&q!=="uint32"&&q!=="uint8"&&q!=="bool")throw new TypeError(`unsupported type "${q}" to create tensor from gpu buffer`);this.gpuBufferData=P.gpuBuffer,this.downloader=P.download,this.disposer=P.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let le,O;if(typeof P=="string")if(q=P,O=D,P==="string"){if(!Array.isArray(z))throw new TypeError("A string tensor's data must be a string array.");le=z}else{const ee=be.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(P);if(ee===void 0)throw new TypeError(`Unsupported tensor type: ${P}.`);if(Array.isArray(z)){if(P==="float16"&&ee===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");P==="uint64"||P==="int64"?le=ee.from(z,BigInt):le=ee.from(z)}else if(z instanceof ee)le=z;else throw new TypeError(`A ${q} tensor's data must be type of ${ee}`)}else if(O=z,Array.isArray(P)){if(P.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const ee=typeof P[0];if(ee==="string")q="string",le=P;else if(ee==="boolean")q="bool",le=Uint8Array.from(P);else throw new TypeError(`Invalid element type of data array: ${ee}.`)}else{const ee=be.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(P.constructor);if(ee===void 0)throw new TypeError(`Unsupported type for tensor data: ${P.constructor}.`);q=ee,le=P}if(O===void 0)O=[le.length];else if(!Array.isArray(O))throw new TypeError("A tensor's dims must be a number array");re=O,this.cpuData=le,this.dataLocation="cpu"}const fe=(0,Ce.calculateSize)(re);if(this.cpuData&&fe!==this.cpuData.length)throw new Error(`Tensor's size(${fe}) does not match data length(${this.cpuData.length}).`);this.type=q,this.dims=re,this.size=fe}static async fromImage(P,z){return(0,he.tensorFromImage)(P,z)}static fromTexture(P,z){return(0,he.tensorFromTexture)(P,z)}static fromGpuBuffer(P,z){return(0,he.tensorFromGpuBuffer)(P,z)}static fromPinnedBuffer(P,z,D){return(0,he.tensorFromPinnedBuffer)(P,z,D)}toDataURL(P){return(0,F.tensorToDataURL)(this,P)}toImageData(P){return(0,F.tensorToImageData)(this,P)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(P){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const z=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=z,P&&this.disposer&&(this.disposer(),this.disposer=void 0),z}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(P){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,Ce.tensorReshape)(this,P)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{calculateSize:()=>he,tensorReshape:()=>be});var F=j("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const he=Ce=>{let Ee=1;for(let U=0;U<Ce.length;U++){const P=Ce[U];if(typeof P!="number"||!Number.isSafeInteger(P))throw new TypeError(`dims[${U}] must be an integer, got: ${P}`);if(P<0)throw new RangeError(`dims[${U}] must be a non-negative integer, got: ${P}`);Ee*=P}return Ee},be=(Ce,Ee)=>{switch(Ce.location){case"cpu":return new F.Tensor(Ce.type,Ce.data,Ee);case"cpu-pinned":return new F.Tensor({location:"cpu-pinned",data:Ce.data,type:Ce.type,dims:Ee});case"texture":return new F.Tensor({location:"texture",texture:Ce.texture,type:Ce.type,dims:Ee});case"gpu-buffer":return new F.Tensor({location:"gpu-buffer",gpuBuffer:Ce.gpuBuffer,type:Ce.type,dims:Ee});default:throw new Error(`tensorReshape: tensor location ${Ce.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":(It,Se,j)=>{j.r(Se),j.d(Se,{Tensor:()=>he});var F=j("./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const he=F.Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":(It,Se,j)=>{j.r(Se),j.d(Se,{TRACE:()=>he,TRACE_FUNC_BEGIN:()=>Ce,TRACE_FUNC_END:()=>Ee});var F=j("./node_modules/onnxruntime-common/dist/esm/env-impl.js");const he=(U,P)=>{(typeof F.env.trace>"u"?!F.env.wasm.trace:!F.env.trace)||console.timeStamp(`${U}::ORT::${P}`)},be=(U,P)=>{var q;const z=((q=new Error().stack)==null?void 0:q.split(/\r\n|\r|\n/g))||[];let D=!1;for(let re=0;re<z.length;re++){if(D&&!z[re].includes("TRACE_FUNC")){let fe=`FUNC_${U}::${z[re].trim().split(" ")[1]}`;P&&(fe+=`::${P}`),he("CPU",fe);return}z[re].includes("TRACE_FUNC")&&(D=!0)}},Ce=U=>{(typeof F.env.trace>"u"?!F.env.wasm.trace:!F.env.trace)||be("BEGIN",U)},Ee=U=>{(typeof F.env.trace>"u"?!F.env.wasm.trace:!F.env.trace)||be("END",U)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":(It,Se,j)=>{j.r(Se),j.d(Se,{TrainingSession:()=>Ce});var F=j("./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),he=j("./node_modules/onnxruntime-common/dist/esm/tensor.js");const be="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";class Ce{constructor(U,P,z){this.handler=U,this.hasOptimizerModel=P,this.hasEvalModel=z}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(U,P){const z=U.evalModel||"",D=U.optimizerModel||"",q=P||{},[re,fe]=await(0,F.resolveBackendAndExecutionProviders)(q);if(re.createTrainingSessionHandler){const le=await re.createTrainingSessionHandler(U.checkpointState,U.trainModel,z,D,fe);return new Ce(le,!!U.optimizerModel,!!U.evalModel)}else throw new Error(be)}typeNarrowingForRunStep(U,P,z,D,q){const re={};let fe={};if(typeof z!="object"||z===null||z instanceof he.Tensor||Array.isArray(z))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let le=!0;if(typeof D=="object"){if(D===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(D instanceof he.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(D)){if(D.length===0)throw new TypeError("'fetches' cannot be an empty array.");le=!1;for(const O of D){if(typeof O!="string")throw new TypeError("'fetches' must be a string array or an object.");if(P.indexOf(O)===-1)throw new RangeError(`'fetches' contains invalid output name: ${O}.`);re[O]=null}if(typeof q=="object"&&q!==null)fe=q;else if(typeof q<"u")throw new TypeError("'options' must be an object.")}else{let O=!1;const ee=Object.getOwnPropertyNames(D);for(const ce of P)if(ee.indexOf(ce)!==-1){const X=D[ce];(X===null||X instanceof he.Tensor)&&(O=!0,le=!1,re[ce]=X)}if(O){if(typeof q=="object"&&q!==null)fe=q;else if(typeof q<"u")throw new TypeError("'options' must be an object.")}else fe=D}}else if(typeof D<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const O of U)if(typeof z[O]>"u")throw new Error(`input '${O}' is missing in 'feeds'.`);if(le)for(const O of P)re[O]=null;return[re,fe]}convertHandlerReturnTypeToMapOfTensors(U){const P={};for(const z in U)if(Object.hasOwnProperty.call(U,z)){const D=U[z];D instanceof he.Tensor?P[z]=D:P[z]=new he.Tensor(D.type,D.data,D.dims)}return P}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(U,P,z){const[D,q]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,U,P,z),re=await this.handler.runTrainStep(U,D,q);return this.convertHandlerReturnTypeToMapOfTensors(re)}async runOptimizerStep(U){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(U||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(U,P,z){if(this.hasEvalModel){const[D,q]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,U,P,z),re=await this.handler.runEvalStep(U,D,q);return this.convertHandlerReturnTypeToMapOfTensors(re)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(U=!0){return this.handler.getParametersSize(U)}async loadParametersBuffer(U,P=!0){const z=await this.getParametersSize(P);if(U.length!==4*z)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(U,P)}async getContiguousParameters(U=!0){return this.handler.getContiguousParameters(U)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":(It,Se,j)=>{j.r(Se),j.d(Se,{TrainingSession:()=>he});var F=j("./node_modules/onnxruntime-common/dist/esm/training-session-impl.js");const he=F.TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":(It,Se,j)=>{j.r(Se),j.d(Se,{version:()=>F});const F="1.19.2"},"./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs":(It,Se,j)=>{j.r(Se),j.d(Se,{InferenceSession:()=>Et,TRACE:()=>Ge,TRACE_FUNC_BEGIN:()=>je,TRACE_FUNC_END:()=>Ve,Tensor:()=>J,TrainingSession:()=>ht,default:()=>Hf,env:()=>E,registerBackend:()=>fe});/*!
 * ONNX Runtime Web v1.20.0-dev.20241016-2b8fc5529b
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var F=Object.defineProperty,he=Object.getOwnPropertyDescriptor,be=Object.getOwnPropertyNames,Ce=Object.prototype.hasOwnProperty,Ee=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),U=(e,t)=>()=>(e&&(t=e(e=0)),t),P=(e,t)=>{for(var r in t)F(e,r,{get:t[r],enumerable:!0})},z=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of be(t))!Ce.call(e,s)&&s!==r&&F(e,s,{get:()=>t[s],enumerable:!(n=he(t,s))||n.enumerable});return e},D=e=>z(F({},"__esModule",{value:!0}),e),q,re,fe,le,O,ee=U(()=>{q=new Map,re=[],fe=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=q.get(e);if(n===void 0)q.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let s=re.indexOf(e);s!==-1&&re.splice(s,1);for(let a=0;a<re.length;a++)if(q.get(re[a]).priority<=r){re.splice(a,0,e);return}re.push(e)}return}throw new TypeError("not a valid backend")},le=async e=>{let t=q.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},O=async e=>{let t=e.executionProviders||[],r=t.map(d=>typeof d=="string"?d:d.name),n=r.length===0?re:r,s,a=[],i=new Set;for(let d of n){let c=await le(d);typeof c=="string"?a.push({name:d,err:c}):(s||(s=c),s===c&&i.add(d))}if(!s)throw new Error(`no available backend found. ERR: ${a.map(d=>`[${d.name}] ${d.err}`).join(", ")}`);for(let{name:d,err:c}of a)r.includes(d)&&console.warn(`removing requested execution provider "${d}" from session options because it is not available: ${c}`);let u=t.filter(d=>i.has(typeof d=="string"?d:d.name));return[s,new Proxy(e,{get:(d,c)=>c==="executionProviders"?u:Reflect.get(d,c)})]}}),ce=U(()=>{ee()}),X,K=U(()=>{X="1.20.0-dev.20241016-2b8fc5529b"}),N,k,R=U(()=>{K(),N="warning",k={wasm:{},webgl:{},webgpu:{},versions:{common:X},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);N=e}},get logLevel(){return N}},Object.defineProperty(k,"logLevel",{enumerable:!0})}),E,de=U(()=>{R(),E=k}),we,$e,Oe=U(()=>{we=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],a=e.dims[3]):(s=e.dims[3],a=e.dims[2]);let i=(t==null?void 0:t.format)!==void 0?t.format:"RGB",u=t==null?void 0:t.norm,d,c;u===void 0||u.mean===void 0?d=[255,255,255,255]:typeof u.mean=="number"?d=[u.mean,u.mean,u.mean,u.mean]:(d=[u.mean[0],u.mean[1],u.mean[2],0],u.mean[3]!==void 0&&(d[3]=u.mean[3])),u===void 0||u.bias===void 0?c=[0,0,0,0]:typeof u.bias=="number"?c=[u.bias,u.bias,u.bias,u.bias]:(c=[u.bias[0],u.bias[1],u.bias[2],0],u.bias[3]!==void 0&&(c[3]=u.bias[3]));let g=a*s,_=0,l=g,x=g*2,T=-1;i==="RGBA"?(_=0,l=g,x=g*2,T=g*3):i==="RGB"?(_=0,l=g,x=g*2):i==="RBG"&&(_=0,x=g,l=g*2);for(let C=0;C<a;C++)for(let L=0;L<s;L++){let G=(e.data[_++]-c[0])*d[0],I=(e.data[l++]-c[1])*d[1],te=(e.data[x++]-c[2])*d[2],Q=T===-1?255:(e.data[T++]-c[3])*d[3];n.fillStyle="rgba("+G+","+I+","+te+","+Q+")",n.fillRect(L,C,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},$e=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let s,a,i;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(s=e.dims[2],a=e.dims[1],i=e.dims[3]):(s=e.dims[3],a=e.dims[2],i=e.dims[1]);let u=t!==void 0&&t.format!==void 0?t.format:"RGB",d=t==null?void 0:t.norm,c,g;d===void 0||d.mean===void 0?c=[255,255,255,255]:typeof d.mean=="number"?c=[d.mean,d.mean,d.mean,d.mean]:(c=[d.mean[0],d.mean[1],d.mean[2],255],d.mean[3]!==void 0&&(c[3]=d.mean[3])),d===void 0||d.bias===void 0?g=[0,0,0,0]:typeof d.bias=="number"?g=[d.bias,d.bias,d.bias,d.bias]:(g=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(g[3]=d.bias[3]));let _=a*s;if(t!==void 0&&(t.format!==void 0&&i===4&&t.format!=="RGBA"||i===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let l=4,x=0,T=1,C=2,L=3,G=0,I=_,te=_*2,Q=-1;u==="RGBA"?(G=0,I=_,te=_*2,Q=_*3):u==="RGB"?(G=0,I=_,te=_*2):u==="RBG"&&(G=0,te=_,I=_*2),n=r.createImageData(s,a);for(let ne=0;ne<a*s;x+=l,T+=l,C+=l,L+=l,ne++)n.data[x]=(e.data[G++]-g[0])*c[0],n.data[T]=(e.data[I++]-g[1])*c[1],n.data[C]=(e.data[te++]-g[2])*c[2],n.data[L]=Q===-1?255:(e.data[Q++]-g[3])*c[3]}else throw new Error("Can not access image data");return n}}),Fe,nt,Je,lt,me,W,ue=U(()=>{He(),Fe=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,s=t.norm??{mean:255,bias:0},a,i;typeof s.mean=="number"?a=[s.mean,s.mean,s.mean,s.mean]:a=[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],typeof s.bias=="number"?i=[s.bias,s.bias,s.bias,s.bias]:i=[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];let u=t.format!==void 0?t.format:"RGBA",d=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*n,g=d==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),_=4,l=0,x=1,T=2,C=3,L=0,G=c,I=c*2,te=-1;u==="RGB"&&(_=3,l=0,x=1,T=2,C=-1),d==="RGBA"?te=c*3:d==="RBG"?(L=0,I=c,G=c*2):d==="BGR"&&(I=0,G=c,L=c*2);for(let Q=0;Q<c;Q++,l+=_,T+=_,x+=_,C+=_)g[L++]=(e[l]+i[0])/a[0],g[G++]=(e[x]+i[1])/a[1],g[I++]=(e[T]+i[2])/a[2],te!==-1&&C!==-1&&(g[te++]=(e[C]+i[3])/a[3]);return d==="RGBA"?new bt("float32",g,[1,4,r,n]):new bt("float32",g,[1,3,r,n])},nt=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,s=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,a=typeof e=="string",i,u=t??{},d=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=g=>typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement||g instanceof OffscreenCanvas?g.getContext("2d"):null;if(r){let g=d();g.width=e.width,g.height=e.height;let _=c(g);if(_!=null){let l=e.height,x=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(l=t.resizedHeight,x=t.resizedWidth),t!==void 0){if(u=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");u.tensorFormat="RGBA",u.height=l,u.width=x}else u.tensorFormat="RGBA",u.height=l,u.width=x;_.drawImage(e,0,0),i=_.getImageData(0,0,x,l).data}else throw new Error("Can not access image data")}else if(n){let g,_;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(g=t.resizedHeight,_=t.resizedWidth):(g=e.height,_=e.width),t!==void 0&&(u=t),u.format="RGBA",u.height=g,u.width=_,t!==void 0){let l=d();l.width=_,l.height=g;let x=c(l);if(x!=null)x.putImageData(e,0,0),i=x.getImageData(0,0,_,g).data;else throw new Error("Can not access image data")}else i=e.data}else if(s){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let g=d();g.width=e.width,g.height=e.height;let _=c(g);if(_!=null){let l=e.height,x=e.width;return _.drawImage(e,0,0,x,l),i=_.getImageData(0,0,x,l).data,u.height=l,u.width=x,Fe(i,u)}else throw new Error("Can not access image data")}else{if(a)return new Promise((g,_)=>{let l=d(),x=c(l);if(!e||!x)return _();let T=new Image;T.crossOrigin="Anonymous",T.src=e,T.onload=()=>{l.width=T.width,l.height=T.height,x.drawImage(T,0,0,l.width,l.height);let C=x.getImageData(0,0,l.width,l.height);u.height=l.height,u.width=l.width,g(Fe(C.data,u))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(i!==void 0)return Fe(i,u);throw new Error("Input data provided is not supported - aborted tensor creation")},Je=(e,t)=>{let{width:r,height:n,download:s,dispose:a}=t,i=[1,n,r,4];return new bt({location:"texture",type:"float32",texture:e,dims:i,download:s,dispose:a})},lt=(e,t)=>{let{dataType:r,dims:n,download:s,dispose:a}=t;return new bt({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:s,dispose:a})},me=(e,t)=>{let{dataType:r,dims:n,download:s,dispose:a}=t;return new bt({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:s,dispose:a})},W=(e,t,r)=>new bt({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),Te,Ne,at,se,Ke=U(()=>{Te=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Ne=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),at=!1,se=()=>{if(!at){at=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(Te.set("int64",BigInt64Array),Ne.set(BigInt64Array,"int64")),t&&(Te.set("uint64",BigUint64Array),Ne.set(BigUint64Array,"uint64")),r?(Te.set("float16",Float16Array),Ne.set(Float16Array,"float16")):Te.set("float16",Uint16Array)}}}),ct,Be,mt=U(()=>{He(),ct=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},Be=(e,t)=>{switch(e.location){case"cpu":return new bt(e.type,e.data,t);case"cpu-pinned":return new bt({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new bt({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new bt({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new bt({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),bt,He=U(()=>{Oe(),ue(),Ke(),mt(),bt=class{constructor(e,t,r){se();let n,s;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,s=e.dims,e.location){case"cpu-pinned":{let i=Te.get(n);if(!i)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof i))throw new TypeError(`buffer should be of type ${i.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,u;if(typeof e=="string")if(n=e,u=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{let d=Te.get(e);if(d===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&d===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${d.name} as data.`);e==="uint64"||e==="int64"?i=d.from(t,BigInt):i=d.from(t)}else if(t instanceof d)i=t;else if(t instanceof Uint8ClampedArray)if(e==="uint8")i=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else throw new TypeError(`A ${n} tensor's data must be type of ${d}`)}else if(u=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let d=typeof e[0];if(d==="string")n="string",i=e;else if(d==="boolean")n="bool",i=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${d}.`)}else if(e instanceof Uint8ClampedArray)n="uint8",i=Uint8Array.from(e);else{let d=Ne.get(e.constructor);if(d===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=d,i=e}if(u===void 0)u=[i.length];else if(!Array.isArray(u))throw new TypeError("A tensor's dims must be a number array");s=u,this.cpuData=i,this.dataLocation="cpu"}let a=ct(s);if(this.cpuData&&a!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(a/2)===this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=a}static async fromImage(e,t){return nt(e,t)}static fromTexture(e,t){return Je(e,t)}static fromGpuBuffer(e,t){return lt(e,t)}static fromMLTensor(e,t){return me(e,t)}static fromPinnedBuffer(e,t,r){return W(e,t,r)}toDataURL(e){return we(this,e)}toImageData(e){return $e(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Be(this,e)}}}),J,Ae=U(()=>{He(),J=bt}),Ge,Ze,je,Ve,dt=U(()=>{R(),Ge=(e,t)=>{(typeof k.trace>"u"?!k.wasm.trace:!k.trace)||console.timeStamp(`${e}::ORT::${t}`)},Ze=(e,t)=>{var s;let r=((s=new Error().stack)==null?void 0:s.split(/\r\n|\r|\n/g))||[],n=!1;for(let a=0;a<r.length;a++){if(n&&!r[a].includes("TRACE_FUNC")){let i=`FUNC_${e}::${r[a].trim().split(" ")[1]}`;t&&(i+=`::${t}`),Ge("CPU",i);return}r[a].includes("TRACE_FUNC")&&(n=!0)}},je=e=>{(typeof k.trace>"u"?!k.wasm.trace:!k.trace)||Ze("BEGIN",e)},Ve=e=>{(typeof k.trace>"u"?!k.wasm.trace:!k.trace)||Ze("END",e)}}),yt,Pt=U(()=>{ee(),Ae(),dt(),yt=class Ef{constructor(t){this.handler=t}async run(t,r,n){je();let s={},a={};if(typeof t!="object"||t===null||t instanceof J||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof J)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);s[c]=null}if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,g=Object.getOwnPropertyNames(r);for(let _ of this.outputNames)if(g.indexOf(_)!==-1){let l=r[_];(l===null||l instanceof J)&&(c=!0,i=!1,s[_]=l)}if(c){if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else a=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(i)for(let c of this.outputNames)s[c]=null;let u=await this.handler.run(t,s,a),d={};for(let c in u)if(Object.hasOwnProperty.call(u,c)){let g=u[c];g instanceof J?d[c]=g:d[c]=new J(g.type,g.data,g.dims)}return Ve(),d}async release(){return this.handler.dispose()}static async create(t,r,n,s){je();let a,i={};if(typeof t=="string"){if(a=t,typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(a=t,typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let g=t,_=0,l=t.byteLength;if(typeof r=="object"&&r!==null)i=r;else if(typeof r=="number"){if(_=r,!Number.isSafeInteger(_))throw new RangeError("'byteOffset' must be an integer.");if(_<0||_>=g.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${g.byteLength}).`);if(l=t.byteLength-_,typeof n=="number"){if(l=n,!Number.isSafeInteger(l))throw new RangeError("'byteLength' must be an integer.");if(l<=0||_+l>g.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${g.byteLength-_}].`);if(typeof s=="object"&&s!==null)i=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");a=new Uint8Array(g,_,l)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[u,d]=await O(i),c=await u.createInferenceSessionHandler(a,d);return Ve(),new Ef(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}),Et,M=U(()=>{Pt(),Et=yt}),H=U(()=>{}),$=U(()=>{}),Z=U(()=>{}),pe=U(()=>{}),et,Xe,Rt=U(()=>{ee(),Ae(),et="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Xe=class kf{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",s=t.optimizerModel||"",a=r||{},[i,u]=await O(a);if(i.createTrainingSessionHandler){let d=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,s,u);return new kf(d,!!t.optimizerModel,!!t.evalModel)}else throw new Error(et)}typeNarrowingForRunStep(t,r,n,s,a){let i={},u={};if(typeof n!="object"||n===null||n instanceof J||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let d=!0;if(typeof s=="object"){if(s===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(s instanceof J)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(s)){if(s.length===0)throw new TypeError("'fetches' cannot be an empty array.");d=!1;for(let c of s){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);i[c]=null}if(typeof a=="object"&&a!==null)u=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,g=Object.getOwnPropertyNames(s);for(let _ of r)if(g.indexOf(_)!==-1){let l=s[_];(l===null||l instanceof J)&&(c=!0,d=!1,i[_]=l)}if(c){if(typeof a=="object"&&a!==null)u=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else u=s}}else if(typeof s<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of t)if(typeof n[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(d)for(let c of r)i[c]=null;return[i,u]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let s=t[n];s instanceof J?r[n]=s:r[n]=new J(s.type,s.data,s.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[s,a]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),i=await this.handler.runTrainStep(t,s,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[s,a]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),i=await this.handler.runEvalStep(t,s,a);return this.convertHandlerReturnTypeToMapOfTensors(i)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}}),ht,Tt=U(()=>{Rt(),ht=Xe}),zt={};P(zt,{InferenceSession:()=>Et,TRACE:()=>Ge,TRACE_FUNC_BEGIN:()=>je,TRACE_FUNC_END:()=>Ve,Tensor:()=>J,TrainingSession:()=>ht,env:()=>E,registerBackend:()=>fe});var St=U(()=>{ce(),de(),M(),Ae(),H(),$(),dt(),Z(),pe(),Tt()}),dr=U(()=>{}),Tr={};P(Tr,{default:()=>en});var Zr,Dr,en,ot=U(()=>{var e;Kp(),Gr(),qt(),Zr="ort-wasm-proxy-worker",Dr=((e=globalThis.self)==null?void 0:e.name)===Zr,Dr&&(self.onmessage=t=>{let{type:r,in:n}=t.data;try{switch(r){case"init-wasm":Xr(n.wasm).then(()=>{Sc(n).then(()=>{postMessage({type:r})},s=>{postMessage({type:r,err:s})})},s=>{postMessage({type:r,err:s})});break;case"init-ep":{let{epName:s,env:a}=n;Pc(a,s).then(()=>{postMessage({type:r})},i=>{postMessage({type:r,err:i})});break}case"copy-from":{let{buffer:s}=n,a=rc(s);postMessage({type:r,out:a});break}case"create":{let{model:s,options:a}=n;Ac(s,a).then(i=>{postMessage({type:r,out:i})},i=>{postMessage({type:r,err:i})});break}case"release":Ic(n),postMessage({type:r});break;case"run":{let{sessionId:s,inputIndices:a,inputs:i,outputIndices:u,options:d}=n;Oc(s,a,i,u,new Array(u.length).fill(null),d).then(c=>{c.some(g=>g[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:c},Dc([...i,...c]))},c=>{postMessage({type:r,err:c})});break}case"end-profiling":zc(n),postMessage({type:r});break;default:}}catch(s){postMessage({type:r,err:s})}}),en=Dr?null:t=>new Worker(t??Qe,{type:"module",name:Zr})}),V={};P(V,{default:()=>tt});var ge,Ie,tt,xe=U(()=>{var e;Ie=(ge=self.location.href,async function(t={}){function r(){return mr.buffer!=Jt.buffer&&_n(),Jt}function n(){return mr.buffer!=Jt.buffer&&_n(),vr}function s(){return mr.buffer!=Jt.buffer&&_n(),We}function a(){return mr.buffer!=Jt.buffer&&_n(),vt}function i(){return mr.buffer!=Jt.buffer&&_n(),rr}function u(){return mr.buffer!=Jt.buffer&&_n(),zr}function d(){return mr.buffer!=Jt.buffer&&_n(),sn}function c(){return mr.buffer!=Jt.buffer&&_n(),ic}var g,_,l=Object.assign({},t),x=new Promise((o,h)=>{g=o,_=h}),T=typeof window=="object",C=typeof importScripts=="function",L=C&&self.name=="em-pthread";l.mountExternalData=(o,h)=>{o.startsWith("./")&&(o=o.substring(2)),(l.Fb||(l.Fb=new Map)).set(o,h)},l.unmountExternalData=()=>{delete l.Fb};var G=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let I=()=>{let o=(w,v,S)=>(...ie)=>{let qe=us,it=v==null?void 0:v();ie=w(...ie);let At=v==null?void 0:v();return it!==At&&(w=At,S(it),v=S=null),us!=qe?new Promise((Lt,Zt)=>{rp={resolve:Lt,reject:Zt}}):ie},h=w=>async(...v)=>{var S;try{if(l.Eb)throw Error("Session already started");let ie=l.Eb={fc:v[0],errors:[]},qe=await w(...v);if(l.Eb!==ie)throw Error("Session mismatch");(S=l.Gb)==null||S.flush();let it=ie.errors;if(0<it.length){let At=await Promise.all(it);if(At=At.filter(Lt=>Lt),0<At.length)throw Error(At.join(`
`))}return qe}finally{l.Eb=null}};l._OrtCreateSession=o(l._OrtCreateSession,()=>l._OrtCreateSession,w=>l._OrtCreateSession=w),l._OrtRun=h(o(l._OrtRun,()=>l._OrtRun,w=>l._OrtRun=w)),l._OrtRunWithBinding=h(o(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,w=>l._OrtRunWithBinding=w)),l._OrtBindInput=o(l._OrtBindInput,()=>l._OrtBindInput,w=>l._OrtBindInput=w),I=void 0};l.jsepInit=(o,h)=>{if(I==null||I(),o==="webgpu"){[l.Gb,l.Ub,l.Yb,l.Nb,l.Xb,l.jb,l.Zb,l.bc,l.Vb,l.Wb,l.$b]=h;let w=l.Gb;l.jsepRegisterBuffer=(v,S,ie,qe)=>w.registerBuffer(v,S,ie,qe),l.jsepGetBuffer=v=>w.getBuffer(v),l.jsepCreateDownloader=(v,S,ie)=>w.createDownloader(v,S,ie),l.jsepOnReleaseSession=v=>{w.onReleaseSession(v)},l.jsepOnRunStart=v=>w.onRunStart(v),l.cc=(v,S)=>{w.upload(v,S)}}else if(o==="webnn"){[l.Gb,l.ac,l.Ob,l.jsepEnsureTensor,l.dc,l.jsepDownloadTensor]=h,l.jsepReleaseTensorId=l.Ob;let w=l.Gb;l.jsepOnRunStart=v=>w.onRunStart(v),l.jsepRegisterMLContext=(v,S)=>{w.registerMLContext(v,S)},l.jsepOnReleaseSession=v=>{w.onReleaseSession(v)},l.jsepCreateMLTensorDownloader=(v,S)=>w.createMLTensorDownloader(v,S),l.jsepRegisterMLTensor=(v,S,ie)=>w.registerMLTensor(v,S,ie)}};var te,Q,ne=Object.assign({},l),Re="./this.program",Pe=(o,h)=>{throw h},st="";(T||C)&&(C?st=self.location.href:typeof document<"u"&&document.currentScript&&(st=document.currentScript.src),ge&&(st=ge),st=st.startsWith("blob:")?"":st.substr(0,st.replace(/[?#].*/,"").lastIndexOf("/")+1),C&&(Q=o=>{var h=new XMLHttpRequest;return h.open("GET",o,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),te=(o,h,w)=>{var v=new XMLHttpRequest;v.open("GET",o,!0),v.responseType="arraybuffer",v.onload=()=>{v.status==200||v.status==0&&v.response?h(v.response):w()},v.onerror=w,v.send(null)});var Ot,jt=console.log.bind(console),ur=console.error.bind(console),hr=jt,Xt=ur;if(Object.assign(l,ne),ne=null,L){let o=function(h){try{var w=h.data,v=w.cmd;if(v==="load"){let S=[];self.onmessage=ie=>S.push(ie),self.startWorker=()=>{postMessage({cmd:"loaded"});for(let ie of S)o(ie);self.onmessage=o};for(let ie of w.handlers)l[ie]&&!l[ie].proxy||(l[ie]=(...qe)=>{postMessage({Mb:"callHandler",oc:ie,args:qe})},ie=="print"&&(hr=l[ie]),ie=="printErr"&&(Xt=l[ie]));mr=w.wasmMemory,_n(),Or(w.wasmModule)}else if(v==="run"){ap(w.pthread_ptr,0,0,1,0,0),Jc(w.pthread_ptr),Qf(),gh(),Wr||(mf(),Wr=!0);try{Yf(w.start_routine,w.arg)}catch(S){if(S!="unwind")throw S}}else v==="cancel"?oo()&&gc(-1):w.target!=="setimmediate"&&(v==="checkMailbox"?Wr&&lc():v&&(Xt(`worker: received unknown command ${v}`),Xt(w)))}catch(S){throw _f(),S}};var Or,Wr=!1;Xt=function(...h){h=h.join(" "),console.error(h)},self.alert=function(...h){postMessage({Mb:"alert",text:h.join(" "),qc:oo()})},l.instantiateWasm=(h,w)=>new Promise(v=>{Or=S=>{S=new WebAssembly.Instance(S,ph()),w(S),v()}}),self.onunhandledrejection=h=>{throw h.reason||h},self.onmessage=o}l.wasmBinary&&(Ot=l.wasmBinary);var mr,Br,Gt,Jt,vr,We,vt,rr,zr,sn,on,qs,ic,$n=!1;function _n(){var o=mr.buffer;l.HEAP8=Jt=new Int8Array(o),l.HEAP16=We=new Int16Array(o),l.HEAPU8=vr=new Uint8Array(o),l.HEAPU16=vt=new Uint16Array(o),l.HEAP32=rr=new Int32Array(o),l.HEAPU32=zr=new Uint32Array(o),l.HEAPF32=sn=new Float32Array(o),l.HEAPF64=ic=new Float64Array(o),l.HEAP64=on=new BigInt64Array(o),l.HEAPU64=qs=new BigUint64Array(o)}if(!L){if(!((mr=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof G))throw Xt("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");_n()}var yi=[],hn=[],vn=[],Wn=0,Hs=null;function ac(){if(--Wn==0&&Hs){var o=Hs;Hs=null,o()}}function so(o){throw Xt(o="Aborted("+o+")"),$n=!0,Gt=1,o=new WebAssembly.RuntimeError(o+". Build with -sASSERTIONS for more info."),_(o),o}var jc,lh=o=>o.startsWith("data:application/octet-stream;base64,"),uh=o=>o.startsWith("file://");function dh(o){if(o==jc&&Ot)return new Uint8Array(Ot);if(Q)return Q(o);throw"both async and sync fetching of the wasm failed"}function ch(o,h,w){return function(v){if(!Ot&&(T||C)){if(typeof fetch=="function"&&!uh(v))return fetch(v,{credentials:"same-origin"}).then(S=>{if(!S.ok)throw`failed to load wasm binary file at '${v}'`;return S.arrayBuffer()}).catch(()=>dh(v));if(te)return new Promise((S,ie)=>{te(v,qe=>S(new Uint8Array(qe)),ie)})}return Promise.resolve().then(()=>dh(v))}(o).then(v=>WebAssembly.instantiate(v,h)).then(w,v=>{Xt(`failed to asynchronously prepare wasm: ${v}`),so(v)})}function ph(){return{a:{O:Xf,Aa:Kf,b:Jf,aa:Mh,B:Th,qa:Ch,Y:Eh,_:kh,ra:Sh,oa:Ph,ha:Ah,na:Ih,L:Fh,Z:Oh,W:zh,pa:Dh,X:Bh,wa:em,F:tm,Q:rm,P:sm,E:am,u:om,q:lm,G:um,A:_m,R:gm,ua:wm,ka:ym,U:bm,ba:Mm,H:vm,ja:Jc,ta:xm,t:Tm,x:Em,o:km,l:Pm,c:Yc,n:Am,j:Om,w:zm,p:Dm,g:Bm,s:Lm,m:Rm,e:Nm,k:jm,i:Vm,h:Um,d:Wm,ea:Gm,fa:qm,ga:Hm,ca:Yh,da:Zh,T:Km,f:Xm,D:Qm,I:Ym,M:Zm,y:Jm,sa:e_,V:t_,v:ef,z:r_,N:n_,S:s_,za:i_,ya:a_,la:nf,ma:sf,$:qc,C:af,K:of,ia:lf,J:uf,a:mr,xa:Gc,va:pf,r:u_}}}var Vc={867620:(o,h,w,v,S)=>{if(l===void 0||!l.Fb)return 1;if((o=bn(o>>>0)).startsWith("./")&&(o=o.substring(2)),!(o=l.Fb.get(o)))return 2;if(v>>>=0,(h>>>=0)+(w>>>=0)>o.byteLength)return 3;try{let ie=o.subarray(h,h+w);switch(S){case 0:n().set(ie,v>>>0);break;case 1:l.cc(v,ie);break;default:return 4}return 0}catch{return 4}},868303:(o,h,w)=>{l.dc(o,n().subarray(h>>>0,h+w>>>0))},868366:()=>l.ac(),868407:o=>{l.Ob(o)},868443:()=>{l.Vb()},868474:()=>{l.Wb()},868503:()=>{l.$b()},868528:o=>l.Ub(o),868561:o=>l.Yb(o),868593:(o,h,w)=>{l.Nb(o,h,w,!0)},868632:(o,h,w)=>{l.Nb(o,h,w)},868665:()=>typeof wasmOffsetConverter<"u",868722:o=>{l.jb("Abs",o,void 0)},868773:o=>{l.jb("Neg",o,void 0)},868824:o=>{l.jb("Floor",o,void 0)},868877:o=>{l.jb("Ceil",o,void 0)},868929:o=>{l.jb("Reciprocal",o,void 0)},868987:o=>{l.jb("Sqrt",o,void 0)},869039:o=>{l.jb("Exp",o,void 0)},869090:o=>{l.jb("Erf",o,void 0)},869141:o=>{l.jb("Sigmoid",o,void 0)},869196:(o,h,w)=>{l.jb("HardSigmoid",o,{alpha:h,beta:w})},869275:o=>{l.jb("Log",o,void 0)},869326:o=>{l.jb("Sin",o,void 0)},869377:o=>{l.jb("Cos",o,void 0)},869428:o=>{l.jb("Tan",o,void 0)},869479:o=>{l.jb("Asin",o,void 0)},869531:o=>{l.jb("Acos",o,void 0)},869583:o=>{l.jb("Atan",o,void 0)},869635:o=>{l.jb("Sinh",o,void 0)},869687:o=>{l.jb("Cosh",o,void 0)},869739:o=>{l.jb("Asinh",o,void 0)},869792:o=>{l.jb("Acosh",o,void 0)},869845:o=>{l.jb("Atanh",o,void 0)},869898:o=>{l.jb("Tanh",o,void 0)},869950:o=>{l.jb("Not",o,void 0)},870001:(o,h,w)=>{l.jb("Clip",o,{min:h,max:w})},870070:o=>{l.jb("Clip",o,void 0)},870122:(o,h)=>{l.jb("Elu",o,{alpha:h})},870180:o=>{l.jb("Gelu",o,void 0)},870232:o=>{l.jb("Relu",o,void 0)},870284:(o,h)=>{l.jb("LeakyRelu",o,{alpha:h})},870348:(o,h)=>{l.jb("ThresholdedRelu",o,{alpha:h})},870418:(o,h)=>{l.jb("Cast",o,{to:h})},870476:o=>{l.jb("Add",o,void 0)},870527:o=>{l.jb("Sub",o,void 0)},870578:o=>{l.jb("Mul",o,void 0)},870629:o=>{l.jb("Div",o,void 0)},870680:o=>{l.jb("Pow",o,void 0)},870731:o=>{l.jb("Equal",o,void 0)},870784:o=>{l.jb("Greater",o,void 0)},870839:o=>{l.jb("GreaterOrEqual",o,void 0)},870901:o=>{l.jb("Less",o,void 0)},870953:o=>{l.jb("LessOrEqual",o,void 0)},871012:(o,h,w,v,S)=>{l.jb("ReduceMean",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871171:(o,h,w,v,S)=>{l.jb("ReduceMax",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871329:(o,h,w,v,S)=>{l.jb("ReduceMin",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871487:(o,h,w,v,S)=>{l.jb("ReduceProd",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871646:(o,h,w,v,S)=>{l.jb("ReduceSum",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871804:(o,h,w,v,S)=>{l.jb("ReduceL1",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},871961:(o,h,w,v,S)=>{l.jb("ReduceL2",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},872118:(o,h,w,v,S)=>{l.jb("ReduceLogSum",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},872279:(o,h,w,v,S)=>{l.jb("ReduceSumSquare",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},872443:(o,h,w,v,S)=>{l.jb("ReduceLogSumExp",o,{keepDims:!!h,noopWithEmptyAxes:!!w,axes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},872607:o=>{l.jb("Where",o,void 0)},872660:(o,h,w)=>{l.jb("Transpose",o,{perm:h?Array.from(i().subarray(h>>>0,w>>>0)):[]})},872768:(o,h,w,v)=>{l.jb("DepthToSpace",o,{blocksize:h,mode:bn(w),format:v?"NHWC":"NCHW"})},872901:(o,h,w,v)=>{l.jb("DepthToSpace",o,{blocksize:h,mode:bn(w),format:v?"NHWC":"NCHW"})},873034:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De,br)=>{l.jb("ConvTranspose",o,{format:At?"NHWC":"NCHW",autoPad:h,dilations:[w],group:v,kernelShape:[S],pads:[ie,qe],strides:[it],wIsConst:()=>!!r()[Lt>>>0],outputPadding:Zt?Array.from(i().subarray(Zt>>>0,xr>>>0)):[],outputShape:Lr?Array.from(i().subarray(Lr>>>0,De>>>0)):[],activation:bn(br)})},873435:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("ConvTranspose",o,{format:it?"NHWC":"NCHW",autoPad:h,dilations:Array.from(i().subarray(w>>>0,2+(w>>>0)>>>0)),group:v,kernelShape:Array.from(i().subarray(S>>>0,2+(S>>>0)>>>0)),pads:Array.from(i().subarray(ie>>>0,4+(ie>>>0)>>>0)),strides:Array.from(i().subarray(qe>>>0,2+(qe>>>0)>>>0)),wIsConst:()=>!!r()[At>>>0],outputPadding:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],outputShape:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[],activation:bn(De)})},874e3:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De,br)=>{l.jb("ConvTranspose",o,{format:At?"NHWC":"NCHW",autoPad:h,dilations:[w],group:v,kernelShape:[S],pads:[ie,qe],strides:[it],wIsConst:()=>!!r()[Lt>>>0],outputPadding:Zt?Array.from(i().subarray(Zt>>>0,xr>>>0)):[],outputShape:Lr?Array.from(i().subarray(Lr>>>0,De>>>0)):[],activation:bn(br)})},874401:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("ConvTranspose",o,{format:it?"NHWC":"NCHW",autoPad:h,dilations:Array.from(i().subarray(w>>>0,2+(w>>>0)>>>0)),group:v,kernelShape:Array.from(i().subarray(S>>>0,2+(S>>>0)>>>0)),pads:Array.from(i().subarray(ie>>>0,4+(ie>>>0)>>>0)),strides:Array.from(i().subarray(qe>>>0,2+(qe>>>0)>>>0)),wIsConst:()=>!!r()[At>>>0],outputPadding:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],outputShape:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[],activation:bn(De)})},874966:(o,h)=>{l.jb("GlobalAveragePool",o,{format:h?"NHWC":"NCHW"})},875057:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("AveragePool",o,{format:De?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:v,storage_order:S,dilations:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,At>>>0)):[],pads:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],strides:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[]})},875472:(o,h)=>{l.jb("GlobalAveragePool",o,{format:h?"NHWC":"NCHW"})},875563:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("AveragePool",o,{format:De?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:v,storage_order:S,dilations:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,At>>>0)):[],pads:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],strides:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[]})},875978:(o,h)=>{l.jb("GlobalMaxPool",o,{format:h?"NHWC":"NCHW"})},876065:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("MaxPool",o,{format:De?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:v,storage_order:S,dilations:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,At>>>0)):[],pads:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],strides:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[]})},876476:(o,h)=>{l.jb("GlobalMaxPool",o,{format:h?"NHWC":"NCHW"})},876563:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De)=>{l.jb("MaxPool",o,{format:De?"NHWC":"NCHW",auto_pad:h,ceil_mode:w,count_include_pad:v,storage_order:S,dilations:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[],kernel_shape:it?Array.from(i().subarray(it>>>0,At>>>0)):[],pads:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],strides:xr?Array.from(i().subarray(xr>>>0,Lr>>>0)):[]})},876974:(o,h,w,v,S)=>{l.jb("Gemm",o,{alpha:h,beta:w,transA:v,transB:S})},877078:o=>{l.jb("MatMul",o,void 0)},877132:(o,h,w,v)=>{l.jb("ArgMax",o,{keepDims:!!h,selectLastIndex:!!w,axis:v})},877240:(o,h,w,v)=>{l.jb("ArgMin",o,{keepDims:!!h,selectLastIndex:!!w,axis:v})},877348:(o,h)=>{l.jb("Softmax",o,{axis:h})},877411:(o,h)=>{l.jb("Concat",o,{axis:h})},877471:(o,h,w,v,S)=>{l.jb("Split",o,{axis:h,numOutputs:w,splitSizes:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},877611:o=>{l.jb("Expand",o,void 0)},877665:(o,h)=>{l.jb("Gather",o,{axis:Number(h)})},877736:(o,h)=>{l.jb("GatherElements",o,{axis:Number(h)})},877815:(o,h,w,v,S,ie,qe,it,At,Lt,Zt)=>{l.jb("Resize",o,{antialias:h,axes:w?Array.from(i().subarray(w>>>0,v>>>0)):[],coordinateTransformMode:bn(S),cubicCoeffA:ie,excludeOutside:qe,extrapolationValue:it,keepAspectRatioPolicy:bn(At),mode:bn(Lt),nearestMode:bn(Zt)})},878161:(o,h,w,v,S,ie,qe)=>{l.jb("Slice",o,{starts:h?Array.from(i().subarray(h>>>0,w>>>0)):[],ends:v?Array.from(i().subarray(v>>>0,S>>>0)):[],axes:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[]})},878377:o=>{l.jb("Tile",o,void 0)},878429:(o,h,w)=>{l.jb("InstanceNormalization",o,{epsilon:h,format:w?"NHWC":"NCHW"})},878543:(o,h,w)=>{l.jb("InstanceNormalization",o,{epsilon:h,format:w?"NHWC":"NCHW"})},878657:o=>{l.jb("Range",o,void 0)},878710:(o,h)=>{l.jb("Einsum",o,{equation:bn(h)})},878791:(o,h,w,v,S)=>{l.jb("Pad",o,{mode:h,value:w,pads:v?Array.from(i().subarray(v>>>0,S>>>0)):[]})},878918:(o,h,w,v,S,ie)=>{l.jb("BatchNormalization",o,{epsilon:h,momentum:w,spatial:!!S,trainingMode:!!v,format:ie?"NHWC":"NCHW"})},879087:(o,h,w,v,S,ie)=>{l.jb("BatchNormalization",o,{epsilon:h,momentum:w,spatial:!!S,trainingMode:!!v,format:ie?"NHWC":"NCHW"})},879256:(o,h,w)=>{l.jb("CumSum",o,{exclusive:Number(h),reverse:Number(w)})},879353:(o,h,w)=>{l.jb("DequantizeLinear",o,{axis:h,blockSize:w})},879443:(o,h,w,v,S,ie,qe,it,At)=>{l.jb("Attention",o,{numHeads:h,isUnidirectional:w,maskFilterValue:v,scale:S,doRotary:ie,qkvHiddenSizes:qe?Array.from(i().subarray(Number(it)>>>0,Number(it)+qe>>>0)):[],pastPresentShareBuffer:!!At})},879715:o=>{l.jb("BiasAdd",o,void 0)},879770:o=>{l.jb("BiasSplitGelu",o,void 0)},879831:o=>{l.jb("FastGelu",o,void 0)},879887:(o,h,w,v,S,ie,qe,it,At,Lt,Zt,xr,Lr,De,br,nn)=>{l.jb("Conv",o,{format:xr?"NHWC":"NCHW",auto_pad:h,dilations:w?Array.from(i().subarray(w>>>0,v>>>0)):[],group:S,kernel_shape:ie?Array.from(i().subarray(ie>>>0,qe>>>0)):[],pads:it?Array.from(i().subarray(it>>>0,At>>>0)):[],strides:Lt?Array.from(i().subarray(Lt>>>0,Zt>>>0)):[],w_is_const:()=>!!r()[Lr>>>0],activation:bn(De),activation_params:br?Array.from(d().subarray(br>>>0,nn>>>0)):[]})},880383:o=>{l.jb("Gelu",o,void 0)},880435:(o,h,w,v)=>{l.jb("GroupQueryAttention",o,{numHeads:h,kvNumHeads:w,scale:v})},880548:(o,h,w,v)=>{l.jb("LayerNormalization",o,{axis:h,epsilon:w,simplified:!!v})},880659:(o,h,w,v)=>{l.jb("LayerNormalization",o,{axis:h,epsilon:w,simplified:!!v})},880770:(o,h,w,v,S,ie)=>{l.jb("MatMulNBits",o,{k:h,n:w,accuracyLevel:v,bits:S,blockSize:ie})},880897:(o,h,w,v,S,ie)=>{l.jb("MultiHeadAttention",o,{numHeads:h,isUnidirectional:w,maskFilterValue:v,scale:S,doRotary:ie})},881056:(o,h)=>{l.jb("QuickGelu",o,{alpha:h})},881120:(o,h,w,v,S)=>{l.jb("RotaryEmbedding",o,{interleaved:!!h,numHeads:w,rotaryEmbeddingDim:v,scale:S})},881259:(o,h,w)=>{l.jb("SkipLayerNormalization",o,{epsilon:h,simplified:!!w})},881361:(o,h,w)=>{l.jb("SkipLayerNormalization",o,{epsilon:h,simplified:!!w})},881463:(o,h,w,v)=>{l.jb("GatherBlockQuantized",o,{gatherAxis:h,quantizeAxis:w,blockSize:v})},881584:o=>{l.Zb(o)},881618:(o,h)=>l.bc(o,h,l.Eb.fc,l.Eb.errors)};function Kf(o,h,w){return qh(async()=>{await l.Xb(o,h,w)})}function Xf(){return typeof wasmOffsetConverter<"u"}function Uc(o){this.name="ExitStatus",this.message=`Program terminated with exit(${o})`,this.status=o}var Wc=o=>{o.terminate(),o.onmessage=()=>{}},hh=o=>{Ks.length==0&&(yh(),wh(Ks[0]));var h=Ks.pop();if(!h)return 6;Mi.push(h),os[o.Ab]=h,h.Ab=o.Ab;var w={cmd:"run",start_routine:o.hc,arg:o.Qb,pthread_ptr:o.Ab};return h.postMessage(w,o.mc),0},bi=0,Jr=(o,h,...w)=>{for(var v=2*w.length,S=up(),ie=lp(8*v),qe=ie>>>3,it=0;it<w.length;it++){var At=w[it];typeof At=="bigint"?(on[qe+2*it]=1n,on[qe+2*it+1]=At):(on[qe+2*it]=0n,c()[qe+2*it+1>>>0]=At)}return o=gf(o,0,v,ie,h),wc(S),o};function Gc(o){if(L)return Jr(0,1,o);if(Gt=o,!(0<bi)){for(var h of Mi)Wc(h);for(h of Ks)Wc(h);Ks=[],Mi=[],os=[],$n=!0}Pe(o,new Uc(o))}function fh(o){if(L)return Jr(1,0,o);qc(o)}var qc=o=>{if(Gt=o,L)throw fh(o),"unwind";Gc(o)},Ks=[],Mi=[],mh=[],os={},_h=o=>{var h=o.Ab;delete os[h],Ks.push(o),Mi.splice(Mi.indexOf(o),1),o.Ab=0,op(h)};function gh(){mh.forEach(o=>o())}var wh=o=>new Promise(h=>{o.onmessage=S=>{var ie=(S=S.data).cmd;if(S.targetThread&&S.targetThread!=oo()){var qe=os[S.targetThread];qe?qe.postMessage(S,S.transferList):Xt(`Internal error! Worker sent a message "${ie}" to target pthread ${S.targetThread}, but that thread no longer exists!`)}else ie==="checkMailbox"?lc():ie==="spawnThread"?hh(S):ie==="cleanupThread"?_h(os[S.thread]):ie==="killThread"?(S=S.thread,ie=os[S],delete os[S],Wc(ie),op(S),Mi.splice(Mi.indexOf(ie),1),ie.Ab=0):ie==="cancelThread"?os[S.thread].postMessage({cmd:"cancel"}):ie==="loaded"?(o.loaded=!0,h(o)):ie==="alert"?alert(`Thread ${S.threadId}: ${S.text}`):S.target==="setimmediate"?o.postMessage(S):ie==="callHandler"?l[S.handler](...S.args):ie&&Xt(`worker sent an unknown command ${ie}`)},o.onerror=S=>{throw Xt(`worker sent an error! ${S.filename}:${S.lineno}: ${S.message}`),S};var w,v=[];for(w of[])l.hasOwnProperty(w)&&v.push(w);o.postMessage({cmd:"load",handlers:v,wasmMemory:mr,wasmModule:Br})});function yh(){var o=new Worker(new URL(self.location.href),{type:"module",workerData:"em-pthread",name:"em-pthread"});Ks.push(o)}var oc=o=>{for(;0<o.length;)o.shift()(l)},Qf=()=>{var o=oo(),h=u()[o+52>>>2>>>0];o=u()[o+56>>>2>>>0],yf(h,h-o),wc(h)},Yf=(o,h)=>{bi=0,o=bf(o,h),0<bi?Gt=o:gc(o)};class Zf{constructor(h){this.Jb=h-24}}function Jf(o,h,w){var v=new Zf(o>>>=0);throw h>>>=0,w>>>=0,u()[v.Jb+16>>>2>>>0]=0,u()[v.Jb+4>>>2>>>0]=h,u()[v.Jb+8>>>2>>>0]=w,o}function bh(o,h,w,v){return L?Jr(2,1,o,h,w,v):Mh(o,h,w,v)}function Mh(o,h,w,v){if(o>>>=0,h>>>=0,w>>>=0,v>>>=0,G===void 0)return Xt("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var S=[];return L&&S.length===0?bh(o,h,w,v):(o={hc:w,Ab:o,Qb:v,mc:S},L?(o.Mb="spawnThread",postMessage(o,S),0):hh(o))}var vh=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,xh=(o,h,w)=>{var v=(h>>>=0)+w;for(w=h;o[w]&&!(w>=v);)++w;if(16<w-h&&o.buffer&&vh)return vh.decode(o.buffer instanceof G?o.slice(h,w):o.subarray(h,w));for(v="";h<w;){var S=o[h++];if(128&S){var ie=63&o[h++];if((224&S)==192)v+=String.fromCharCode((31&S)<<6|ie);else{var qe=63&o[h++];65536>(S=(240&S)==224?(15&S)<<12|ie<<6|qe:(7&S)<<18|ie<<12|qe<<6|63&o[h++])?v+=String.fromCharCode(S):(S-=65536,v+=String.fromCharCode(55296|S>>10,56320|1023&S))}}else v+=String.fromCharCode(S)}return v},bn=(o,h)=>(o>>>=0)?xh(n(),o,h):"";function Th(o,h,w){return L?Jr(3,1,o,h,w):0}function Ch(o,h){if(L)return Jr(4,1,o,h)}var Hc=o=>{for(var h=0,w=0;w<o.length;++w){var v=o.charCodeAt(w);127>=v?h++:2047>=v?h+=2:55296<=v&&57343>=v?(h+=4,++w):h+=3}return h},$h=(o,h,w,v)=>{if(!(0<v))return 0;var S=w>>>=0;v=w+v-1;for(var ie=0;ie<o.length;++ie){var qe=o.charCodeAt(ie);if(55296<=qe&&57343>=qe&&(qe=65536+((1023&qe)<<10)|1023&o.charCodeAt(++ie)),127>=qe){if(w>=v)break;h[w++>>>0]=qe}else{if(2047>=qe){if(w+1>=v)break;h[w++>>>0]=192|qe>>6}else{if(65535>=qe){if(w+2>=v)break;h[w++>>>0]=224|qe>>12}else{if(w+3>=v)break;h[w++>>>0]=240|qe>>18,h[w++>>>0]=128|qe>>12&63}h[w++>>>0]=128|qe>>6&63}h[w++>>>0]=128|63&qe}}return h[w>>>0]=0,w-S},io=(o,h,w)=>$h(o,n(),h,w);function Eh(o,h){if(L)return Jr(5,1,o,h)}function kh(o,h,w){if(L)return Jr(6,1,o,h,w)}function Sh(o,h,w){return L?Jr(7,1,o,h,w):0}function Ph(o,h){if(L)return Jr(8,1,o,h)}function Ah(o,h,w){if(L)return Jr(9,1,o,h,w)}function Ih(o,h,w,v){if(L)return Jr(10,1,o,h,w,v)}function Fh(o,h,w,v){if(L)return Jr(11,1,o,h,w,v)}function Oh(o,h,w,v){if(L)return Jr(12,1,o,h,w,v)}function zh(o){if(L)return Jr(13,1,o)}function Dh(o,h){if(L)return Jr(14,1,o,h)}function Bh(o,h,w){if(L)return Jr(15,1,o,h,w)}var Lh,Xs,em=()=>{so("")},ls=o=>{for(var h="";n()[o>>>0];)h+=Lh[n()[o++>>>0]];return h},Kc={},Xc={};function ys(o,h,w={}){if(!("argPackAdvance"in h))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(v,S,ie={}){var qe=S.name;if(!v)throw new Xs(`type "${qe}" must have a positive integer typeid pointer`);if(Xc.hasOwnProperty(v)){if(ie.Sb)return;throw new Xs(`Cannot register type '${qe}' twice`)}Xc[v]=S,Kc.hasOwnProperty(v)&&(S=Kc[v],delete Kc[v],S.forEach(it=>it()))}(o,h,w)}var Rh=(o,h,w)=>{switch(h){case 1:return w?v=>r()[v>>>0]:v=>n()[v>>>0];case 2:return w?v=>s()[v>>>1>>>0]:v=>a()[v>>>1>>>0];case 4:return w?v=>i()[v>>>2>>>0]:v=>u()[v>>>2>>>0];case 8:return w?v=>on[v>>>3]:v=>qs[v>>>3];default:throw new TypeError(`invalid integer width (${h}): ${o}`)}};function tm(o,h,w){w>>>=0,ys(o>>>=0,{name:h=ls(h>>>0),fromWireType:v=>v,toWireType:function(v,S){if(typeof S!="bigint"&&typeof S!="number")throw S=S===null?"null":(v=typeof S)=="object"||v==="array"||v==="function"?S.toString():""+S,new TypeError(`Cannot convert "${S}" to ${this.name}`);return typeof S=="number"&&(S=BigInt(S)),S},argPackAdvance:Qs,readValueFromPointer:Rh(h,w,h.indexOf("u")==-1),Db:null})}var Qs=8;function rm(o,h,w,v){ys(o>>>=0,{name:h=ls(h>>>0),fromWireType:function(S){return!!S},toWireType:function(S,ie){return ie?w:v},argPackAdvance:Qs,readValueFromPointer:function(S){return this.fromWireType(n()[S>>>0])},Db:null})}var Qc=[],bs=[];function Yc(o){9<(o>>>=0)&&--bs[o+1]==0&&(bs[o]=void 0,Qc.push(o))}var Gn=o=>{if(!o)throw new Xs("Cannot use deleted val. handle = "+o);return bs[o]},qn=o=>{switch(o){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let h=Qc.pop()||bs.length;return bs[h]=o,bs[h+1]=1,h}};function Zc(o){return this.fromWireType(u()[o>>>2>>>0])}var nm={name:"emscripten::val",fromWireType:o=>{var h=Gn(o);return Yc(o),h},toWireType:(o,h)=>qn(h),argPackAdvance:Qs,readValueFromPointer:Zc,Db:null};function sm(o){return ys(o>>>0,nm)}var im=(o,h)=>{switch(h){case 4:return function(w){return this.fromWireType(d()[w>>>2>>>0])};case 8:return function(w){return this.fromWireType(c()[w>>>3>>>0])};default:throw new TypeError(`invalid float width (${h}): ${o}`)}};function am(o,h,w){w>>>=0,ys(o>>>=0,{name:h=ls(h>>>0),fromWireType:v=>v,toWireType:(v,S)=>S,argPackAdvance:Qs,readValueFromPointer:im(h,w),Db:null})}function om(o,h,w,v,S){if(o>>>=0,w>>>=0,h=ls(h>>>0),S===-1&&(S=4294967295),S=it=>it,v===0){var ie=32-8*w;S=it=>it<<ie>>>ie}var qe=h.includes("unsigned")?function(it,At){return At>>>0}:function(it,At){return At};ys(o,{name:h,fromWireType:S,toWireType:qe,argPackAdvance:Qs,readValueFromPointer:Rh(h,w,v!==0),Db:null})}function lm(o,h,w){function v(ie){var qe=u()[ie>>>2>>>0];return ie=u()[ie+4>>>2>>>0],new S(r().buffer,ie,qe)}var S=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][h];ys(o>>>=0,{name:w=ls(w>>>0),fromWireType:v,argPackAdvance:Qs,readValueFromPointer:v},{Sb:!0})}function um(o,h){o>>>=0;var w=(h=ls(h>>>0))==="std::string";ys(o,{name:h,fromWireType:function(v){var S=u()[v>>>2>>>0],ie=v+4;if(w)for(var qe=ie,it=0;it<=S;++it){var At=ie+it;if(it==S||n()[At>>>0]==0){if(qe=bn(qe,At-qe),Lt===void 0)var Lt=qe;else Lt+="\0",Lt+=qe;qe=At+1}}else{for(Lt=Array(S),it=0;it<S;++it)Lt[it]=String.fromCharCode(n()[ie+it>>>0]);Lt=Lt.join("")}return ds(v),Lt},toWireType:function(v,S){S instanceof ArrayBuffer&&(S=new Uint8Array(S));var ie=typeof S=="string";if(!(ie||S instanceof Uint8Array||S instanceof Uint8ClampedArray||S instanceof Int8Array))throw new Xs("Cannot pass non-string to std::string");var qe=w&&ie?Hc(S):S.length,it=_c(4+qe+1),At=it+4;if(u()[it>>>2>>>0]=qe,w&&ie)io(S,At,qe+1);else if(ie)for(ie=0;ie<qe;++ie){var Lt=S.charCodeAt(ie);if(255<Lt)throw ds(At),new Xs("String has UTF-16 code units that do not fit in 8 bits");n()[At+ie>>>0]=Lt}else for(ie=0;ie<qe;++ie)n()[At+ie>>>0]=S[ie];return v!==null&&v.push(ds,it),it},argPackAdvance:Qs,readValueFromPointer:Zc,Db(v){ds(v)}})}var Nh=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,dm=(o,h)=>{for(var w=o>>1,v=w+h/2;!(w>=v)&&a()[w>>>0];)++w;if(32<(w<<=1)-o&&Nh)return Nh.decode(n().slice(o,w));for(w="",v=0;!(v>=h/2);++v){var S=s()[o+2*v>>>1>>>0];if(S==0)break;w+=String.fromCharCode(S)}return w},cm=(o,h,w)=>{if(w??(w=2147483647),2>w)return 0;var v=h;w=(w-=2)<2*o.length?w/2:o.length;for(var S=0;S<w;++S){var ie=o.charCodeAt(S);s()[h>>>1>>>0]=ie,h+=2}return s()[h>>>1>>>0]=0,h-v},pm=o=>2*o.length,hm=(o,h)=>{for(var w=0,v="";!(w>=h/4);){var S=i()[o+4*w>>>2>>>0];if(S==0)break;++w,65536<=S?(S-=65536,v+=String.fromCharCode(55296|S>>10,56320|1023&S)):v+=String.fromCharCode(S)}return v},fm=(o,h,w)=>{if(h>>>=0,w??(w=2147483647),4>w)return 0;var v=h;w=v+w-4;for(var S=0;S<o.length;++S){var ie=o.charCodeAt(S);if(55296<=ie&&57343>=ie&&(ie=65536+((1023&ie)<<10)|1023&o.charCodeAt(++S)),i()[h>>>2>>>0]=ie,(h+=4)+4>w)break}return i()[h>>>2>>>0]=0,h-v},mm=o=>{for(var h=0,w=0;w<o.length;++w){var v=o.charCodeAt(w);55296<=v&&57343>=v&&++w,h+=4}return h};function _m(o,h,w){if(o>>>=0,h>>>=0,w=ls(w>>>=0),h===2)var v=dm,S=cm,ie=pm,qe=it=>a()[it>>>1>>>0];else h===4&&(v=hm,S=fm,ie=mm,qe=it=>u()[it>>>2>>>0]);ys(o,{name:w,fromWireType:it=>{for(var At,Lt=u()[it>>>2>>>0],Zt=it+4,xr=0;xr<=Lt;++xr){var Lr=it+4+xr*h;xr!=Lt&&qe(Lr)!=0||(Zt=v(Zt,Lr-Zt),At===void 0?At=Zt:(At+="\0",At+=Zt),Zt=Lr+h)}return ds(it),At},toWireType:(it,At)=>{if(typeof At!="string")throw new Xs(`Cannot pass non-string to C++ string type ${w}`);var Lt=ie(At),Zt=_c(4+Lt+h);return u()[Zt>>>2>>>0]=Lt/h,S(At,Zt+4,Lt+h),it!==null&&it.push(ds,Zt),Zt},argPackAdvance:Qs,readValueFromPointer:Zc,Db(it){ds(it)}})}function gm(o,h){ys(o>>>=0,{Tb:!0,name:h=ls(h>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var wm=()=>1;function ym(o){ap(o>>>0,!C,1,!T,131072,!1),gh()}var jh=o=>{if(!$n)try{if(o(),!(0<bi))try{L?gc(Gt):qc(Gt)}catch(h){h instanceof Uc||h=="unwind"||Pe(1,h)}}catch(h){h instanceof Uc||h=="unwind"||Pe(1,h)}};function Jc(o){o>>>=0,typeof Atomics.nc=="function"&&(Atomics.nc(i(),o>>>2,o).value.then(lc),o+=128,Atomics.store(i(),o>>>2,1))}var lc=()=>{var o=oo();o&&(Jc(o),jh(wf))};function bm(o,h){(o>>>=0)==h>>>0?setTimeout(lc):L?postMessage({targetThread:o,cmd:"checkMailbox"}):(o=os[o])&&o.postMessage({cmd:"checkMailbox"})}var ep=[];function Mm(o,h,w,v,S){for(h>>>=0,v/=2,ep.length=v,w=S>>>0>>>3,S=0;S<v;S++)ep[S]=on[w+2*S]?on[w+2*S+1]:c()[w+2*S+1>>>0];return(h?Vc[h]:d_[o])(...ep)}function vm(o){o>>>=0,L?postMessage({cmd:"cleanupThread",thread:o}):_h(os[o])}function xm(o){}var tp=(o,h)=>{var w=Xc[o];if(w===void 0)throw o=ff(o),w=ls(o),ds(o),new Xs(`${h} has unknown type ${w}`);return w},Vh=(o,h,w)=>{var v=[];return o=o.toWireType(v,w),v.length&&(u()[h>>>2>>>0]=qn(v)),o};function Tm(o,h,w){return h>>>=0,w>>>=0,o=Gn(o>>>0),h=tp(h,"emval::as"),Vh(h,w,o)}var uc=o=>{try{o()}catch(h){so(h)}},Ys=0,us=null,Uh=0,dc=[],Wh={},Gh={},Cm=0,rp=null,$m=[];function qh(o){return function(h){if(!$n){if(Ys===0){var w=!1,v=!1;h((S=0)=>{if(!$n&&(Uh=S,w=!0,v)){Ys=2,uc(()=>xf(us)),typeof Browser<"u"&&Browser.Kb.Rb&&Browser.Kb.resume(),S=!1;try{var ie=function(){var At=i()[us+8>>>2>>>0];return At=Qt[Gh[At]],--bi,At()}()}catch(At){ie=At,S=!0}var qe=!1;if(!us){var it=rp;it&&(rp=null,(S?it.reject:it.resolve)(ie),qe=!0)}if(S&&!qe)throw ie}}),v=!0,w||(Ys=1,us=function(){var S=_c(65548),ie=S+12;u()[S>>>2>>>0]=ie,u()[S+4>>>2>>>0]=ie+65536,ie=dc[0];var qe=Wh[ie];return qe===void 0&&(qe=Cm++,Wh[ie]=qe,Gh[qe]=ie),ie=qe,i()[S+8>>>2>>>0]=ie,S}(),typeof Browser<"u"&&Browser.Kb.Rb&&Browser.Kb.pause(),uc(()=>Mf(us)))}else Ys===2?(Ys=0,uc(Tf),ds(us),us=null,$m.forEach(jh)):so(`invalid state: ${Ys}`);return Uh}}(h=>{o().then(h)})}function Em(o){return o>>>=0,qh(()=>(o=Gn(o)).then(qn))}var cc=[];function km(o,h,w,v){return w>>>=0,v>>>=0,(o=cc[o>>>0])(null,h=Gn(h>>>0),w,v)}var Sm={},pc=o=>{var h=Sm[o];return h===void 0?ls(o):h};function Pm(o,h,w,v,S){return w>>>=0,v>>>=0,S>>>=0,(o=cc[o>>>0])(h=Gn(h>>>0),h[w=pc(w)],v,S)}var Hh=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Am(o){return(o>>>=0)==0?qn(Hh()):(o=pc(o),qn(Hh()[o]))}var Im=o=>{var h=cc.length;return cc.push(o),h},Fm=(o,h)=>{for(var w=Array(o),v=0;v<o;++v)w[v]=tp(u()[h+4*v>>>2>>>0],"parameter "+v);return w},Kh=(o,h)=>Object.defineProperty(h,"name",{value:o});function Om(o,h,w){var v=(h=Fm(o,h>>>0)).shift();o--;var S=`return function (obj, func, destructorsRef, args) {
`,ie=0,qe=[];w===0&&qe.push("obj");for(var it=["retType"],At=[v],Lt=0;Lt<o;++Lt)qe.push("arg"+Lt),it.push("argType"+Lt),At.push(h[Lt]),S+=`  var arg${Lt} = argType${Lt}.readValueFromPointer(args${ie?"+"+ie:""});
`,ie+=h[Lt].argPackAdvance;return S+=`  var rv = ${w===1?"new func":"func.call"}(${qe.join(", ")});
`,v.Tb||(it.push("emval_returnValue"),At.push(Vh),S+=`  return emval_returnValue(retType, destructorsRef, rv);
`),it.push(S+`};
`),o=function(Zt){var xr=Function;if(!(xr instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof xr} which is not a function`);var Lr=Kh(xr.name||"unknownFunctionName",function(){});return Lr.prototype=xr.prototype,Lr=new Lr,(Zt=xr.apply(Lr,Zt))instanceof Object?Zt:Lr}(it)(...At),w=`methodCaller<(${h.map(Zt=>Zt.name).join(", ")}) => ${v.name}>`,Im(Kh(w,o))}function zm(o){return o=pc(o>>>0),qn(l[o])}function Dm(o,h){return h>>>=0,o=Gn(o>>>0),h=Gn(h),qn(o[h])}function Bm(o){9<(o>>>=0)&&(bs[o+1]+=1)}function Lm(){return qn([])}function Rm(o){o=Gn(o>>>0);for(var h=Array(o.length),w=0;w<o.length;w++)h[w]=o[w];return qn(h)}function Nm(o){return qn(pc(o>>>0))}function jm(){return qn({})}function Vm(o){for(var h=Gn(o>>>=0);h.length;){var w=h.pop();h.pop()(w)}Yc(o)}function Um(o,h,w){h>>>=0,w>>>=0,o=Gn(o>>>0),h=Gn(h),w=Gn(w),o[h]=w}function Wm(o,h){return h>>>=0,o=(o=tp(o>>>0,"_emval_take_value")).readValueFromPointer(h),qn(o)}function Gm(o,h){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),h>>>=0,o=new Date(1e3*o),i()[h>>>2>>>0]=o.getUTCSeconds(),i()[h+4>>>2>>>0]=o.getUTCMinutes(),i()[h+8>>>2>>>0]=o.getUTCHours(),i()[h+12>>>2>>>0]=o.getUTCDate(),i()[h+16>>>2>>>0]=o.getUTCMonth(),i()[h+20>>>2>>>0]=o.getUTCFullYear()-1900,i()[h+24>>>2>>>0]=o.getUTCDay(),o=(o.getTime()-Date.UTC(o.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[h+28>>>2>>>0]=o}var ao=o=>o%4==0&&(o%100!=0||o%400==0),Xh=[0,31,60,91,121,152,182,213,244,274,305,335],Qh=[0,31,59,90,120,151,181,212,243,273,304,334];function qm(o,h){o=-9007199254740992>o||9007199254740992<o?NaN:Number(o),h>>>=0,o=new Date(1e3*o),i()[h>>>2>>>0]=o.getSeconds(),i()[h+4>>>2>>>0]=o.getMinutes(),i()[h+8>>>2>>>0]=o.getHours(),i()[h+12>>>2>>>0]=o.getDate(),i()[h+16>>>2>>>0]=o.getMonth(),i()[h+20>>>2>>>0]=o.getFullYear()-1900,i()[h+24>>>2>>>0]=o.getDay();var w=(ao(o.getFullYear())?Xh:Qh)[o.getMonth()]+o.getDate()-1|0;i()[h+28>>>2>>>0]=w,i()[h+36>>>2>>>0]=-60*o.getTimezoneOffset(),w=new Date(o.getFullYear(),6,1).getTimezoneOffset();var v=new Date(o.getFullYear(),0,1).getTimezoneOffset();o=0|(w!=v&&o.getTimezoneOffset()==Math.min(v,w)),i()[h+32>>>2>>>0]=o}function Hm(o){o>>>=0;var h=new Date(i()[o+20>>>2>>>0]+1900,i()[o+16>>>2>>>0],i()[o+12>>>2>>>0],i()[o+8>>>2>>>0],i()[o+4>>>2>>>0],i()[o>>>2>>>0],0),w=i()[o+32>>>2>>>0],v=h.getTimezoneOffset(),S=new Date(h.getFullYear(),6,1).getTimezoneOffset(),ie=new Date(h.getFullYear(),0,1).getTimezoneOffset(),qe=Math.min(ie,S);return 0>w?i()[o+32>>>2>>>0]=+(S!=ie&&qe==v):0<w!=(qe==v)&&(S=Math.max(ie,S),h.setTime(h.getTime()+6e4*((0<w?qe:S)-v))),i()[o+24>>>2>>>0]=h.getDay(),w=(ao(h.getFullYear())?Xh:Qh)[h.getMonth()]+h.getDate()-1|0,i()[o+28>>>2>>>0]=w,i()[o>>>2>>>0]=h.getSeconds(),i()[o+4>>>2>>>0]=h.getMinutes(),i()[o+8>>>2>>>0]=h.getHours(),i()[o+12>>>2>>>0]=h.getDate(),i()[o+16>>>2>>>0]=h.getMonth(),i()[o+20>>>2>>>0]=h.getYear(),o=h.getTime(),BigInt(isNaN(o)?-1:o/1e3)}function Yh(o,h,w,v,S,ie,qe){return L?Jr(16,1,o,h,w,v,S,ie,qe):-52}function Zh(o,h,w,v,S,ie){if(L)return Jr(17,1,o,h,w,v,S,ie)}function Km(o,h,w,v){o>>>=0,h>>>=0,w>>>=0,v>>>=0;var S=new Date().getFullYear(),ie=new Date(S,0,1),qe=new Date(S,6,1);S=ie.getTimezoneOffset();var it=qe.getTimezoneOffset(),At=Math.max(S,it);u()[o>>>2>>>0]=60*At,i()[h>>>2>>>0]=+(S!=it),ie=(o=Lt=>Lt.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:"short"}).split(" ")[1])(ie),qe=o(qe),it<S?(io(ie,w,17),io(qe,v,17)):(io(ie,v,17),io(qe,w,17))}var np=[],Jh=(o,h)=>{np.length=0;for(var w;w=n()[o++>>>0];){var v=w!=105;h+=(v&=w!=112)&&h%8?4:0,np.push(w==112?u()[h>>>2>>>0]:w==106?on[h>>>3]:w==105?i()[h>>>2>>>0]:c()[h>>>3>>>0]),h+=v?8:4}return np};function Xm(o,h,w){return o>>>=0,h=Jh(h>>>0,w>>>0),Vc[o](...h)}function Qm(o,h,w){return o>>>=0,h=Jh(h>>>0,w>>>0),Vc[o](...h)}var Ym=()=>{},Zm=()=>Date.now();function Jm(o,h){return Xt(bn(o>>>0,h>>>0))}var ef,e_=()=>{throw bi+=1,"unwind"};function t_(){return 4294901760}ef=()=>performance.timeOrigin+performance.now();var r_=()=>navigator.hardwareConcurrency;function n_(){return so("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function s_(o){o>>>=0;var h=n().length;if(o<=h||4294901760<o)return!1;for(var w=1;4>=w;w*=2){var v=h*(1+.2/w);v=Math.min(v,o+100663296);var S=Math;v=Math.max(o,v);e:{S=(S.min.call(S,4294901760,v+(65536-v%65536)%65536)-mr.buffer.byteLength+65535)/65536;try{mr.grow(S),_n();var ie=1;break e}catch{}ie=void 0}if(ie)return!0}return!1}var hc=()=>(so("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),md={},tf=o=>{o.forEach(h=>{hc()})};function i_(){var o=Error().stack.toString().split(`
`);return o[0]=="Error"&&o.shift(),tf(o),md.Pb=hc(),md.ec=o,md.Pb}function a_(o,h,w){if(o>>>=0,h>>>=0,md.Pb==o)var v=md.ec;else(v=Error().stack.toString().split(`
`))[0]=="Error"&&v.shift(),tf(v);for(var S=3;v[S]&&hc()!=o;)++S;for(o=0;o<w&&v[o+S];++o)i()[h+4*o>>>2>>>0]=hc();return o}var sp,ip={},rf=()=>{if(!sp){var o,h={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:Re};for(o in ip)ip[o]===void 0?delete h[o]:h[o]=ip[o];var w=[];for(o in h)w.push(`${o}=${h[o]}`);sp=w}return sp};function nf(o,h){if(L)return Jr(18,1,o,h);o>>>=0,h>>>=0;var w=0;return rf().forEach((v,S)=>{var ie=h+w;for(S=u()[o+4*S>>>2>>>0]=ie,ie=0;ie<v.length;++ie)r()[S++>>>0]=v.charCodeAt(ie);r()[S>>>0]=0,w+=v.length+1}),0}function sf(o,h){if(L)return Jr(19,1,o,h);o>>>=0,h>>>=0;var w=rf();u()[o>>>2>>>0]=w.length;var v=0;return w.forEach(S=>v+=S.length+1),u()[h>>>2>>>0]=v,0}function af(o){return L?Jr(20,1,o):52}function of(o,h,w,v){return L?Jr(21,1,o,h,w,v):52}function lf(o,h,w,v){return L?Jr(22,1,o,h,w,v):70}var o_=[null,[],[]];function uf(o,h,w,v){if(L)return Jr(23,1,o,h,w,v);h>>>=0,w>>>=0,v>>>=0;for(var S=0,ie=0;ie<w;ie++){var qe=u()[h>>>2>>>0],it=u()[h+4>>>2>>>0];h+=8;for(var At=0;At<it;At++){var Lt=n()[qe+At>>>0],Zt=o_[o];Lt===0||Lt===10?((o===1?hr:Xt)(xh(Zt,0)),Zt.length=0):Zt.push(Lt)}S+=it}return u()[v>>>2>>>0]=S,0}var df=[31,29,31,30,31,30,31,31,30,31,30,31],cf=[31,28,31,30,31,30,31,31,30,31,30,31],l_=(o,h)=>{r().set(o,h>>>0)};function pf(o,h,w,v){function S(De,br,nn){for(De=typeof De=="number"?De.toString():De||"";De.length<br;)De=nn[0]+De;return De}function ie(De,br){return S(De,br,"0")}function qe(De,br){function nn($f){return 0>$f?-1:0<$f?1:0}var vi;return(vi=nn(De.getFullYear()-br.getFullYear()))===0&&(vi=nn(De.getMonth()-br.getMonth()))===0&&(vi=nn(De.getDate()-br.getDate())),vi}function it(De){switch(De.getDay()){case 0:return new Date(De.getFullYear()-1,11,29);case 1:return De;case 2:return new Date(De.getFullYear(),0,3);case 3:return new Date(De.getFullYear(),0,2);case 4:return new Date(De.getFullYear(),0,1);case 5:return new Date(De.getFullYear()-1,11,31);case 6:return new Date(De.getFullYear()-1,11,30)}}function At(De){var br=De.Bb;for(De=new Date(new Date(De.Cb+1900,0,1).getTime());0<br;){var nn=De.getMonth(),vi=(ao(De.getFullYear())?df:cf)[nn];if(!(br>vi-De.getDate())){De.setDate(De.getDate()+br);break}br-=vi-De.getDate()+1,De.setDate(1),11>nn?De.setMonth(nn+1):(De.setMonth(0),De.setFullYear(De.getFullYear()+1))}return nn=new Date(De.getFullYear()+1,0,4),br=it(new Date(De.getFullYear(),0,4)),nn=it(nn),0>=qe(br,De)?0>=qe(nn,De)?De.getFullYear()+1:De.getFullYear():De.getFullYear()-1}o>>>=0,h>>>=0,w>>>=0,v>>>=0;var Lt=u()[v+40>>>2>>>0];for(var Zt in v={kc:i()[v>>>2>>>0],jc:i()[v+4>>>2>>>0],Hb:i()[v+8>>>2>>>0],Lb:i()[v+12>>>2>>>0],Ib:i()[v+16>>>2>>>0],Cb:i()[v+20>>>2>>>0],ub:i()[v+24>>>2>>>0],Bb:i()[v+28>>>2>>>0],rc:i()[v+32>>>2>>>0],ic:i()[v+36>>>2>>>0],lc:Lt?bn(Lt):""},w=bn(w),Lt={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})w=w.replace(new RegExp(Zt,"g"),Lt[Zt]);var xr="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Lr="January February March April May June July August September October November December".split(" ");for(Zt in Lt={"%a":De=>xr[De.ub].substring(0,3),"%A":De=>xr[De.ub],"%b":De=>Lr[De.Ib].substring(0,3),"%B":De=>Lr[De.Ib],"%C":De=>ie((De.Cb+1900)/100|0,2),"%d":De=>ie(De.Lb,2),"%e":De=>S(De.Lb,2," "),"%g":De=>At(De).toString().substring(2),"%G":At,"%H":De=>ie(De.Hb,2),"%I":De=>((De=De.Hb)==0?De=12:12<De&&(De-=12),ie(De,2)),"%j":De=>{for(var br=0,nn=0;nn<=De.Ib-1;br+=(ao(De.Cb+1900)?df:cf)[nn++]);return ie(De.Lb+br,3)},"%m":De=>ie(De.Ib+1,2),"%M":De=>ie(De.jc,2),"%n":()=>`
`,"%p":De=>0<=De.Hb&&12>De.Hb?"AM":"PM","%S":De=>ie(De.kc,2),"%t":()=>"	","%u":De=>De.ub||7,"%U":De=>ie(Math.floor((De.Bb+7-De.ub)/7),2),"%V":De=>{var br=Math.floor((De.Bb+7-(De.ub+6)%7)/7);if(2>=(De.ub+371-De.Bb-2)%7&&br++,br)br==53&&((nn=(De.ub+371-De.Bb)%7)==4||nn==3&&ao(De.Cb)||(br=1));else{br=52;var nn=(De.ub+7-De.Bb-1)%7;(nn==4||nn==5&&ao(De.Cb%400-1))&&br++}return ie(br,2)},"%w":De=>De.ub,"%W":De=>ie(Math.floor((De.Bb+7-(De.ub+6)%7)/7),2),"%y":De=>(De.Cb+1900).toString().substring(2),"%Y":De=>De.Cb+1900,"%z":De=>{var br=0<=(De=De.ic);return De=Math.abs(De)/60,(br?"+":"-")+("0000"+(De/60*100+De%60)).slice(-4)},"%Z":De=>De.lc,"%%":()=>"%"},w=w.replace(/%%/g,"\0\0"),Lt)w.includes(Zt)&&(w=w.replace(new RegExp(Zt,"g"),Lt[Zt](v)));return Zt=function(De){var br=Array(Hc(De)+1);return $h(De,br,0,br.length),br}(w=w.replace(/\0\0/g,"%")),Zt.length>h?0:(l_(Zt,o),Zt.length-1)}function u_(o,h,w,v){return pf(o>>>0,h>>>0,w>>>0,v>>>0)}L||function(){for(var o=l.numThreads-1;o--;)yh();yi.unshift(()=>{Wn++,function(h){L?h():Promise.all(Ks.map(wh)).then(h)}(()=>ac())})}();for(var hf=Array(256),fc=0;256>fc;++fc)hf[fc]=String.fromCharCode(fc);Lh=hf,Xs=l.BindingError=class extends Error{constructor(o){super(o),this.name="BindingError"}},l.InternalError=class extends Error{constructor(o){super(o),this.name="InternalError"}},bs.push(0,1,void 0,1,null,1,!0,1,!1,1),l.count_emval_handles=()=>bs.length/2-5-Qc.length;var d_=[Gc,fh,bh,Th,Ch,Eh,kh,Sh,Ph,Ah,Ih,Fh,Oh,zh,Dh,Bh,Yh,Zh,nf,sf,af,of,lf,uf],Qt=function(){function o(w,v){return Qt=w.exports,Qt=function(){var S=Qt,ie={};for(let[qe,it]of Object.entries(S))ie[qe]=typeof it=="function"?(...At)=>{dc.push(qe);try{return it(...At)}finally{$n||(dc.pop(),us&&Ys===1&&dc.length===0&&(Ys=0,bi+=1,uc(vf),typeof Fibers<"u"&&Fibers.sc()))}}:it;return ie}(),Qt=function(){var S=Qt,ie=it=>At=>it(At)>>>0,qe=it=>()=>it()>>>0;return(S=Object.assign({},S)).Ca=ie(S.Ca),S.fb=qe(S.fb),S.gb=ie(S.gb),S.emscripten_main_runtime_thread_id=qe(S.emscripten_main_runtime_thread_id),S.sb=ie(S.sb),S.tb=qe(S.tb),S}(),mh.push(Qt.ib),hn.unshift(Qt.Ba),Br=v,ac(),Qt}var h=ph();if(Wn++,l.instantiateWasm)try{return l.instantiateWasm(h,o)}catch(w){Xt(`Module.instantiateWasm callback failed with error: ${w}`),_(w)}return jc||(jc=l.locateFile?lh("ort-wasm-simd-threaded.jsep.wasm")?"ort-wasm-simd-threaded.jsep.wasm":l.locateFile?l.locateFile("ort-wasm-simd-threaded.jsep.wasm",st):st+"ort-wasm-simd-threaded.jsep.wasm":new URL(j("./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm"),j.b).href),function(w,v){var S=jc;return Ot||typeof WebAssembly.instantiateStreaming!="function"||lh(S)||uh(S)||typeof fetch!="function"?ch(S,w,v):fetch(S,{credentials:"same-origin"}).then(ie=>WebAssembly.instantiateStreaming(ie,w).then(v,function(qe){return Xt(`wasm streaming compile failed: ${qe}`),Xt("falling back to ArrayBuffer instantiation"),ch(S,w,v)}))}(h,function(w){o(w.instance,w.module)}).catch(_),{}}(),ff=o=>(ff=Qt.Ca)(o),mf=()=>(mf=Qt.Da)();l._OrtInit=(o,h)=>(l._OrtInit=Qt.Ea)(o,h),l._OrtGetLastError=(o,h)=>(l._OrtGetLastError=Qt.Fa)(o,h),l._OrtCreateSessionOptions=(o,h,w,v,S,ie,qe,it,At,Lt)=>(l._OrtCreateSessionOptions=Qt.Ga)(o,h,w,v,S,ie,qe,it,At,Lt),l._OrtAppendExecutionProvider=(o,h)=>(l._OrtAppendExecutionProvider=Qt.Ha)(o,h),l._OrtAddFreeDimensionOverride=(o,h,w)=>(l._OrtAddFreeDimensionOverride=Qt.Ia)(o,h,w),l._OrtAddSessionConfigEntry=(o,h,w)=>(l._OrtAddSessionConfigEntry=Qt.Ja)(o,h,w),l._OrtReleaseSessionOptions=o=>(l._OrtReleaseSessionOptions=Qt.Ka)(o),l._OrtCreateSession=(o,h,w)=>(l._OrtCreateSession=Qt.La)(o,h,w),l._OrtReleaseSession=o=>(l._OrtReleaseSession=Qt.Ma)(o),l._OrtGetInputOutputCount=(o,h,w)=>(l._OrtGetInputOutputCount=Qt.Na)(o,h,w),l._OrtGetInputName=(o,h)=>(l._OrtGetInputName=Qt.Oa)(o,h),l._OrtGetOutputName=(o,h)=>(l._OrtGetOutputName=Qt.Pa)(o,h),l._OrtFree=o=>(l._OrtFree=Qt.Qa)(o),l._OrtCreateTensor=(o,h,w,v,S,ie)=>(l._OrtCreateTensor=Qt.Ra)(o,h,w,v,S,ie),l._OrtGetTensorData=(o,h,w,v,S)=>(l._OrtGetTensorData=Qt.Sa)(o,h,w,v,S),l._OrtReleaseTensor=o=>(l._OrtReleaseTensor=Qt.Ta)(o),l._OrtCreateRunOptions=(o,h,w,v)=>(l._OrtCreateRunOptions=Qt.Ua)(o,h,w,v),l._OrtAddRunConfigEntry=(o,h,w)=>(l._OrtAddRunConfigEntry=Qt.Va)(o,h,w),l._OrtReleaseRunOptions=o=>(l._OrtReleaseRunOptions=Qt.Wa)(o),l._OrtCreateBinding=o=>(l._OrtCreateBinding=Qt.Xa)(o),l._OrtBindInput=(o,h,w)=>(l._OrtBindInput=Qt.Ya)(o,h,w),l._OrtBindOutput=(o,h,w,v)=>(l._OrtBindOutput=Qt.Za)(o,h,w,v),l._OrtClearBoundOutputs=o=>(l._OrtClearBoundOutputs=Qt._a)(o),l._OrtReleaseBinding=o=>(l._OrtReleaseBinding=Qt.$a)(o),l._OrtRunWithBinding=(o,h,w,v,S)=>(l._OrtRunWithBinding=Qt.ab)(o,h,w,v,S),l._OrtRun=(o,h,w,v,S,ie,qe,it)=>(l._OrtRun=Qt.bb)(o,h,w,v,S,ie,qe,it),l._OrtEndProfiling=o=>(l._OrtEndProfiling=Qt.cb)(o),l._JsepOutput=(o,h,w)=>(l._JsepOutput=Qt.db)(o,h,w),l._JsepGetNodeName=o=>(l._JsepGetNodeName=Qt.eb)(o);var mc,oo=()=>(oo=Qt.fb)(),_c=l._malloc=o=>(_c=l._malloc=Qt.gb)(o),ds=l._free=o=>(ds=l._free=Qt.hb)(o),ap=(o,h,w,v,S,ie)=>(ap=Qt.kb)(o,h,w,v,S,ie),_f=()=>(_f=Qt.lb)(),gf=(o,h,w,v,S)=>(gf=Qt.mb)(o,h,w,v,S),op=o=>(op=Qt.nb)(o),gc=o=>(gc=Qt.ob)(o),wf=()=>(wf=Qt.pb)(),yf=(o,h)=>(yf=Qt.qb)(o,h),wc=o=>(wc=Qt.rb)(o),lp=o=>(lp=Qt.sb)(o),up=()=>(up=Qt.tb)(),bf=l.dynCall_ii=(o,h)=>(bf=l.dynCall_ii=Qt.vb)(o,h),Mf=o=>(Mf=Qt.wb)(o),vf=()=>(vf=Qt.xb)(),xf=o=>(xf=Qt.yb)(o),Tf=()=>(Tf=Qt.zb)();function Cf(){0<Wn||(L?(g(l),L||oc(hn),startWorker(l)):(oc(yi),0<Wn||mc||(mc=!0,l.calledRun=!0,$n||(L||oc(hn),g(l),L||oc(vn)))))}return l.___start_em_js=881730,l.___stop_em_js=881952,l.stackSave=()=>up(),l.stackRestore=o=>wc(o),l.stackAlloc=o=>lp(o),l.UTF8ToString=bn,l.stringToUTF8=io,l.lengthBytesUTF8=Hc,Hs=function o(){mc||Cf(),mc||(Hs=o)},Cf(),x}),tt=Ie,((e=globalThis.self)==null?void 0:e.name)==="em-pthread"&&Ie()}),Qe,ft,gt,kt,_t,Bt,Nt,Dt,qt=U(()=>{var e,t;dr(),Qe=self.location.href??(typeof document<"u"?(e=document.currentScript)==null?void 0:e.src:typeof self<"u"?(t=self.location)==null?void 0:t.href:void 0),ft=typeof location>"u"?void 0:location.origin,gt=(r,n)=>{try{let s=n??Qe;return(s?new URL(r,s):new URL(r)).origin===ft}catch{return!1}},kt=async r=>{let n=await(await fetch(r,{credentials:"same-origin"})).blob();return URL.createObjectURL(n)},_t=(ot(),D(Tr)).default,Bt=async()=>{if(!Qe)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(gt(Qe))return[void 0,_t()];let r=await kt(Qe);return[r,_t(r)]},Nt=(xe(),D(V)).default,Dt=async(r,n,s)=>[void 0,Nt]}),ye,rt,ut,Ht,_r,Nr,Xr,or,Gr=U(()=>{qt(),rt=!1,ut=!1,Ht=!1,_r=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Nr=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Xr=async e=>{if(rt)return Promise.resolve();if(ut)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ht)throw new Error("previous call to 'initializeWebAssembly()' failed.");ut=!0;let t=e.initTimeout,r=e.numThreads;if(!Nr())throw new Error("WebAssembly SIMD is not supported in the current environment.");let n=_r();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let s=e.wasmPaths,a=typeof s=="string"?s:void 0,i=s==null?void 0:s.mjs,u=(i==null?void 0:i.href)??i,d=s==null?void 0:s.wasm,c=(d==null?void 0:d.href)??d,g=e.wasmBinary,[_,l]=await Dt(u,a,r>1),x=!1,T=[];if(t>0&&T.push(new Promise(C=>{setTimeout(()=>{x=!0,C()},t)})),T.push(new Promise((C,L)=>{let G={numThreads:r};g?G.wasmBinary=g:(c||a)&&(G.locateFile=(I,te)=>c??(a??te)+I),l(G).then(I=>{ut=!1,rt=!0,ye=I,C(),_&&URL.revokeObjectURL(_)},I=>{ut=!1,Ht=!0,L(I)})})),await Promise.race(T),x)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},or=()=>{if(rt&&ye)return ye;throw new Error("WebAssembly is not initialized yet.")}}),jr,zn,Vr,cs=U(()=>{Gr(),jr=(e,t)=>{let r=or(),n=r.lengthBytesUTF8(e)+1,s=r._malloc(n);return r.stringToUTF8(e,s,n),t.push(s),s},zn=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([s,a])=>{let i=t?t+s:s;if(typeof a=="object")zn(a,i+".",r,n);else if(typeof a=="string"||typeof a=="number")n(i,a.toString());else if(typeof a=="boolean")n(i,a?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof a}`)})},Vr=e=>{let t=or(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let s=t.HEAP32[n/4],a=t.HEAPU32[n/4+1],i=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(r)}}}),vs,Hn=U(()=>{Gr(),cs(),vs=e=>{let t=or(),r=0,n=[],s=e||{};try{if((e==null?void 0:e.logSeverityLevel)===void 0)s.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if((e==null?void 0:e.logVerbosityLevel)===void 0)s.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);(e==null?void 0:e.terminate)===void 0&&(s.terminate=!1);let a=0;return(e==null?void 0:e.tag)!==void 0&&(a=jr(e.tag,n)),r=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,a),r===0&&Vr("Can't create run options."),(e==null?void 0:e.extra)!==void 0&&zn(e.extra,"",new WeakSet,(i,u)=>{let d=jr(i,n),c=jr(u,n);t._OrtAddRunConfigEntry(r,d,c)!==0&&Vr(`Can't set a run config entry: ${i} - ${u}.`)}),[r,n]}catch(a){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(i=>t._free(i)),a}}}),xs,Ts,Cs,$s,Es,ts=U(()=>{Gr(),cs(),xs=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ts=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Cs=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},$s=(e,t,r)=>{for(let n of t){let s=typeof n=="string"?n:n.name;switch(s){case"webnn":if(s="WEBNN",typeof n!="string"){let i=n==null?void 0:n.deviceType;if(i){let u=jr("deviceType",r),d=jr(i,r);or()._OrtAddSessionConfigEntry(e,u,d)!==0&&Vr(`Can't set a session config entry: 'deviceType' - ${i}.`)}}break;case"webgpu":if(s="JS",typeof n!="string"){let i=n;if(i!=null&&i.preferredLayout){if(i.preferredLayout!=="NCHW"&&i.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${i.preferredLayout}`);let u=jr("preferredLayout",r),d=jr(i.preferredLayout,r);or()._OrtAddSessionConfigEntry(e,u,d)!==0&&Vr(`Can't set a session config entry: 'preferredLayout' - ${i.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${s}`)}let a=jr(s,r);or()._OrtAppendExecutionProvider(e,a)!==0&&Vr(`Can't append execution provider: ${s}.`)}},Es=e=>{let t=or(),r=0,n=[],s=e||{};Cs(s);try{let a=xs(s.graphOptimizationLevel??"all"),i=Ts(s.executionMode??"sequential"),u=typeof s.logId=="string"?jr(s.logId,n):0,d=s.logSeverityLevel??2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);let c=s.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let g=typeof s.optimizedModelFilePath=="string"?jr(s.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(a,!!s.enableCpuMemArena,!!s.enableMemPattern,i,!!s.enableProfiling,0,u,d,c,g),r===0&&Vr("Can't create session options."),s.executionProviders&&$s(r,s.executionProviders,n),s.enableGraphCapture!==void 0){if(typeof s.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);let _=jr("enableGraphCapture",n),l=jr(s.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,_,l)!==0&&Vr(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(let[_,l]of Object.entries(s.freeDimensionOverrides)){if(typeof _!="string")throw new Error(`free dimension override name must be a string: ${_}`);if(typeof l!="number"||!Number.isInteger(l)||l<0)throw new Error(`free dimension override value must be a non-negative integer: ${l}`);let x=jr(_,n);t._OrtAddFreeDimensionOverride(r,x,l)!==0&&Vr(`Can't set a free dimension override: ${_} - ${l}.`)}return s.extra!==void 0&&zn(s.extra,"",new WeakSet,(_,l)=>{let x=jr(_,n),T=jr(l,n);t._OrtAddSessionConfigEntry(r,x,T)!==0&&Vr(`Can't set a session config entry: ${_} - ${l}.`)}),[r,n]}catch(a){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(i=>t._free(i)),a}}}),Kn,kn,Ln,ps,Dn,hs,fs,ms,Yt=U(()=>{Kn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},kn=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Ln=(e,t)=>{let r=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n=typeof t=="number"?t:t.reduce((s,a)=>s*a,1);return r>0?Math.ceil(n*r):void 0},ps=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Dn=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},hs=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",fs=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool",ms=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),rs,ks=U(()=>{dr(),rs=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let s=t.body.getReader(),a;try{a=new ArrayBuffer(n)}catch(u){if(u instanceof RangeError){let d=Math.ceil(n/65536);a=new WebAssembly.Memory({initial:d,maximum:d}).buffer}else throw u}let i=0;for(;;){let{done:u,value:d}=await s.read();if(u)break;let c=d.byteLength;new Uint8Array(a,i,c).set(d),i+=c}return new Uint8Array(a,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),Ss,_s,Ps,As,ns,Is,ae,m=U(()=>{Yt(),Ss=["V","I","W","E","F"],_s=(e,t)=>{console.log(`[${Ss[e]},${new Date().toISOString()}]${t}`)},ns=(e,t)=>{Ps=e,As=t},Is=(e,t)=>{let r=Dn(e),n=Dn(Ps);r>=n&&_s(r,typeof t=="function"?t():t)},ae=(...e)=>{As&&Is(...e)}}),A,Y=U(()=>{Yt(),A=(e,t)=>new(ps(t))(e)}),oe=U(()=>{}),_e,Ue,wt,Ct,xt,Ft,tr,$r,lr,Ur=U(()=>{m(),oe(),_e=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Ue=[],wt=e=>Math.ceil(e/16)*16,Ct=e=>{for(let t=0;t<Ue.length;t++){let r=Ue[t];if(e<=r)return r}return Math.ceil(e/16)*16},xt=1,Ft=()=>xt++,tr=async(e,t,r,n)=>{let s=wt(r),a=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let i=e.getCommandEncoder();e.endComputePass(),i.copyBufferToBuffer(t,0,a,0,s),e.flush(),await a.mapAsync(GPUMapMode.READ);let u=a.getMappedRange();if(n){let d=n();return d.set(new Uint8Array(u,0,r)),d}else return new Uint8Array(u.slice(0,r))}finally{a.destroy()}},$r=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[t]of _e)Ue.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[])}upload(e,t){let r=t.buffer,n=t.byteOffset,s=t.byteLength,a=wt(s),i=this.storageCache.get(e);if(!i)throw new Error("gpu data for uploading does not exist");if(i.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${i.originalSize}, data size=${s}`);let u=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),d=u.getMappedRange();new Uint8Array(d).set(new Uint8Array(r,n,s)),u.unmap();let c=this.backend.getCommandEncoder();this.backend.endComputePass(),c.copyBufferToBuffer(u,0,i.gpuData.buffer,0,a),ae("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`),this.buffersForUploadingPending.push(u)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=wt(r.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(e,t,r){let n;if(r){if(n=r[0],e===r[1])return ae("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else n=Ft();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),ae("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),ae("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=Ct(e),n,s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||a){let u=(s?this.freeBuffers:this.freeUniformBuffers).get(r);u?u.length>0?n=u.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let i={id:Ft(),type:0,buffer:n};return this.storageCache.set(i.id,{gpuData:i,originalSize:e}),ae("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${i.id}`),i}get(e){var t;return(t=this.storageCache.get(e))==null?void 0:t.gpuData}release(e){let t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return ae("verbose",()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("data does not exist");await tr(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){for(let e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=_e.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e))}},lr=(...e)=>new $r(...e)}),tn,ir,Er=U(()=>{tn=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},ir=e=>new tn(e)}),gn,Mn,ke,rn,un,Sn,Rn,Kt=U(()=>{gn=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},Mn=class{static calcShape(e,t,r=!1){let n=e.length,s=t.length;if(n===0)return t;if(s===0)return e;let a=Math.max(e.length,t.length),i=new Array(a);if(r){if(n<2||s<2)return;let u=gn.calcMatMulShape([e[n-2],e[n-1]],[t[s-2],t[s-1]]);if(u===void 0)return;[i[a-2],i[a-1]]=u}for(let u=r?3:1;u<=a;u++){let d=n-u<0?1:e[n-u],c=s-u<0?1:t[s-u];if(d!==c&&d>1&&c>1)return;let g=Math.max(d,c);if(d&&c)i[a-u]=Math.max(d,c);else{if(g>1)return;i[a-u]=0}}return i}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let s=1;s<=r;s++)if(e[r-s]!==1&&e[r-s]!==t[n-s])return!1;return!0}},ke=class yc{static size(t){return yc.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let s=new Array(n),a=n-1;for(;a>=0;){if(t[a]%r===0){s[a]=t[a]/r;break}if(r%t[a]!==0)throw new Error("cannot convert shape");s[a]=1,r/=t[a],a--}for(a--;a>=0;a--)s[a]=t[a];return s}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return yc.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return yc.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let s=1;for(let a=r;a<n;a++){if(t[a]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");s*=t[a]}return s}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let s=r-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((s,a)=>s+r[a]+r[a+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,s)=>n===r[s])}},rn=class _d{static adjustPoolAttributes(t,r,n,s,a,i){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let u=0;u<r.length-2;u++)u>=n.length?n.push(r[u+2]):n[u]=r[u+2];for(let u=0;u<n.length;u++)if(u<s.length){if(s[u]<0)throw new Error("strides should be greater than or equal to 1")}else s.push(1);for(let u=0;u<n.length;u++)if(u<a.length){if(a[u]<0)throw new Error("dilations should be greater than or equal to 1")}else a.push(1);for(let u=0;u<n.length*2;u++)if(u<i.length){if(i[u]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let u=0;u<n.length;u++){if(n[u]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[u]>=n[u]||i[u+n.length]>=n[u])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,s,a,i,u){if(u){if(a.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let d=0;d<t.length-2;d++)_d.adjustPadAndReturnShape(t[d+(i?1:2)],r[d],n[d],s[d],a,d,d+t.length-2,u)}}static computePoolOutputShape(t,r,n,s,a,i,u){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let d=[r[0],r[1]];return _d.computeShapeHelper(t,r,d,n,s,a,i,u),d}static computeConvOutputShape(t,r,n,s,a,i,u){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let d=[t[0],r[0]];return _d.computeShapeHelper(!1,t,d,n,s,a,i,u),d}static computeShapeHelper(t,r,n,s,a,i,u,d){if(t)for(let c=0;c<r.length-2;c++)n.push(1);else for(let c=0;c<r.length-2;c++)n.push(_d.adjustPadAndReturnShape(r[c+2],s[c],a[c],i[c],u,c,c+r.length-2,d))}static adjustPadAndReturnShape(t,r,n,s,a,i,u,d){let c=n*(s-1)+1;if(d&&d!=="NOTSET")switch(d){case"VALID":return a[i]=0,a[u]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+s-t;return a[i]=Math.floor(d==="SAME_LOWER"?(g+1)/2:g/2),a[u]=g-a[i],Math.floor((t+g-s)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+a[i]+a[u]-c)/r+1)}},un=class{static getShapeOfGemmResult(e,t,r,n,s){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let a,i,u;t?(a=e[1],i=e[0]):(a=e[0],i=e[1]);let d=-1;if(n?(u=r[0],d=1):(u=r[1],d=0),r[d]!==i)throw new Error("dimension mismatch");if(a<=0||u<=0||i<=0)throw new Error("invalid shape specified");if(s&&!Mn.isValidBroadcast(s,[a,u]))throw new Error("gemm: invalid bias shape for broadcast");return[a,u,i]}},Sn=-34028234663852886e22,Rn=34028234663852886e22}),fn,Qr,fr,Pr,Mt,gr,ss,Xn,Nn,Ut,Zs,Ye,Wt,Ti,Ci,uo,gs,cr=U(()=>{Yt(),Kt(),fn=64,Qr=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},fr=(e,t=1)=>{let r=Qr(e,t);return typeof r=="string"?r:r[0]},Pr=(e,t=1)=>{let r=Qr(e,t);return typeof r=="string"?r:r[1]},Mt=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:ke.computeStrides(r)})}),t},gr=e=>e%4===0?4:e%2===0?2:1,ss=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Xn=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,Nn=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Ut=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Zs=(e,t,r,n,s)=>{let a=typeof r=="number",i=a?r:r.length,u=[...new Array(i).keys()],d=i<2?"u32":i<=4?`vec${i}<u32>`:`array<u32, ${i}>`,c=Qr(t,s),g=typeof c=="string"?c:c[1],_=typeof c=="string"?c:c[0],l={indices:d,value:g,storage:_,tensor:t},x=We=>typeof We=="string"?We:`${We}u`,T={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},C=a?"uniforms.":"",L=`${C}${e}_shape`,G=`${C}${e}_strides`,I="";for(let We=0;We<i-1;We++)I+=`
    let dim${We} = current / ${Ut(G,We,i)};
    let rest${We} = current % ${Ut(G,We,i)};
    indices[${We}] = dim${We};
    current = rest${We};
    `;I+=`indices[${i-1}] = current;`;let te=i<2?"":`
  fn o2i_${e}(offset: u32) -> ${l.indices} {
    var indices: ${l.indices};
    var current = offset;
    ${I}
    return indices;
  }`,Q=We=>(T.offsetToIndices=!0,i<2?We:`o2i_${e}(${We})`),ne=[];if(i>=2)for(let We=i-1;We>=0;We--)ne.push(`${Ut(G,We,i)} * (indices[${We}])`);let Re=i<2?"":`
  fn i2o_${e}(indices: ${l.indices}) -> u32 {
    return ${ne.join("+")};
  }`,Pe=We=>(T.indicesToOffset=!0,i<2?We:`i2o_${e}(${We})`),st=(...We)=>i===0?"0u":`${l.indices}(${We.map(x).join(",")})`,Ot=(We,vt)=>i<2?`${We}`:`${Ut(We,vt,i)}`,jt=(We,vt,rr)=>i<2?`${We}=${rr};`:`${Ut(We,vt,i)}=${rr};`,ur={},hr=(We,vt)=>{T.broadcastedIndicesToOffset=!0;let rr=`${vt.name}broadcastedIndicesTo${e}Offset`;if(rr in ur)return`${rr}(${We})`;let zr=[];for(let sn=i-1;sn>=0;sn--){let on=vt.indicesGet("outputIndices",sn+vt.rank-i);zr.push(`${Ot(G,sn)} * (${on} % ${Ot(L,sn)})`)}return ur[rr]=`fn ${rr}(outputIndices: ${vt.type.indices}) -> u32 {
             return ${zr.length>0?zr.join("+"):"0u"};
           }`,`${rr}(${We})`},Xt=(We,vt)=>(()=>{if(l.storage===l.value)return`${e}[${We}]=${vt};`;if(l.storage==="vec2<u32>"&&l.value==="i32")return`${e}[${We}]=vec2<u32>(u32(${vt}), select(0u, 0xFFFFFFFFu, ${vt} < 0));`;if(l.storage==="vec2<u32>"&&l.value==="u32")return`${e}[${We}]=vec2<u32>(u32(${vt}), 0u);`;if(l.storage==="u32"&&l.value==="vec4<bool>")return`${e}[${We}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${vt}));`;throw new Error(`not supported combination of storage type ${l.storage} and value type ${l.value} yet`)})(),Or=We=>(()=>{if(l.storage===l.value)return`${e}[${We}]`;if(l.storage==="vec2<u32>"&&l.value==="i32")return`i32(${e}[${We}].x)`;if(l.storage==="vec2<u32>"&&l.value==="u32")return`u32(${e}[${We}].x)`;if(l.storage==="u32"&&l.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${We}] & 0xFFu), bool(${e}[${We}] & 0xFF00u), bool(${e}[${We}] & 0xFF0000u), bool(${e}[${We}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${l.storage} and value type ${l.value} yet`)})(),Wr=i<2?"":`
  fn get_${e}ByIndices(indices: ${l.indices}) -> ${g} {
    return ${Or(`i2o_${e}(indices)`)};
  }`,mr=i<2?"":(()=>{let We=u.map(rr=>`d${rr}: u32`).join(", "),vt=u.map(rr=>`d${rr}`).join(", ");return`
  fn get_${e}(${We}) -> ${g} {
    return get_${e}ByIndices(${st(vt)});
  }`})(),Br=(...We)=>{if(We.length!==i)throw new Error(`indices length must be ${i}`);let vt=We.map(x).join(",");return i===0?Or("0u"):i===1?Or(vt[0]):(T.get=!0,T.getByIndices=!0,T.indicesToOffset=!0,`get_${e}(${vt})`)},Gt=We=>i<2?Or(We):(T.getByIndices=!0,T.indicesToOffset=!0,`get_${e}ByIndices(${We})`),Jt=i<2?"":`
  fn set_${e}ByIndices(indices: ${l.indices}, value: ${g}) {
    ${Xt(`i2o_${e}(indices)`,"value")}
  }`,vr=i<2?"":(()=>{let We=u.map(rr=>`d${rr}: u32`).join(", "),vt=u.map(rr=>`d${rr}`).join(", ");return`
  fn set_${e}(${We}, value: ${g}) {
    set_${e}ByIndices(${st(vt)}, value);
  }`})();return{impl:()=>{let We=[],vt=!1;return T.offsetToIndices&&(We.push(te),vt=!0),T.indicesToOffset&&(We.push(Re),vt=!0),T.broadcastedIndicesToOffset&&(Object.values(ur).forEach(rr=>We.push(rr)),vt=!0),T.set&&(We.push(vr),vt=!0),T.setByIndices&&(We.push(Jt),vt=!0),T.get&&(We.push(mr),vt=!0),T.getByIndices&&(We.push(Wr),vt=!0),!a&&vt&&We.unshift(`const ${L} = ${l.indices}(${r.join(",")});`,`const ${G} = ${l.indices}(${ke.computeStrides(r).join(",")});`),We.join(`
`)},type:l,offsetToIndices:Q,indicesToOffset:Pe,broadcastedIndicesToOffset:hr,indices:st,indicesGet:Ot,indicesSet:jt,set:(...We)=>{if(We.length!==i+1)throw new Error(`indices length must be ${i}`);let vt=We[i];if(typeof vt!="string")throw new Error("value must be string");let rr=We.slice(0,i).map(x).join(",");return i===0?Xt("0u",vt):i===1?Xt(rr[0],vt):(T.set=!0,T.setByIndices=!0,T.indicesToOffset=!0,`set_${e}(${rr}, ${vt})`)},setByOffset:Xt,setByIndices:(We,vt)=>i<2?Xt(We,vt):(T.setByIndices=!0,T.indicesToOffset=!0,`set_${e}ByIndices(${We}, ${vt});`),get:Br,getByOffset:Or,getByIndices:Gt,usage:n,name:e,strides:G,shape:L,rank:i}},Ye=(e,t,r,n=1)=>Zs(e,t,r,"input",n),Wt=(e,t,r,n=1)=>Zs(e,t,r,"output",n),Ti=(e,t,r,n=1)=>Zs(e,t,r,"internal",n),Ci=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=fn){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,i=s?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${a}) {
    ${i}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${s}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},uo=(e,t)=>new Ci(e,t),gs=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;s++){let a=r-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&i===1&&n.unshift(a)}return n}}),co,$i,is,po,wd,xn,yd,ho,jn=U(()=>{Yt(),Kt(),Er(),cr(),co=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},$i=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,is=(e,t)=>ke.sortBasedOnPerm(e,$i(e.length,t)),po=(e,t,r,n)=>{let s=`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`;for(let a=0;a<t;++a)s+=r.indicesSet("a",e[a],`i[${a}]`);return s+="return a;}"},wd=(e,t)=>{let r=[],n=[];for(let s=0;s<e.length;++s)e[s]!==1&&r.push(e[s]),e[t[s]]!==1&&n.push(t[s]);return{newShape:r,newPerm:n}},xn=(e,t)=>{let r=e.dataType,n=e.dims.length,s=$i(n,t),a=is(e.dims,s),{newShape:i,newPerm:u}=wd(e.dims,s),d=ke.areEqual(u,[2,3,1]),c=ke.areEqual(u,[3,1,2]),g=i.length===2&&u[0]>u[1]||d||c,_=g?i:e.dims,l=a;g&&(_=d?[i[0],i[1]*i[2]]:c?[i[0]*i[1],i[2]]:i,l=[_[1],_[0]]);let x=Ye("a",r,_.length),T=Wt("output",r,l.length),C=16,L;return g?L=G=>`
  ${G.registerUniform("output_size","u32").declareVariables(x,T)}
  var<workgroup> tile : array<array<${T.type.value}, ${C+1}>, ${C}>;
  ${G.mainStart([C,C,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${C} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${C}u + local_id.x;
    let input_row = workgroup_id_x * ${C}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${x.getByIndices(`${x.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${C}u + local_id.x;
    let output_row = workgroup_id_y * ${C}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${T.setByIndices(`${T.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`:L=G=>`
  ${G.registerUniform("output_size","u32").declareVariables(x,T)}

  ${po(s,n,x,T)}

  ${G.mainStart()}
    ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${T.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${T.setByOffset("global_idx",x.getByIndices("aIndices"))}
  }`,{name:g?"TransposeShared":"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:()=>{let G=ke.size(a);return{outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:g?{x:Math.ceil(l[1]/C),y:Math.ceil(l[0]/C)}:{x:Math.ceil(G/64)},programUniforms:[{type:12,data:G},...Mt(_,l)]}},getShaderSource:L}},yd=(e,t)=>{co(e.inputs),e.compute(xn(e.inputs[0],t.perm))},ho=e=>ir({perm:e.perm})}),fo,mo,_o,go,wo,Ei,yo,bo,ki,Mo,Pn,Si,vo,xo,Pi,To,Co,Ai,$o,Eo,Ii,bd=U(()=>{Yt(),Kt(),cr(),Vi(),jn(),fo={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},mo={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},_o={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},go={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},wo=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},Ei=(e,t)=>{let r=[],n=e.length;for(let a=0;a<n;a++)t.indexOf(a)===-1&&r.push(e[a]);let s=t.map(a=>e[a]);return[r,s]},yo=(e,t)=>{let r=e.length+t.length,n=[],s=0;for(let a=0;a<r;a++)t.indexOf(a)===-1?n.push(e[s++]):n.push(1);return n},bo=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},ki=(e,t)=>{let r=[];if(!bo(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},Mo=(e,t,r,n,s,a,i)=>{let u=r[0].dims,d=ke.size(a),c=ke.size(i),g=Ye("_A",r[0].dataType,u),_=Wt("output",s,a),l=32,x=`
          var<workgroup> aBestValues : array<f32, ${l}>;
       `;return{name:e,shaderCache:t,getShaderSource:T=>`
        ${T.registerUniform("reduceSize","u32").declareVariables(g,_)}
        ${x}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${T.mainStart(l)}

          let outputIndex = global_idx / ${l};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${_o[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${l}) {
           let candidate = f32(${g.getByOffset("offset + k")});
           bestValue = ${fo[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${l}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${mo[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${_.setByOffset("outputIndex",`${n==="mean"?`${_.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${_.type.storage}(${go[n]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:d},programUniforms:[{type:12,data:c}]})}},Pn=(e,t,r,n)=>{let s=e.inputs.length===1?r:Oi(e.inputs,r),a=s.axes;a.length===0&&!s.noopWithEmptyAxes&&(a=e.inputs[0].dims.map((x,T)=>T));let i=ke.normalizeAxes(a,e.inputs[0].dims.length),u=i,d=e.inputs[0],c=ki(u,e.inputs[0].dims.length);c.length>0&&(d=e.compute(xn(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],u=wo(u.length,d.dims.length));let[g,_]=Ei(d.dims,u),l=g;s.keepDims&&(l=yo(g,i)),e.compute(Mo(t,{hint:s.cacheKey,inputDependencies:["type"]},[d],n,e.inputs[0].dataType,l,_),{inputs:[d]})},Si=(e,t)=>{Pn(e,"ReduceMeanShared",t,"mean")},vo=(e,t)=>{Pn(e,"ReduceL1Shared",t,"l1")},xo=(e,t)=>{Pn(e,"ReduceL2Shared",t,"l2")},Pi=(e,t)=>{Pn(e,"ReduceLogSumExpShared",t,"logSumExp")},To=(e,t)=>{Pn(e,"ReduceMaxShared",t,"max")},Co=(e,t)=>{Pn(e,"ReduceMinShared",t,"min")},Ai=(e,t)=>{Pn(e,"ReduceProdShared",t,"prod")},$o=(e,t)=>{Pn(e,"ReduceSumShared",t,"sum")},Eo=(e,t)=>{Pn(e,"ReduceSumSquareShared",t,"sumSquare")},Ii=(e,t)=>{Pn(e,"ReduceLogSumShared",t,"logSum")}}),An,Fi,Js,Oi,Cn,ko,So,zi,Po,Ao,Di,Io,Fo,Bi,Oo,In,Li,zo,Do,Ri,Bo,Lo,Ni,Ro,No,ji,Vi=U(()=>{Yt(),Kt(),Er(),cr(),bd(),An=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Fi=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Js=(e,t,r,n,s,a,i=!1,u=!1)=>{let d=[],c=r[0].dims,g=c.length,_=ke.normalizeAxes(s,g),l=!u&&_.length===0;c.forEach((C,L)=>{l||_.indexOf(L)>=0?i&&d.push(1):d.push(C)});let x=d.length,T=ke.size(d);return{name:e,shaderCache:t,getShaderSource:C=>{let L=[],G=Ye("_A",r[0].dataType,g),I=Wt("output",a,x),te=n(G,I,_),Q=te[2];for(let ne=0,Re=0;ne<g;ne++)l||_.indexOf(ne)>=0?(i&&Re++,Q=`for(var j${ne}: u32 = 0; j${ne} < ${c[ne]}; j${ne}++) {
                  ${te[2].includes("last_index")?`let last_index = j${ne};`:""}
                  ${G.indicesSet("input_indices",ne,`j${ne}`)}
                  ${Q}
                }`):(L.push(`${G.indicesSet("input_indices",ne,I.indicesGet("output_indices",Re))};`),Re++);return`

        ${C.registerUniform("output_size","u32").declareVariables(G,I)}

        ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${G.type.indices};
          let output_indices = ${I.offsetToIndices("global_idx")};

          ${L.join(`
`)}
          ${te[0]}       // init ops for reduce max/min
          ${te[1]}
          ${Q}
          ${te[3]}
          ${te.length===4?I.setByOffset("global_idx","value"):te.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:d,dataType:a}],dispatchGroup:{x:Math.ceil(T/64)},programUniforms:[{type:12,data:T},...Mt(c,d)]})}},Oi=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),ir({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Cn=(e,t,r,n)=>{let s=e.inputs,a=s.length===1?r:Oi(s,r);e.compute(Js(t,{hint:a.cacheKey,inputDependencies:["rank"]},[s[0]],a.noopWithEmptyAxes&&a.axes.length===0?Fi:n,a.axes,s[0].dataType,a.keepDims,a.noopWithEmptyAxes),{inputs:[0]})},ko=(e,t)=>{An(e.inputs),Cn(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},So=(e,t)=>{An(e.inputs),Cn(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},zi=(e,t)=>{An(e.inputs),Cn(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Po=(e,t)=>{An(e.inputs),Cn(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},Ao=(e,t)=>{An(e.inputs),Cn(e,"ReduceMax",t,(r,n,s)=>{let a=[];for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&a.push(r.indicesSet("input_indices",i,0));return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},Di=(e,t)=>{An(e.inputs),Cn(e,"ReduceMean",t,(r,n,s)=>{let a=1;for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&(a*=e.inputs[0].dims[i]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${a});`]})},Io=(e,t)=>{An(e.inputs),Cn(e,"ReduceMin",t,(r,n,s)=>{let a=[];for(let i=0;i<r.rank;i++)(s.indexOf(i)>=0||s.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},Fo=(e,t)=>{An(e.inputs),Cn(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},Bi=(e,t)=>{An(e.inputs),Cn(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},Oo=(e,t)=>{An(e.inputs),Cn(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},In=(e,t,r)=>{if(t.length===0)return r;let n=1,s=1;for(let a=0;a<t.length;a++)t.indexOf(a)===-1?n*=e[a]:s*=e[a];return s<32&&n>1024},Li=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Di(e,t):Si(e,t)},zo=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?So(e,t):vo(e,t)},Do=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zi(e,t):xo(e,t)},Ri=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Po(e,t):Pi(e,t)},Bo=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ao(e,t):To(e,t)},Lo=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Io(e,t):Co(e,t)},Ni=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fo(e,t):Ai(e,t)},Ro=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bi(e,t):$o(e,t)},No=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Oo(e,t):Eo(e,t)},ji=(e,t)=>{In(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ko(e,t):Ii(e,t)}}),Ui,Wi,jo,Gi,Vo=U(()=>{Yt(),Er(),Vi(),Ui=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Wi=(e,t)=>{Ui(e.inputs);let r=(n,s,a)=>{let i=[];for(let u=0;u<n.rank;u++)(a.indexOf(u)>=0||a.length===0)&&i.push(`input_indices[${u}] = 0;`);return[`${i.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Js("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},jo=(e,t)=>{Ui(e.inputs);let r=(n,s,a)=>{let i=[];for(let u=0;u<n.rank;u++)(a.indexOf(u)>=0||a.length===0)&&i.push(`input_indices[${u}] = 0;`);return[`${i.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",s.setByOffset("global_idx","best_index")]};e.compute(Js("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Gi=e=>ir(e)}),Uo,Wo,qi,Go,Fs,Hi,qo,Ki=U(()=>{Yt(),Kt(),oe(),cr(),Uo=(e,t)=>{let r=e[0],n=e[1],s=e[2],a=e[3],i=e[4],u=e[5];if(i&&u)throw new Error("Attention cannot have both past and attention_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let d=r.dims[0],c=r.dims[1],g=r.dims[2];if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==g)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let _=s.dims[0]/3,l=_,x=l;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let te of t.qkvHiddenSizes)if(te%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");_=t.qkvHiddenSizes[0],l=t.qkvHiddenSizes[1],x=t.qkvHiddenSizes[2]}let T=c;if(_!==l)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==_+l+x)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let C=0;if(i){if(l!==x)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(i.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(i.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(i.dims[1]!==d)throw new Error('Input "past" second dimension must be batch_size');if(i.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(i.dims[4]!==l/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(C=i.dims[3])}let L=T+C,G=-1,I=0;if(a)throw new Error("Mask not supported");if(i)throw new Error("past is not supported");if(u){if(u.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(u.dims[0]!==d||u.dims[1]!==t.numHeads||u.dims[2]!==c||u.dims[3]!==L)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:d,sequenceLength:c,pastSequenceLength:C,kvSequenceLength:T,totalSequenceLength:L,maxSequenceLength:G,inputHiddenSize:g,hiddenSize:_,vHiddenSize:x,headSize:Math.floor(_/t.numHeads),vHeadSize:Math.floor(x/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:I,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Wo=(e,t,r)=>{let n=gr(r),s=64,a=r/n;a<s&&(s=32);let i=Math.ceil(r/n/s),u=[{type:1,data:1/r},{type:12,data:a},{type:12,data:i}],d=fr(e.dataType,n),c=Pr(1,n),g=["type"],_=l=>{let x=Wt("x",e.dataType,e.dims,n),T=Pr(e.dataType),C=[{name:"d_inv",type:"f32"},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${s}>;
  var<workgroup> thread_sum: array<f32, ${s}>;
  ${l.registerUniforms(C).declareVariables(x)}
  ${l.mainStart([s,1,1])}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${s}) * uniforms.d_comp + local_offset;

    var thread_max_vector = ${c}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      thread_max_vector = max(${c}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(n){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${n}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${s}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${c}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
      sum_vector += exp(${c}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(n){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${n}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${s}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        x[offset + i] = ${x.type.value}(${T}(uniforms.d_inv));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {
        var f32input = ${c}(x[offset + i]);
        x[offset + i] = ${x.type.value}(exp(f32input - max_value) / sum);
      }
    }
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${d};${n}`,inputDependencies:g},getShaderSource:_,getRunData:()=>({outputs:[],dispatchGroup:{x:t},programUniforms:u})}},qi=(e,t,r,n,s,a,i,u)=>{let d=u+a.kvSequenceLength,c=[a.batchSize,a.numHeads,a.sequenceLength,d],g=a.kvNumHeads===void 0&&e>1&&n,_=g?[a.batchSize,a.numHeads,d,a.headSize]:void 0,l=i.scale===0?1/Math.sqrt(a.headSize):i.scale,x=gr(a.headSize),T=a.headSize/x,C=12,L={x:Math.ceil(d/C),y:Math.ceil(a.sequenceLength/C),z:a.batchSize*a.numHeads},G=[{type:12,data:a.sequenceLength},{type:12,data:T},{type:12,data:d},{type:12,data:a.numHeads},{type:1,data:l},{type:12,data:u},{type:12,data:a.kvSequenceLength}],I=g&&n&&ke.size(n.dims)>0,te=["type","type"];I&&te.push("type"),s&&te.push("type");let Q=[{dims:c,dataType:t.dataType,gpuDataType:0}];g&&Q.push({dims:_,dataType:t.dataType,gpuDataType:0});let ne=Re=>{let Pe=Ye("q",t.dataType,t.dims,x),st=Ye("key",r.dataType,r.dims,x),Ot=[Pe,st];if(I){let Or=Ye("past_key",n.dataType,n.dims,x);Ot.push(Or)}s&&Ot.push(Ye("attention_bias",s.dataType,s.dims));let jt=Wt("output",t.dataType,c),ur=[jt];g&&ur.push(Wt("present_key",t.dataType,_,x));let hr=Pr(1,x),Xt=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${C}u;

  var<workgroup> tileQ: array<${Pe.type.storage}, ${C*C}>;
  var<workgroup> tileK: array<${Pe.type.storage}, ${C*C}>;
  ${Re.registerUniforms(Xt).declareVariables(...Ot,...ur)}
  ${Re.mainStart([C,C,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    ${I&&g?`
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;
    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`:`
    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`}
    ${g?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}
    var value = ${hr}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${I&&g?`
              if (n + local_id.y < uniforms.past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else {
                tileK[idx] =
                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];
              }`:"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];"}
      ${g?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
        value += ${hr}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(x){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${x}`)}})()};
        output[outputIdx] = ${jt.type.value} (sum * uniforms.alpha) + ${s?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${x};${s!==void 0};${n!==void 0};${e}`,inputDependencies:te},getRunData:()=>({outputs:Q,dispatchGroup:L,programUniforms:G}),getShaderSource:ne}},Go=(e,t,r,n,s,a)=>{let i=a+s.kvSequenceLength,u=s.nReps?s.nReps:1,d=s.vHiddenSize*u,c=s.kvNumHeads==null&&e>1&&n,g=c?[s.batchSize,s.numHeads,i,s.headSize]:void 0,_=[s.batchSize,s.sequenceLength,d],l=12,x={x:Math.ceil(s.vHeadSize/l),y:Math.ceil(s.sequenceLength/l),z:s.batchSize*s.numHeads},T=[{type:12,data:s.sequenceLength},{type:12,data:i},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:d},{type:12,data:a},{type:12,data:s.kvSequenceLength}],C=c&&n&&ke.size(n.dims)>0,L=["type","type"];C&&L.push("type");let G=[{dims:_,dataType:t.dataType,gpuDataType:0}];c&&G.push({dims:g,dataType:t.dataType,gpuDataType:0});let I=te=>{let Q=Ye("probs",t.dataType,t.dims),ne=Ye("v",r.dataType,r.dims),Re=[Q,ne];C&&Re.push(Ye("past_value",n.dataType,n.dims));let Pe=[Wt("output",t.dataType,_)];c&&Pe.push(Wt("present_value",t.dataType,g));let st=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}];return`
  const TILE_SIZE = ${l}u;
  var<workgroup> tileQ: array<${Q.type.value}, ${l*l}>;
  var<workgroup> tileK: array<${Q.type.value}, ${l*l}>;
  ${te.registerUniforms(st).declareVariables(...Re,...Pe)}
  ${te.mainStart([l,l,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   ${C&&c?`
    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;
    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;
      `:`
   let offsetB = headIdx * uniforms.N * uniforms.K + n;
            `}
    ${c?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${Q.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${C&&c?`
        if (w + local_id.y < uniforms.past_sequence_length) {
          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else {
          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];
        }
      `:`
        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];
      `}
        ${c?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e}`,inputDependencies:L},getRunData:()=>({outputs:G,dispatchGroup:x,programUniforms:T}),getShaderSource:I}},Fs=(e,t,r,n,s,a,i,u,d,c,g)=>{let _=Math.min(e.outputCount,1+(i?1:0)+(u?1:0)),l=c.kvNumHeads!==void 0||_>1?c.pastSequenceLength:0,x=l+c.kvSequenceLength,T=d&&ke.size(d.dims)>0?d:void 0,C=[t,r];c.kvNumHeads===void 0&&_>1&&i&&ke.size(i.dims)>0&&C.push(i),T&&C.push(T);let L=e.compute(qi(_,t,r,i,T,c,g,l),{inputs:C,outputs:c.kvNumHeads===void 0&&_>1?[-1,1]:[-1]})[0];e.compute(Wo(L,c.batchSize*c.numHeads*c.sequenceLength,x),{inputs:[L],outputs:[]});let G=[L,n];c.kvNumHeads===void 0&&_>1&&u&&ke.size(u.dims)>0&&G.push(u),e.compute(Go(_,L,n,u,c,l),{inputs:G,outputs:c.kvNumHeads===void 0&&_>1?[0,2]:[0]})},Hi=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,s=t.inputHiddenSize,a=t.headSize,i=12,u={x:Math.ceil(t.headSize/i),y:Math.ceil(t.sequenceLength/i),z:t.batchSize*t.numHeads},d=[e.inputs[0],e.inputs[1],e.inputs[2]],c=[{type:12,data:n},{type:12,data:s},{type:12,data:a},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],g=_=>{let l=Wt("output_q",d[0].dataType,r),x=Wt("output_k",d[0].dataType,r),T=Wt("output_v",d[0].dataType,r),C=Ye("input",d[0].dataType,d[0].dims),L=Ye("weight",d[1].dataType,d[1].dims),G=Ye("bias",d[2].dataType,d[2].dims),I=C.type.storage,te=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${i}u;
  var<workgroup> tileInput: array<${I}, ${i*i}>;
  var<workgroup> tileWeightQ: array<${I}, ${i*i}>;
  var<workgroup> tileWeightK: array<${I}, ${i*i}>;
  var<workgroup> tileWeightV: array<${I}, ${i*i}>;
  ${_.registerUniforms(te).declareVariables(C,L,G,l,x,T)}
  ${_.mainStart([i,i,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${I}(0);
    var valueK = ${I}(0);
    var valueV = ${I}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:c}),getShaderSource:g},{inputs:d,outputs:[-1,-1,-1]})},qo=(e,t)=>{let r=Uo(e.inputs,t),[n,s,a]=Hi(e,r);return Fs(e,n,s,a,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}}),Xi,Ho,Ko,Qi,Md=U(()=>{St(),Yt(),Kt(),Er(),cr(),Xi=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,s,a)=>{let i=s.length;if(i!==n.length)throw new Error(`${a}: num dimensions != ${i}`);s.forEach((u,d)=>{if(u!==n[d])throw new Error(`${a}: dim[${d}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Ho=(e,t)=>{let{epsilon:r,spatial:n,format:s}=t,a=e[0].dims,i=n?gr(a[a.length-1]):1,u=s==="NHWC"&&a.length>1?i:1,d=ke.size(a)/i,c=n,g=c?a.length:a,_=Ye("x",e[0].dataType,e[0].dims,i),l=Ye("scale",e[1].dataType,e[1].dims,u),x=Ye("bias",e[2].dataType,e[2].dims,u),T=Ye("inputMean",e[3].dataType,e[3].dims,u),C=Ye("inputVar",e[4].dataType,e[4].dims,u),L=Wt("y",e[0].dataType,g,i),G=()=>{let te="";if(n)te=`let cOffset = ${a.length===1?"0u":s==="NHWC"?`outputIndices[${a.length-1}] / ${i}`:"outputIndices[1]"};`;else if(s==="NCHW")te=`
            ${L.indicesSet("outputIndices","0","0")}
            let cOffset = ${L.indicesToOffset("outputIndices")};`;else{te=`var cIndices = ${l.type.indices}(0);
                       cIndices[0] = outputIndices[${a.length-1}];`;for(let Q=1;Q<l.rank;Q++)te+=`cIndices[${Q}] = outputIndices[${Q}];`;te+=`let cOffset = ${l.indicesToOffset("cIndices")};`}return te},I=te=>`
  const epsilon = ${r};
  ${te.registerUniform("outputSize","u32").declareVariables(_,l,x,T,C,L)}
  ${te.mainStart()}
  ${te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${L.offsetToIndices(`global_idx * ${i}`)};
    ${G()}
    let scale = ${l.getByOffset("cOffset")};
    let bias = ${x.getByOffset("cOffset")};
    let inputMean = ${T.getByOffset("cOffset")};
    let inputVar = ${C.getByOffset("cOffset")};
    let x = ${_.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${L.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${i}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:I,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:c?[{type:12,data:d},...Mt(a)]:[{type:12,data:d}]})}},Ko=e=>ir(e),Qi=(e,t)=>{let{inputs:r,outputCount:n}=e,s=Ko({...t,outputCount:n});if(E.webgpu.validateInputContent&&Xi(r,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ho(r,s))}}),Xo,Yi,Qo,vd=U(()=>{Kt(),cr(),Xo=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Yi=e=>{let t=e[0].dims,r=e[0].dims[2],n=ke.size(t)/4,s=e[0].dataType,a=Ye("input",s,t,4),i=Ye("bias",s,[r],4),u=Ye("residual",s,t,4),d=Wt("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:c=>`
  const channels = ${r}u / 4;
  ${c.declareVariables(a,i,u,d)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${a.getByOffset("global_idx")}
      + ${i.getByOffset("global_idx % channels")} + ${u.getByOffset("global_idx")};
    ${d.setByOffset("global_idx","value")}
  }`}},Qo=e=>{Xo(e.inputs),e.compute(Yi(e.inputs))}}),Yo,Mr,Zi,Zo,Jo,el,tl,Ji,rl,nl,sl,il,ea,al,ol,ta,Os,ll,zs,ul,dl,ra,cl,pl,na,hl,fl,ei,ml,_l,sa,ia,gl,aa,wl,oa,yl,ti,la,bl,Ml,ua,vl,xl,da,ca=U(()=>{Yt(),Kt(),Er(),cr(),Yo=(e,t,r,n,s,a,i)=>{let u=Math.ceil(t/4),d="";typeof s=="string"?d=`${s}(a)`:d=s("a");let c=Ye("inputData",r,[u],4),g=Wt("outputData",n,[u],4),_=[{name:"vec_size",type:"u32"}];return i&&_.push(...i),`
      ${e.registerUniforms(_).declareVariables(c,g)}

  ${a??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${c.getByOffset("global_idx")};
    ${g.setByOffset("global_idx",d)}
  }`},Mr=(e,t,r,n,s,a=e.dataType,i,u)=>{let d=[{type:12,data:Math.ceil(ke.size(e.dims)/4)}];return i&&d.push(...i),{name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:c=>Yo(c,ke.size(e.dims),e.dataType,a,r,n,u),getRunData:c=>({outputs:[{dims:e.dims,dataType:a}],dispatchGroup:{x:Math.ceil(ke.size(c[0].dims)/64/4)},programUniforms:d})}},Zi=e=>{e.compute(Mr(e.inputs[0],"Abs","abs"))},Zo=e=>{e.compute(Mr(e.inputs[0],"Acos","acos"))},Jo=e=>{e.compute(Mr(e.inputs[0],"Acosh","acosh"))},el=e=>{e.compute(Mr(e.inputs[0],"Asin","asin"))},tl=e=>{e.compute(Mr(e.inputs[0],"Asinh","asinh"))},Ji=e=>{e.compute(Mr(e.inputs[0],"Atan","atan"))},rl=e=>{e.compute(Mr(e.inputs[0],"Atanh","atanh"))},nl=e=>ir(e),sl=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Mr(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},il=e=>{let t,r,n=e.length>=2&&e[1].data!==0,s=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:t=n?e[1].getFloat32Array()[0]:-34028234663852886e22,r=s?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:t=n?e[1].getUint16Array()[0]:64511,r=s?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return ir({min:t,max:r})},ea=(e,t)=>{let r=t||il(e.inputs),n=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"Clip",s=>`clamp(${s}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`,void 0,r.cacheKey,void 0,[{type:e.inputs[0].dataType,data:r.min},{type:e.inputs[0].dataType,data:r.max}],[{name:"min",type:n},{name:"max",type:n}]),{inputs:[0]})},al=e=>{e.compute(Mr(e.inputs[0],"Ceil","ceil"))},ol=e=>{e.compute(Mr(e.inputs[0],"Cos","cos"))},ta=e=>{e.compute(Mr(e.inputs[0],"Cosh","cosh"))},Os=e=>ir(e),ll=(e,t)=>{let r=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},zs=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ul=e=>{let t=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,zs(t)))},dl=e=>{e.compute(Mr(e.inputs[0],"Exp","exp"))},ra=e=>{e.compute(Mr(e.inputs[0],"Floor","floor"))},cl=e=>{let t=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,zs(t)))},pl=(e,t)=>{let r=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},na=e=>{e.compute(Mr(e.inputs[0],"Not",t=>`!${t}`))},hl=e=>{e.compute(Mr(e.inputs[0],"Neg",t=>`-${t}`))},fl=e=>{e.compute(Mr(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ei=e=>{let t=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},ml=e=>{e.compute(Mr(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},_l=e=>ir(e),sa=(e,t)=>{let r=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},ia=e=>{e.compute(Mr(e.inputs[0],"Sin","sin"))},gl=e=>{e.compute(Mr(e.inputs[0],"Sinh","sinh"))},aa=e=>{e.compute(Mr(e.inputs[0],"Sqrt","sqrt"))},wl=e=>{e.compute(Mr(e.inputs[0],"Tan","tan"))},oa=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,yl=e=>{e.compute(Mr(e.inputs[0],"Tanh",oa))},ti=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${oa("v")};
}
`,la=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,bl=e=>{let t=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"FastGelu",la,ti(t),void 0,e.inputs[0].dataType))},Ml=(e,t)=>{let r=Pr(e.inputs[0].dataType);return e.compute(Mr(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ua=e=>{e.compute(Mr(e.inputs[0],"Log","log"))},vl=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,xl=e=>`quick_gelu_impl(${e})`,da=(e,t)=>{let r=Pr(e.inputs[0].dataType);e.compute(Mr(e.inputs[0],"QuickGelu",xl,vl(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),Tl,pa,Cl,xd=U(()=>{Kt(),cr(),ca(),Tl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},pa=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=Ye("input",e[0].dataType,e[0].dims,4),n=Ye("bias",e[0].dataType,[e[0].dims[2]],4),s=Wt("output",e[0].dataType,t,4),a=ke.size(t)/4,i=fr(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:u=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${u.declareVariables(r,n,s)}

  ${zs(i)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${s.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Cl=e=>{Tl(e.inputs),e.compute(pa(e.inputs))}}),ha,$l,Fn,fa,El,kl,ma,Sl,Pl,Al,Il,ri,Fl,Td=U(()=>{Yt(),Kt(),cr(),ha=(e,t,r,n,s,a,i,u,d,c,g,_)=>{let l,x;typeof u=="string"?l=x=(I,te)=>`${u}((${I}),(${te}))`:typeof u=="function"?l=x=u:(l=u.scalar,x=u.vector);let T=Wt("outputData",g,n.length,4),C=Ye("aData",d,t.length,4),L=Ye("bData",c,r.length,4),G;if(s)if(a){let I=ke.size(t)===1,te=ke.size(r)===1,Q=t.length>0&&t[t.length-1]%4===0,ne=r.length>0&&r[r.length-1]%4===0;I||te?G=T.setByOffset("global_idx",x(I?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"),te?`${L.type.value}(${L.getByOffset("0")}.x)`:L.getByOffset("global_idx"))):G=`
            let outputIndices = ${T.offsetToIndices("global_idx * 4u")};
            let offsetA = ${C.broadcastedIndicesToOffset("outputIndices",T)};
            let offsetB = ${L.broadcastedIndicesToOffset("outputIndices",T)};
            ${T.setByOffset("global_idx",x(i||Q?C.getByOffset("offsetA / 4u"):`${C.type.value}(${C.getByOffset("offsetA / 4u")}[offsetA % 4u])`,i||ne?L.getByOffset("offsetB / 4u"):`${L.type.value}(${L.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else G=T.setByOffset("global_idx",x(C.getByOffset("global_idx"),L.getByOffset("global_idx")));else{if(!a)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let I=(te,Q,ne="")=>{let Re=`aData[indexA${Q}][componentA${Q}]`,Pe=`bData[indexB${Q}][componentB${Q}]`;return`
            let outputIndices${Q} = ${T.offsetToIndices(`global_idx * 4u + ${Q}u`)};
            let offsetA${Q} = ${C.broadcastedIndicesToOffset(`outputIndices${Q}`,T)};
            let offsetB${Q} = ${L.broadcastedIndicesToOffset(`outputIndices${Q}`,T)};
            let indexA${Q} = offsetA${Q} / 4u;
            let indexB${Q} = offsetB${Q} / 4u;
            let componentA${Q} = offsetA${Q} % 4u;
            let componentB${Q} = offsetB${Q} % 4u;
            ${te}[${Q}] = ${ne}(${l(Re,Pe)});
          `};g===9?G=`
            var data = vec4<u32>(0);
            ${I("data",0,"u32")}
            ${I("data",1,"u32")}
            ${I("data",2,"u32")}
            ${I("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:G=`
            ${I("outputData[global_idx]",0)}
            ${I("outputData[global_idx]",1)}
            ${I("outputData[global_idx]",2)}
            ${I("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(C,L,T)}

        ${_??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${G}
      }`},$l=(e,t,r,n,s,a,i=r.dataType)=>{let u=!ke.areEqual(r.dims,n.dims),d=r.dims,c=ke.size(r.dims),g=!1,_=!1,l=[u];if(u){let x=Mn.calcShape(r.dims,n.dims,!1);if(!x)throw new Error("Can't perform binary op on the given tensors");d=x,c=ke.size(d);let T=ke.size(r.dims)===1,C=ke.size(n.dims)===1,L=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,G=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;l.push(T),l.push(C),l.push(L),l.push(G);let I=1;for(let te=1;te<d.length;te++){let Q=r.dims[r.dims.length-te]??1,ne=n.dims[n.dims.length-te]??1;if(Q===ne)I*=Q;else break}I%4===0?(_=!0,g=!0):(T||C||L||G)&&(g=!0)}else g=!0;return l.push(g),{name:e,shaderCache:{hint:t+l.map(x=>x.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:x=>ha(x,r.dims,n.dims,d,g,u,_,s,r.dataType,n.dataType,i,a),getRunData:()=>({outputs:[{dims:d,dataType:i}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:Math.ceil(ke.size(d)/4)},...Mt(r.dims,n.dims,d)]})}},Fn=(e,t,r,n,s,a)=>{e.compute($l(t,s??"",e.inputs[0],e.inputs[1],r,n,a))},fa=e=>{Fn(e,"Add",(t,r)=>`${t}+${r}`)},El=e=>{Fn(e,"Div",(t,r)=>`${t}/${r}`)},kl=e=>{Fn(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},ma=e=>{Fn(e,"Mul",(t,r)=>`${t}*${r}`)},Sl=e=>{let t=Ye("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Fn(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Pl=e=>{Fn(e,"Sub",(t,r)=>`${t}-${r}`)},Al=e=>{Fn(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Il=e=>{Fn(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},ri=e=>{Fn(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Fl=e=>{Fn(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),Ol,zl,Dl,_a,Bl,Ll,Rl=U(()=>{Yt(),Kt(),Er(),cr(),Ol=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],s=n.dataType,a=n.dims.length;e.forEach((i,u)=>{if(u!==r){if(i.dataType!==s)throw new Error("input tensors should be one type");if(i.dims.length!==a)throw new Error("input tensors should have the same shape");i.dims.forEach((d,c)=>{if(c!==t&&d!==n.dims[c])throw new Error("non concat dimensions must match")})}})},zl=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Dl=(e,t)=>{let r=e.length,n=[];for(let s=0;s<r;++s){let a=t.setByOffset("global_idx",e[s].getByIndices("indices"));r===1?n.push(a):s===0?n.push(`if (inputIndex == ${s}u) { ${a} }`):s===r-1?n.push(`else { ${a} }`):n.push(`else if (inputIndex == ${s}) { ${a} }`)}return n.join(`
`)},_a=(e,t,r,n)=>{let s=ke.size(r),a=new Array(e.length),i=new Array(e.length),u=0,d=[],c=[],g=[{type:12,data:s}];for(let C=0;C<e.length;++C)u+=e[C].dims[t],a[C]=u,c.push(e[C].dims.length),i[C]=Ye(`input${C}`,n,c[C]),d.push("rank"),g.push({type:12,data:a[C]});for(let C=0;C<e.length;++C)g.push(...Mt(e[C].dims));g.push(...Mt(r));let _=Wt("output",n,r.length),l=_.indicesGet("indices",t),x=Array.from(Array(a.length).keys()).map(C=>`uniforms.sizeInConcatAxis${C}`).join(","),T=C=>`

  ${(()=>{C.registerUniform("outputSize","u32");for(let L=0;L<e.length;L++)C.registerUniform(`sizeInConcatAxis${L}`,"u32");return C.declareVariables(...i,_)})()}

  ${zl(a.length,x)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${_.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${l});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${a.length}u>(${x});
      ${l} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Dl(i,_)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:g}),getShaderSource:T}},Bl=(e,t)=>{let r=e.inputs,n=r[0].dims,s=ke.normalizeAxis(t.axis,n.length);Ol(r,s);let a=n.slice();a[s]=r.reduce((u,d)=>u+(d.dims.length>s?d.dims[s]:0),0);let i=r.filter(u=>ke.size(u.dims)>0);e.compute(_a(i,s,a,r[0].dataType),{inputs:i})},Ll=e=>ir({axis:e.axis})}),Qn,Yn,Zn,ga,Vn=U(()=>{Yt(),Kt(),Qn=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Yn=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Zn=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},ga=e=>{let t=(e==null?void 0:e.activation)||"";if(t==="HardSigmoid"){let[r,n]=(e==null?void 0:e.activation_params)||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=(e==null?void 0:e.activation_params)||[Sn,Rn];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=(e==null?void 0:e.activation_params)||[.01];return{activation:t,alpha:r}}return{activation:t}}}),mn,wa,Ds=U(()=>{mn=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},wa=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),ya,Nl=U(()=>{ya=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),ba,jl,ni,si,Vl,ii,Ul,Ma,ai=U(()=>{Yt(),Kt(),cr(),Vn(),Ds(),ba=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,jl=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,ni=(e,t,r="f32",n,s=!1,a=32,i=!1,u=32)=>{let d=t[1]*e[1],c=t[0]*e[0],g=s?d:a,_=s?a:d,l=g/t[0],x=a/t[1];if(!((s&&l===4&&e[1]===4||!s&&(l===3||l===4))&&g%t[0]===0&&a%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${s} is true, innerElementSize ${l} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${l} must be 3 or 4.
  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${a} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${l}<${r}>, ${g/l}>, ${_}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${a}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${l};
const tileInner = ${a};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${i?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${d};

  let num_tiles = ${i?`${Math.ceil(u/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${i?`i32(globalId.z) * ${u}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${x};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${ba(s,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${x}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${l===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${jl(s,l)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},si=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Vl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ii=(e,t,r="f32",n,s=!1,a=32,i=!1,u=32,d=!1)=>{let c=e[1]*t[1],g=e[0]*t[0],_=s?c:a,l=s?a:c;if(!(l%t[1]===0&&_%t[0]===0&&a%t[1]===0))throw new Error(`tileAHight ${l} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${_} must be divisible by workgroupSize[0]${t[0]}, tileInner ${a} must be divisible by workgroupSize[1]${t[1]}`);let x=l/t[1],T=_/t[0],C=a/t[1],L=d?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${g};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${l}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${_}; inputCol = inputCol + ${t[0]}) {
          ${si(s,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${a}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${x};
let tileColA = i32(localId.x) * ${T};
let tileRowB = i32(localId.y) * ${C};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${x}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${T}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${si(s,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${C}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Vl(s)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${_}>, ${l}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${a}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${a};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${i?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${i?`${Math.ceil(u/a)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${i?`i32(globalId.z) * ${u}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${L}
  }
`},Ul=(e,t,r,n,s,a=!1)=>{let[i,u,d]=s,[c,g,_,l]=n,x=gs(i,d),T=gs(u,d),C=fr(n[0].type.tensor),L=()=>{let I=g.rank,te=c.rank,Q=`var aIndices: ${g.type.indices};`;for(let ne=I-2-1,Re=te-1;ne>=0;ne--,Re--)Q+=`
aIndices[${ne}] = ${te>1?`batchIndices[${Re}]`:"batchIndices"};`;return x.forEach(ne=>{Q+=`
aIndices[${ne}] = 0;`}),Q+=`
aIndices[${I-2}] = u32(row);
                   aIndices[${I-1}] = u32(colIn);`,Q},G=()=>{let I=_.rank,te=c.rank,Q=`var bIndices: ${_.type.indices};`;for(let ne=I-2-1,Re=te-1;ne>=0;ne--,Re--)Q+=`
bIndices[${ne}] = ${te>1?`batchIndices[${Re}]`:"batchIndices"};`;return T.forEach(ne=>{Q+=`
bIndices[${ne}] = 0;`}),Q+=`
bIndices[${I-2}] = u32(row);
                   bIndices[${I-1}] = u32(colIn);`,Q};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${mn(e,C)} {
      var value = ${mn(e,C)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${L()}
        value = ${g.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${mn(e,C)} {
      var value = ${mn(e,C)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${G()}
        value = ${_.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${mn(e,C)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${a?"bias[colIn]":`${mn(e,C)}(bias[row])`};`:""}
        ${r}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},Ma=(e,t,r,n,s=!1,a)=>{let i=e[0].dims,u=e[1].dims,d=i.slice(0,-2),c=u.slice(0,-2),g=n?n.slice(0,-2):r.slice(0,-2),_=ke.size(g),l=i[i.length-2],x=i[i.length-1],T=u[u.length-1],C=x%4===0&&T%4===0,L=l<=8?[4,1,1]:[4,4,1],G=[8,8,1],I=[Math.ceil(T/G[0]/L[0]),Math.ceil(l/G[1]/L[1]),Math.ceil(_/G[2]/L[2])],te=C?4:1,Q=[...d,l,x/te],ne=Q.length,Re=[...c,x,T/te],Pe=Re.length,st=[_,l,T/te],Ot=[{type:6,data:l},{type:6,data:T},{type:6,data:x}];Yn(t,Ot),Ot.push(...Mt(g,Q,Re));let jt=["rank","rank"],ur=e.length>2;ur&&(Ot.push(...Mt(e[2].dims)),jt.push("rank")),Ot.push(...Mt(st));let hr=Xt=>{let Or=g.length,Wr=Ti("batchDims",e[0].dataType,Or,1),mr=fr(e[0].dataType),Br=Ye("a",e[0].dataType,ne,te),Gt=Ye("b",e[1].dataType,Pe,te),Jt=Wt("result",e[0].dataType,st.length,te),vr=[Br,Gt];if(ur){let sn=s?te:1;vr.push(Ye("bias",e[2].dataType,e[2].dims.length,sn))}let We=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Zn(t,We);let vt=fr(Jt.type.tensor),rr=Qn(t,Jt.type.value,vt),zr=Ul(te,ur,rr,[Wr,Br,Gt,Jt],[d,c,g],s);return`
  ${Xt.registerUniforms(We).registerInternalVariables(Wr).declareVariables(...vr,Jt)}
  ${zr}
  ${C?ni(L,G,mr,Wr):ii(L,G,mr,Wr)}
                   `};return{name:"MatMul",shaderCache:{hint:`${L};${t.activation};${C};${s}`,inputDependencies:jt},getRunData:()=>({outputs:[{dims:a?a(r):r,dataType:e[0].dataType}],dispatchGroup:{x:I[0],y:I[1],z:I[2]},programUniforms:Ot}),getShaderSource:hr}}}),Wl,va,Cd=U(()=>{Yt(),m(),cr(),Vn(),Ds(),Nl(),ai(),Wl=(e,t,r,n,s=!1,a,i=4,u=4,d=4,c="f32")=>{let g=Ot=>{switch(Ot){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Ot} is not supported.`)}},_=Ot=>{switch(Ot){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Ot} is not supported.`)}},l=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,x=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,T=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",C=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",L=e?"row":"col",G=e?"col":"row",I=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${L} / outWidth;
    let outCol = ${L} % outWidth;

    let WRow = ${G} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${G} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${G} % inChannels;
    var resData = ${mn(i,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${T} && xCol >= 0 && xCol < ${C}) {
      ${l}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${g(i)}
    }
    return resData;`,te=e?t&&n?`
    let col = colIn * ${i};
    ${I}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${I}
    }
    return ${mn(i,c)}(0.0);`:n&&r?`
    let col = colIn * ${i};
    ${I}`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${I}
    }
    return ${mn(i,c)}(0.0);`,Q=`${_(u)}`,ne=mn(d,c),Re=mn(e?i:u,c),Pe=mn(e?u:i,c),st=Qn(a,ne,c);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${Re} {
      ${e?te:Q}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Pe} {
      ${e?Q:te}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${ne}) {
      let col = colIn * ${d};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${x}
      ${wa(s)}
      ${st}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},va=(e,t,r,n,s,a,i,u,d)=>{let c=t.format==="NHWC",g=c?e[0].dims[3]:e[0].dims[1],_=r[0],l=c?r[2]:r[3],x=c?r[1]:r[2],T=c?r[3]:r[1],C=c&&(g%4===0||g%3===0)&&T%4===0,L=c?T:l*x,G=c?l*x:T,I=[8,8,1],te=n<=8?[4,1,1]:[4,4,1],Q=[Math.ceil(L/I[0]/te[0]),Math.ceil(G/I[1]/te[1]),Math.ceil(_/I[2]/te[2])];ae("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${Q}`);let ne=C?c&&g%4!==0?3:4:1,Re=I[1]*te[1],Pe=I[0]*te[0],st=Math.max(I[0]*ne,I[1]),Ot=n%Re===0,jt=s%Pe===0,ur=a%st===0,hr=C?[ne,4,4]:[1,1,1],Xt=[{type:6,data:n},{type:6,data:s},{type:6,data:a},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Yn(t,Xt),Xt.push(...Mt(e[0].dims,e[1].dims));let Or=["rank","rank"];i&&(Xt.push(...Mt(e[2].dims)),Or.push("rank")),Xt.push(...Mt(r));let Wr=mr=>{let Br=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Zn(t,Br);let Gt=C?4:1,Jt=fr(e[0].dataType),vr=`
      fn setOutputAtIndex(flatIndex : i32, value : ${C?`vec4<${Jt}>`:Jt}) {
        result[flatIndex] = ${C?`vec4<${Jt}>`:Jt}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${C?`vec4<${Jt}>`:Jt}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${C?"/ 4":""}, value);
      }`,We=Ye("x",e[0].dataType,e[0].dims.length,ne===3?1:ne),vt=Ye("w",e[1].dataType,e[1].dims.length,Gt),rr=[We,vt],zr=Wt("result",e[0].dataType,r.length,Gt);if(i){let sn=Ye("bias",e[2].dataType,e[2].dims.length,Gt);rr.push(sn),vr+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${C?`vec4<${Jt}>`:Jt} {
          return bias[coords.${c?"w":"y"}${C?"/ 4":""}];
        }`}return`
        ${ya("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${mr.registerUniforms(Br).declareVariables(...rr,zr)}
        ${vr}
        ${Wl(c,Ot,jt,ur,i,t,hr[0],hr[1],hr[2],Jt)}
        ${C?ni(te,I,Jt,void 0,!c,st):ii(te,I,Jt,void 0,!c,st,!1,void 0,u)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${ne};${C};${Ot};${jt};${ur};${Re};${Pe};${st}`,inputDependencies:Or},getRunData:()=>({outputs:[{dims:d?d(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Q[0],y:Q[1],z:Q[2]},programUniforms:Xt}),getShaderSource:Wr}}}),Gl,oi,Bs,ql,Un,Hl,Kl,Xl,$d=U(()=>{Yt(),m(),Kt(),cr(),Vn(),Ds(),Gl=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},oi=e=>typeof e=="number"?[e,e,e]:e,Bs=(e,t)=>t<=1?e:e+(e-1)*(t-1),ql=(e,t,r,n=1)=>{let s=Bs(t,n);return Math.floor((e[0]*(r-1)-r+s)/2)},Un=(e,t,r,n,s)=>{s==null&&(s=ql(e,t[0],n[0]));let a=[0,0,0,r];for(let i=0;i<3;i++)e[i]+2*s>=t[i]&&(a[i]=Math.trunc((e[i]-t[i]+2*s)/n[i]+1));return a},Hl=(e,t,r,n,s,a,i,u,d,c)=>{let g,_,l,x;if(e==="VALID"&&(e=0),typeof e=="number"){g={top:e,bottom:e,left:e,right:e,front:e,back:e};let T=Un([t,r,n,1],[u,d,c],1,[s,a,i],e);_=T[0],l=T[1],x=T[2]}else if(Array.isArray(e)){if(!e.every((C,L,G)=>C===G[0]))throw Error(`Unsupported padding parameter: ${e}`);g={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let T=Un([t,r,n,1],[u,d,c],1,[s,a,i],e[0]);_=T[0],l=T[1],x=T[2]}else if(e==="SAME_UPPER"){_=Math.ceil(t/s),l=Math.ceil(r/a),x=Math.ceil(n/i);let T=(_-1)*s+u-t,C=(l-1)*a+d-r,L=(x-1)*i+c-n,G=Math.floor(T/2),I=T-G,te=Math.floor(C/2),Q=C-te,ne=Math.floor(L/2),Re=L-ne;g={top:te,bottom:Q,left:ne,right:Re,front:G,back:I}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:g,outDepth:_,outHeight:l,outWidth:x}},Kl=(e,t,r,n,s,a=!1,i="channelsLast")=>{let u,d,c,g,_;if(i==="channelsLast")[u,d,c,g,_]=e;else if(i==="channelsFirst")[u,_,d,c,g]=e;else throw new Error(`Unknown dataFormat ${i}`);let[l,,x,T,C]=t,[L,G,I]=oi(r),[te,Q,ne]=oi(n),Re=Bs(x,te),Pe=Bs(T,Q),st=Bs(C,ne),{padInfo:Ot,outDepth:jt,outHeight:ur,outWidth:hr}=Hl(s,d,c,g,L,G,I,Re,Pe,st),Xt=a?l*_:l,Or=[0,0,0,0,0];return i==="channelsFirst"?Or=[u,Xt,jt,ur,hr]:i==="channelsLast"&&(Or=[u,jt,ur,hr,Xt]),{batchSize:u,dataFormat:i,inDepth:d,inHeight:c,inWidth:g,inChannels:_,outDepth:jt,outHeight:ur,outWidth:hr,outChannels:Xt,padInfo:Ot,strideDepth:L,strideHeight:G,strideWidth:I,filterDepth:x,filterHeight:T,filterWidth:C,effectiveFilterDepth:Re,effectiveFilterHeight:Pe,effectiveFilterWidth:st,dilationDepth:te,dilationHeight:Q,dilationWidth:ne,inShape:e,outShape:Or,filterShape:t}},Xl=(e,t,r,n,s,a)=>{let i=a==="channelsLast";i?e[0].dims[3]:e[0].dims[1];let u=[64,1,1],d={x:r.map((L,G)=>G)},c=[Math.ceil(Gl(d.x.map(L=>r[L]))/u[0]),1,1];ae("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${c}`);let g=1,_=ke.size(r),l=[{type:12,data:_},{type:12,data:n},{type:12,data:s},{type:12,data:t.strides},{type:12,data:t.dilations}];Yn(t,l),l.push(...Mt(e[0].dims,e[1].dims));let x=["rank","rank"],T=e.length===3;T&&(l.push(...Mt(e[2].dims)),x.push("rank")),l.push(...Mt(r));let C=L=>{let G=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:s.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];Zn(t,G);let I=1,te=fr(e[0].dataType),Q=Ye("x",e[0].dataType,e[0].dims.length,g),ne=Ye("W",e[1].dataType,e[1].dims.length,I),Re=[Q,ne],Pe=Wt("result",e[0].dataType,r.length,I),st="";if(T){let ur=Ye("bias",e[2].dataType,e[2].dims.length,I);Re.push(ur),st+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${te} {
          return bias[${i?Ut("coords",4,5):Ut("coords",1,5)}];
        }`}let Ot=mn(g,te),jt=Qn(t,Ot,te);return`
            ${st}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${Q.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${ne.getByIndices("aIndices")};
            }
          ${L.registerUniforms(G).declareVariables(...Re,Pe)}
          ${L.mainStart()}
          ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Pe.offsetToIndices("global_idx")};
              let batch = ${Ut("coords",0,Q.rank)};
              let d2 = ${i?Ut("coords",Q.rank-1,Q.rank):Ut("coords",1,Q.rank)};
              let xFRCCorner = vec3<u32>(${i?Ut("coords",1,Q.rank):Ut("coords",2,Q.rank)},
              ${i?Ut("coords",2,Q.rank):Ut("coords",3,Q.rank)},
              ${i?Ut("coords",3,Q.rank):Ut("coords",4,Q.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${i?Ut("uniforms.x_shape",1,Q.rank):Ut("uniforms.x_shape",2,Q.rank)};
              let xShapeZ = ${i?Ut("uniforms.x_shape",2,Q.rank):Ut("uniforms.x_shape",3,Q.rank)};
              let xShapeW = ${i?Ut("uniforms.x_shape",3,Q.rank):Ut("uniforms.x_shape",4,Q.rank)};
              let xShapeU = ${i?Ut("uniforms.x_shape",4,Q.rank):Ut("uniforms.x_shape",1,Q.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${i?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${i?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${i?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${i?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${T?"value = value + getBiasByOutputCoords(coords)":""};
              ${jt}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${i};${g};${T}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:c[0],y:c[1],z:c[2]},programUniforms:l}),getShaderSource:C}}}),xa,Ql,Ed=U(()=>{Yt(),Kt(),cr(),Vn(),xa=(e,t,r,n)=>{let s=e.length>2,a=s?"value += b[output_channel];":"",i=e[0].dims,u=e[1].dims,d=t.format==="NHWC",c=d?r[3]:r[1],g=c/t.group,_=d&&g>=4?gr(c):1,l=ke.size(r)/_,x=[{type:12,data:l},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:g}];Yn(t,x),x.push(...Mt(i,[u[0],u[1],u[2],u[3]/_]));let T=s?["rank","rank","rank"]:["rank","rank"];x.push(...Mt([r[0],r[1],r[2],r[3]/_]));let C=L=>{let G=Wt("output",e[0].dataType,r.length,_),I=fr(G.type.tensor),te=Qn(t,G.type.value,I),Q=Ye("x",e[0].dataType,i.length),ne=Ye("w",e[1].dataType,u.length,_),Re=[Q,ne];s&&Re.push(Ye("b",e[2].dataType,e[2].dims,_));let Pe=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Zn(t,Pe);let st=d?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${Q.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${ne.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${Q.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${ne.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${L.registerUniforms(Pe).declareVariables(...Re,G)}

  ${L.mainStart()}
    ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${G.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${d?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${d?1:2}], outputIndices[${d?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${_} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${d?2:1}];

    var value: ${G.type.value} = ${G.type.value}(0);
    ${st}
    ${a}
    ${te}
    ${G.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${t.cacheKey}_${_}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:x}),getShaderSource:C}},Ql=(e,t,r,n)=>{let s=e.length>2,a=gr(r[3]),i=gr(r[2]),u=ke.size(r)/a/i,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/a],c=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/a],g=[r[0],r[1],r[2],r[3]/a],_=[{type:12,data:u},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Yn(t,_),_.push(...Mt(d,c,g));let l=(i-1)*t.strides[1]+c[1],x=T=>{let C=Wt("output",e[0].dataType,g.length,a),L=fr(C.type.tensor),G=Qn(t,C.type.value,L),I=Ye("x",e[0].dataType,d.length,a),te=Ye("w",e[1].dataType,c.length,a),Q=[I,te];s&&Q.push(Ye("b",e[2].dataType,e[2].dims,a));let ne=s?"value += b[output_channel];":"",Re=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Zn(t,Re),`
  ${T.registerUniforms(Re).declareVariables(...Q,C)}
  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${i}u;
    let col = (index1 % width1) * ${i}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${I.type.value}, ${l}>;
    var values: array<${C.type.value}, ${i}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${l}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${I.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${I.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {
          let w_val = ${te.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${i}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${i}u; i++) {
      var value = values[i];
      ${ne}
      ${G}
      ${C.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${a};${i};${l};${c[0]};${c[1]}`,inputDependencies:s?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:_}),getShaderSource:x}}}),Ta,Yl,li,Zl=U(()=>{Yt(),Kt(),ai(),cr(),Vn(),Ta=(e,t,r,n,s=!1,a)=>{let i=e[0].dims,u=e[1].dims,d=i[i.length-2],c=u[u.length-1],g=i[i.length-1],_=gr(c),l=gr(g),x=gr(d),T=ke.size(r)/_/x,C=e.length>2,L=n?n.slice(0,-2):r.slice(0,-2),G=[ke.size(L),d,c],I=[{type:12,data:T},{type:12,data:d},{type:12,data:c},{type:12,data:g}];Yn(t,I),I.push(...Mt(L,i,u)),C&&I.push(...Mt(e[2].dims)),I.push(...Mt(G));let te=Q=>{let ne=Ti("batch_dims",e[0].dataType,L.length),Re=Ye("a",e[0].dataType,i.length,l),Pe=Ye("b",e[1].dataType,u.length,_),st=Wt("output",e[0].dataType,G.length,_),Ot=fr(st.type.tensor),jt=Qn(t,st.type.value,Ot),ur=[Re,Pe],hr="";if(C){let vr=s?_:1;ur.push(Ye("bias",e[2].dataType,e[2].dims.length,vr)),hr=`${s?`value += bias[col / ${vr}];`:`value += ${st.type.value}(bias[row + i]);`}`}let Xt=i.slice(0,-2),Or=u.slice(0,-2),Wr=gs(Xt,L),mr=gs(Or,L),Br=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Zn(t,Br);let Gt=(vr,We)=>{let vt=vr.rank,rr=vr.name;if(vt===2)return`var ${rr}_indices = ${vr.type.indices}(0u, 0u);`;let zr=ne.rank,sn=`var ${rr}_indices: ${vr.type.indices};`;for(let on=vt-2-1,qs=zr-1;on>=0;on--,qs--)sn+=`
${rr}_indices[${on}] = ${zr>1?`batch_indices[${qs}]`:"batch_indices"};`;return We.forEach(on=>{sn+=`
${rr}_indices[${on}] = 0;`}),sn+=`${rr}_indices[${vt-2}] = 0u;
                     ${rr}_indices[${vt-1}] = 0u;`,sn},Jt=()=>{let vr=`var a_data: ${Re.type.value};`;for(let We=0;We<l;We++)vr+=`
              let b_data${We} = b[(b_offset + (k + ${We}) * uniforms.N + col) / ${_}];`;for(let We=0;We<x;We++){vr+=`a_data = a[(a_offset + (row + ${We}) * uniforms.K + k) / ${l}];`;for(let vt=0;vt<l;vt++)vr+=`
            values[${We}] = fma(${Pe.type.value}(a_data${l===1?"":`[${vt}]`}), b_data${vt}, values[${We}]);
`}return vr};return`
  ${Q.registerUniforms(Br).registerInternalVariables(ne).declareVariables(...ur,st)}
  ${Q.mainStart()}
    ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${_})) * ${_};
    var index1 = global_idx / (uniforms.N / ${_});
    let stride1 = uniforms.M / ${x};
    let row = (index1 % stride1) * ${x};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${ne.offsetToIndices("batch")};`}
    ${Gt(Re,Wr)}
    let a_offset = ${Re.indicesToOffset("a_indices")};
    ${Gt(Pe,mr)}
    let b_offset = ${Pe.indicesToOffset("b_indices")};
    var values: array<${st.type.value}, ${x}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${l}) {
      ${Jt()}
    }
    for (var i = 0u; i < ${x}u; i++) {
      var value = values[i];
      ${hr}
      ${jt}
      let cur_indices = ${st.type.indices}(batch, row + i, col);
      let offset = ${st.indicesToOffset("cur_indices")};
      ${st.setByOffset(`offset / ${_}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${_};${l};${x};${s}`,inputDependencies:C?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:a?a(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(T/64)},programUniforms:I}),getShaderSource:te}},Yl=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},li=e=>{Yl(e.inputs);let t=Mn.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(Ta(e.inputs,{activation:""},t)):e.compute(Ma(e.inputs,{activation:""},t))}}),Jl,ui,Ls,di,Ca,$a,eu,ci,Ea,kd=U(()=>{Kt(),Cd(),$d(),ai(),Ed(),Vn(),Zl(),jn(),Jl=(e,t,r,n,s,a)=>{let i=e[0],u=e.slice(a?1:2,a?3:4),d=u.length,c=t[0],g=t.slice(2).map((l,x)=>l+(l-1)*(r[x]-1)),_=u.map((l,x)=>l+n[x]+n[x+d]).map((l,x)=>Math.floor((l-g[x]+s[x])/s[x]));return _.splice(0,0,i),_.splice(a?3:1,0,c),_},ui=[2,3,1,0],Ls=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},di=(e,t)=>{let r=e.kernelShape.slice();r.length<t[1].dims.length-2&&r.push(...Array(t[1].dims.length-2-r.length).fill(0));for(let a=2;a<t[1].dims.length;++a)r[a-2]===0&&(r[a-2]=t[1].dims[a]);let n=e.pads.slice();rn.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let s=Object.assign({},e);return Object.assign(s,{kernelShape:r,pads:n}),s},Ca=e=>{let t=ga(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],s=e.dilations,a=e.group,i=e.kernel_shape,u=e.pads,d=e.strides,c=e.w_is_const();return{autoPad:n,format:r,dilations:s,group:a,kernelShape:i,pads:u,strides:d,wIsConst:c,...t,cacheKey:`${e.format};${t.activation};`}},$a=(e,t,r,n)=>{let s=r.format==="NHWC",a=Jl(t[0].dims,t[1].dims,r.dilations,r.pads,r.strides,s);if(r.group!==1){let Re=[t[0]];if(s){let Pe=e.kernelCustomData.wT??e.compute(xn(t[1],ui),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Pe),Re.push(Pe)}else Re.push(t[1]);t.length===3&&Re.push(t[2]),!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1?e.compute(Ql(Re,r,a,n),{inputs:Re}):e.compute(xa(Re,r,a,n),{inputs:Re});return}let i=t.length===3,u=t[0].dims[s?1:2],d=t[0].dims[s?2:3],c=t[0].dims[s?3:1],g=t[1].dims[2],_=t[1].dims[3],l=a[s?1:2],x=a[s?2:3],T=a[s?3:1],C=s&&g===u&&_===d&&r.pads[0]===0&&r.pads[1]===0;if(C||g===1&&_===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let Re=a[0],Pe,st,Ot,jt=[];if(s){let Xt=e.kernelCustomData.wT??e.compute(xn(t[1],ui),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Xt),C){let Or=u*d*c;Pe=t[0].reshape([1,Re,Or]),st=Xt.reshape([1,Or,T]),Ot=[1,Re,T]}else Pe=t[0].reshape([Re,u*d,c]),st=Xt.reshape([1,c,T]),Ot=[Re,l*x,T];jt.push(Pe),jt.push(st)}else Pe=t[0].reshape([Re,c,u*d]),st=t[1].reshape([1,T,c]),Ot=[Re,T,l*x],jt.push(st),jt.push(Pe);i&&jt.push(t[2]);let ur=Ot[2],hr=jt[0].dims[jt[0].dims.length-1];ur<8&&hr<8?e.compute(Ta(jt,r,a,Ot,s,n),{inputs:jt}):e.compute(Ma(jt,r,a,Ot,s,n),{inputs:jt});return}let L=!0,G=e.kernelCustomData.wT??e.compute(xn(t[1],ui),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=G);let I=[t[0],G];i&&I.push(t[2]);let te=s?l*x:T,Q=s?T:l*x,ne=g*_*c;e.compute(va(I,r,a,te,Q,ne,i,L,n),{inputs:I})},eu=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=[0,t.pads[0],0,t.pads[1]],a=[1].concat(t.strides),i=[1].concat(t.dilations),u=[1].concat(t.kernelShape),d=di({...t,pads:s,strides:a,dilations:i,kernelShape:u},n);$a(e,n,d,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]])},ci=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",s=di(r,t),a=r.autoPad==="NOTSET"?r.pads:r.autoPad,i=Kl(t[0].dims,t[1].dims,r.strides,r.dilations,a,!1,n);e.compute(Xl(t,s,i.outShape,[i.filterDepth,i.filterHeight,i.filterWidth],[i.padInfo.front,i.padInfo.top,i.padInfo.left],n))},Ea=(e,t)=>{if(Ls(e.inputs,t),e.inputs[0].dims.length===3)eu(e,t);else if(e.inputs[0].dims.length===5)ci(e,e.inputs,t);else{let r=di(t,e.inputs);$a(e,e.inputs,r)}}}),tu,Sd,Pd=U(()=>{Yt(),m(),cr(),Vn(),Ds(),Nl(),ai(),tu=(e,t=!1,r,n,s=4)=>{let a=L=>{switch(L){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${n}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${L} is not supported.`)}},i=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,u=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,d=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",c=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",g=e?"row":"col",_=e?"col":"row",l=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${_} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${_} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${d}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${_} % inChannels;
      ${i}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,x=e?`
      let col = colIn * ${s};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${l}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${s};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${l}
      }
      return ${n}(0.0);`,T=`
      let col = colIn * ${s};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${a(s)}
      }
      return ${n}(0.0);
      `,C=Qn(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?x:T}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?T:x}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${s};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${u}
      ${wa(t)}
      ${C}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;
    }
  }`},Sd=(e,t,r,n,s,a,i,u)=>{let d=t.format==="NHWC",c=d?e[0].dims[3]:e[0].dims[1],g=r[0],_=d?r[2]:r[3],l=d?r[1]:r[2],x=d?r[3]:r[1],T=d&&c%4===0&&c%3&&x%4===0,C=d?x:_*l,L=d?_*l:x,G=[8,8,1],I=n<=8?[4,1,1]:[4,4,1],te=[Math.ceil(C/G[0]/I[0]),Math.ceil(L/G[1]/I[1]),Math.ceil(g/G[2]/I[2])];ae("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${te}`);let Q=T?4:1,ne=Math.max(G[0]*Q,G[1]),Re=T?4:1,Pe=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],st=[Pe[0]+(t.dilations[0]<=1?0:(Pe[0]-1)*(t.dilations[0]-1)),Pe[1]+(t.dilations[1]<=1?0:(Pe[1]-1)*(t.dilations[1]-1))],Ot=[st[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),st[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],jt=[{type:6,data:n},{type:6,data:s},{type:6,data:a},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:Pe},{type:6,data:Ot}];Yn(t,jt),jt.push(...Mt(e[0].dims,e[1].dims));let ur=["rank","rank"];i&&(jt.push(...Mt(e[2].dims)),ur.push("rank")),jt.push(...Mt(r));let hr=Xt=>{let Or=Ye("x",e[0].dataType,e[0].dims.length,Re),Wr=Ye("w",e[1].dataType,e[1].dims.length,1),mr=Wt("result",e[0].dataType,r.length,Re),Br=[Or,Wr],Gt="";if(i){let We=Ye("bias",e[2].dataType,e[2].dims.length,Re);Br.push(We),Gt+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${We.type.value} {
            return bias[coords.${d?"w":"y"}${T?"/ 4":""}];
          }`}let Jt=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:Pe.length},{name:"pads",type:"i32",length:Ot.length}];Zn(t,Jt);let vr=fr(e[0].dataType,1);if(vr!=="f16"&&vr!=="f32")throw new Error(`elemType ${vr} is not supported.`);return`
        ${ya("uniforms.result_strides")}
        ${Xt.registerUniforms(Jt).declareVariables(...Br,mr)};
        ${Gt}
        ${tu(d,i,t,Or.type.value,Q)}
        ${T?ni(I,G,vr,void 0,!d,ne):ii(I,G,vr,void 0,!d,ne,!1,void 0,u)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${I};${G};${T}`,inputDependencies:ur},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:te[0],y:te[1],z:te[2]},programUniforms:jt}),getShaderSource:hr}}}),ru,ka,Rs=U(()=>{Yt(),m(),Kt(),cr(),ru=(e,t,r,n,s,a=!1,i,u,d=!1)=>{let c=d?1:2,g=d?2:3,_=d?3:1,l=a?2:1,x=`
  fn setOutputAtIndex(flatIndex : u32, value : ${a?`vec4<${i}>`:i}) {
    result[flatIndex] = ${a?`vec4<${i}>`:i}(value);
  }`;n&&(x+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${a?`vec4<${i}>`:i} {
      return bias[coords.${d?"w":"y"}${a?"/ 4":""}];
    }`);let T=a?4:1,C=Ye("W",t[1].dataType,t[1].dims.length,T),L=Ye("Dy",t[0].dataType,t[0].dims.length,T),G=[L,C];n&&G.push(Ye("bias",t[2].dataType,[r[_]].length,T));let I=Wt("result",t[0].dataType,r.length,T),te=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${l};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${i}>, ${l}>;
        for (var i = 0; i < ${l}; i++) {
          dotProd[i] = vec4<${i}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${i}(dyCorner.x) + ${i}(wR)) / ${i}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${i}(dyCorner.y) + ${i}(wC)) / ${i}(uniforms.strides.y);
            let dyC2 = (${i}(dyCorner.y) + 1.0 + ${i}(wC)) / ${i}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${i}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${L.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${L.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${i}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${_}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${L.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${C.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${L.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${i}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${l}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${i}>(0.0)`};
          ${I.set("batch","r","c + i","d1","value")};
        }
      }`,Q=`
          let outputIndices = ${I.offsetToIndices("global_idx")};
          let batch = ${I.indicesGet("outputIndices",0)};
          let d1 = ${I.indicesGet("outputIndices",_)};
          let r = ${I.indicesGet("outputIndices",c)};
          let c = ${I.indicesGet("outputIndices",g)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${i}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${i}(dyRCorner) + ${i}(wR)) / ${i}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${i}(uniforms.Dy_shape[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${i}(dyCCorner) + ${i}(wC)) / ${i}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${i}(uniforms.Dy_shape[${g}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${d?L.get("batch","idyR","idyC","inputChannel"):L.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${C.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${i}(0.0)`};
          ${I.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(u).declareVariables(...G,I)}
  ${x}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${a?te:Q}}`},ka=(e,t,r)=>{let n=e.length>2,s=t.outputShape,a=ke.size(s),i=[Math.ceil(a/64),1,1];ae("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${i}`);let u=t.format==="NHWC",d=["rank","rank"],c=[t.strides[0],t.strides[1]],g=[t.kernelShape[u?1:2],t.kernelShape[u?2:3]],_=[t.dilations[0],t.dilations[1]],l=[g[0]+(t.dilations[0]<=1?0:(t.kernelShape[u?1:2]-1)*(t.dilations[0]-1)),g[1]+(t.dilations[1]<=1?0:(t.kernelShape[u?2:3]-1)*(t.dilations[1]-1))],x=[l[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),l[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],T=!1,C=t.group,L=e[1].dims,G=L[0]/C,I=L[1],te=[{type:12,data:a},{type:12,data:c},{type:12,data:g},{type:12,data:_},{type:12,data:l},{type:6,data:x},{type:12,data:G},{type:12,data:I},...Mt(e[0].dims,e[1].dims)];n&&(te.push(...Mt(e[2].dims)),d.push("rank")),te.push(...Mt(s));let Q=i[1]===1&&i[2]===1,ne=Re=>{let Pe=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:c.length},{name:"filter_dims",type:"u32",length:g.length},{name:"dilations",type:"u32",length:g.length},{name:"effective_filter_dims",type:"u32",length:l.length},{name:"pads",type:"i32",length:x.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],st=fr(e[0].dataType);return`${ru(Re,e,s,n,Q,T,st,Pe,u)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:d},getRunData:()=>({dispatchGroup:{x:i[0],y:i[1],z:i[2]},outputs:[{dims:r?r(s):s,dataType:e[0].dataType}],programUniforms:te}),getShaderSource:ne}}}),nu,su,iu,Sa,au,pi,Ad,ou,lu,uu,Id=U(()=>{Pd(),Rs(),Vn(),jn(),nu=(e,t,r,n,s,a)=>(e-1)*t+r+(n-1)*s+1-a,su=(e,t,r,n,s)=>{let a=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=a,r[s]=e-a):t==="SAME_LOWER"&&(r[n]=e-a,r[s]=a)},iu=(e,t,r,n,s,a,i,u,d,c)=>{let g=e.length-2,_=c.length===0;d.length<g&&d.push(...Array(g-d.length).fill(0));let l=e[0],x=t[u?3:1]*s;for(let T=0,C=e.length-g-(u?1:0);T<g;++T,++C){let L=e[C],G=_?L*i[T]:c[T],I=nu(L,i[T],a[T],t[C],r[T],G);su(I,n,a,T,T+g),_&&c.push(i[T]*(L-1)+d[T]+(t[C]-1)*r[T]+1-a[T]-a[T+g])}c.splice(0,0,l),c.splice(u?3:1,0,x)},Sa=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((_,l)=>_*l,1)===0){r.length=0;for(let _=2;_<t[1].dims.length;++_)r.push(t[1].dims[_])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let s=e.pads.slice(),a=e.outputShape.slice(),i=e.outputPadding.slice(),u=t[0].dims,d=e.dilations.slice();if(d.reduce((_,l)=>_+l,0)===0){let _=t[0].dims.length-2;d=new Array(_).fill(1)}let c=e.strides.slice();if(c.reduce((_,l)=>_+l,0)===0){let _=t[0].dims.length-2;c=new Array(_).fill(1)}iu(u,r,d,e.autoPad,e.group,s,c,n,i,a);let g=Object.assign({},e);return Object.assign(g,{kernelShape:r,pads:s,outputPadding:i,outputShape:a,dilations:d,strides:c}),g},au=e=>{let t=ga(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],s=e.dilations,a=e.group,i=e.kernelShape,u=e.pads,d=e.strides,c=e.wIsConst(),g=e.outputPadding,_=e.outputShape;return{autoPad:n,format:r,dilations:s,group:a,kernelShape:i,outputPadding:g,outputShape:_,pads:u,strides:d,wIsConst:c,...t,cacheKey:`${e.format};${t.activation};`}},pi=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let s=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==s))throw new Error("invalid bias");let a=e[0].dims.length-2;if(t.dilations.reduce((i,u)=>i+u,0)>0&&t.dilations.length!==a)throw new Error(`dilations should be ${a}D`);if(t.strides.reduce((i,u)=>i+u,0)>0&&t.strides.length!==a)throw new Error(`strides should be ${a}D`);if(t.pads.reduce((i,u)=>i+u,0)>0&&t.pads.length!==a*2)throw new Error(`pads should be ${a*2}D`);if(t.outputPadding.length!==a&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${a}D`);if(t.kernelShape.reduce((i,u)=>i+u,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Ad=[2,3,1,0],ou=(e,t,r)=>{let n=Sa(r,t),s=r.format==="NHWC",a=n.outputShape,i=a[s?3:1],u=t[0].dims[s?3:1];if(n.group!==1||i===1&&u===1){e.compute(ka(t,n));return}let d=a[s?1:2],c=a[s?2:3],g=t[1].dims[2],_=t[1].dims[3],l=s?d*c:i,x=s?i:d*c,T=g*_*u,C=!0,L=e.kernelCustomData.wT??e.compute(xn(t[1],Ad),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=L);let G=[t[0],L],I=t.length===3;I&&(!s&&t[2].dims.length===1?G.push(t[2].reshape([t[2].dims[0],1,1])):G.push(t[2])),e.compute(Sd(G,n,a,l,x,T,I,C),{inputs:G})},lu=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let s=t.kernelShape;(s.length===0||s[0]===0)&&(s=[e.inputs[1].dims[2]]);let a=t.dilations;(a.length===0||a[0]===0)&&(a=[1]);let i=t.strides;(i.length===0||i[0]===0)&&(i=[1]);let u=t.pads;u.length===0&&(u=[0,0]),u=[0,u[0],0,u[1]],i=[1].concat(i),a=[1].concat(a),s=[1].concat(s);let d=Sa({...t,pads:u,strides:i,dilations:a,kernelShape:s},n);e.compute(ka(n,d,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},uu=(e,t)=>{pi(e.inputs,t),e.inputs[0].dims.length===3?lu(e,t):ou(e,e.inputs,t)}}),du,Pa,cu,Fd=U(()=>{Yt(),Kt(),Er(),cr(),du=(e,t,r,n)=>{let s=ke.size(t),a=t.length,i=Ye("input",e,a),u=Wt("output",e,a),d=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),c=ke.normalizeAxis(d,a),g=_=>{let l=` i32(${i.indicesGet("inputIndices","uniforms.axis")}) `,x=Ut("uniforms.input_shape","uniforms.axis",a),T=n.reverse?l+(n.exclusive?" + 1":""):"0",C=n.reverse?x:l+(n.exclusive?"":" + 1");return`
                ${_.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(i,u)}
                ${_.mainStart()}
                  ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${u.offsetToIndices("global_idx")};
                  var sum = ${u.type.value}(0);
                  let first : i32 = ${T};
                  let last : i32 = ${C};
                  for (var i : i32 = first; i < last; i++) {
                    ${i.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${i.getByIndices("inputIndices")};
                  }
                  ${u.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:c},...Mt(t,t)]}),getShaderSource:g}},Pa=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,s=e.inputs[1];e.compute(du(n,r,s,t),{inputs:[0]})},cu=e=>{let t=e.exclusive===1,r=e.reverse===1;return ir({exclusive:t,reverse:r})}}),Aa,pu,hu,Ia,fu,Od=U(()=>{Yt(),Kt(),Er(),cr(),Aa=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},pu=(e,t,r,n)=>{let s=[];s.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let a=0;a<t;++a)s.push(r.indicesSet("a",e[a],`i[${a}]`));return s.push("return a;}"),s.join(`
`)},hu=(e,t)=>{let r,n,s,a,i,u,d=t.format==="NHWC",c=t.blocksize,g=t.mode==="DCR";d?([r,n,s,a]=e.dims,i=g?[r,n,s,c,c,a/c**2]:[r,n,s,a/c**2,c,c],u=g?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,s,a]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],i=g?[r,c,c,a/c**2,n,s]:[r,a/c**2,c,c,n,s],u=g?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let _=e.reshape(i),l=_.dims.length,x=e.dataType,T=Ye("a",x,l),C=Wt("output",x,l),L=G=>`
  ${G.registerUniform("output_size","u32").declareVariables(T,C)}

  ${pu(u,l,T,C)}

  ${G.mainStart()}
    ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${C.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${C.setByOffset("global_idx",T.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:G=>{let I=d?[r,n*c,s*c,a/c**2]:[r,a/c**2,n*c,s*c],te=ke.size(I),Q=_.dims,ne=ke.sortBasedOnPerm(Q,u);return{outputs:[{dims:I,dataType:G[0].dataType}],dispatchGroup:{x:Math.ceil(te/64)},programUniforms:[{type:12,data:te},...Mt(Q,ne)]}},getShaderSource:L}},Ia=(e,t)=>{Aa(e.inputs),e.compute(hu(e.inputs[0],t))},fu=e=>ir({blocksize:e.blocksize,mode:e.mode,format:e.format})}),ws,Ns,Fa,mu,_u,Oa,hi,gu,wu,yu,za,zd=U(()=>{Yt(),Kt(),Er(),cr(),ws="[a-zA-Z]|\\.\\.\\.",Ns="("+ws+")+",Fa="^"+Ns+"$",mu="("+Ns+",)*"+Ns,_u="^"+mu+"$",Oa=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},hi=class{constructor(e,t){var s;this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(_u)))throw new Error("Invalid LHS term");if(r.split(",").forEach((a,i)=>{let u=e[i].dims.slice();if(!a.match(RegExp(Fa)))throw new Error("Invalid LHS term");let d=this.processTerm(a,!0,u,i);this.lhs.push(d)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([a,i])=>i.count===1||a==="...").map(([a])=>a).join("");else if(!n.match(RegExp(Ns)))throw new Error("Invalid RHS");(s=n.match(RegExp(ws,"g")))==null||s.forEach(a=>{if(a==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(a);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let s=r.length,a=!1,i=[],u=0;if(!e.match(RegExp(Fa))&&!t&&e!=="")throw new Error("Invalid LHS term");let d=e.match(RegExp(ws,"g")),c=new Oa(n);return d==null||d.forEach((g,_)=>{if(g==="..."){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let l=s-d.length+1;if(l<0)throw new Error("Ellipsis out of bounds");if(i=r.slice(u,u+l),this.hasEllipsis){if(this.ellipsisDims.length!==i.length||this.ellipsisDims.toString()!==i.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=i;else throw new Error("Ellipsis must be specified in the LHS");for(let x=0;x<i.length;x++){let T=String.fromCharCode(48+x);c.addSymbol(T,_+x),this.addSymbol(T,r[u++],n)}}else c.addSymbol(g,_+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,r[u++],n)}),c}},gu=e=>e+"_max",wu=(e,t,r,n)=>{let s=e.map(c=>c.length).map((c,g)=>Ye(`input${g}`,t,c)),a=ke.size(n),i=Wt("output",t,n.length),u=[...r.symbolToInfo.keys()].filter(c=>!r.rhs.symbolToIndices.has(c)),d=c=>{let g=[],_="var prod = 1.0;",l="var sum = 0.0;",x="sum += prod;",T=[],C=[],L=[],G=[],I=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((Q,ne)=>{var Re;if(r.rhs.symbolToIndices.has(ne)){let Pe=(Re=r.rhs.symbolToIndices.get(ne))==null?void 0:Re[0];Pe!==void 0&&r.lhs.forEach((st,Ot)=>{if(Q.inputIndices.includes(Ot)){let jt=st.symbolToIndices.get(ne);if(jt===void 0)throw new Error("Invalid symbol error");jt.forEach(ur=>{g.push(`${s[Ot].indicesSet(`input${Ot}Indices`,ur,i.indicesGet("outputIndices",Pe))}`)})}})}else r.lhs.forEach((Pe,st)=>{if(Q.inputIndices.includes(st)){let Ot=Pe.symbolToIndices.get(ne);if(Ot===void 0)throw new Error("Invalid symbol error");Ot.forEach(jt=>{T.push(`${s[st].indicesSet(`input${st}Indices`,jt,`${ne}`)}`)}),G.push(`prod *= ${s[st].getByIndices(`input${st}Indices`)};`)}}),C.push(`for(var ${ne}: u32 = 0; ${ne} < uniforms.${gu(ne)}; ${ne}++) {`),L.push("}")});let te=I?[...g,`let sum = ${s.map((Q,ne)=>Q.getByIndices(`input${ne}Indices`)).join(" * ")};`]:[...g,l,...C,...T,_,...G,x,...L];return`
            ${c.registerUniforms(u.map(Q=>({name:`${gu(Q)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,i)}

            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${i.offsetToIndices("global_idx")};
            ${s.map((Q,ne)=>`var input${ne}Indices: ${s[ne].type.indices};`).join(`
`)}
            ${te.join(`
`)};
            ${i.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let c=u.filter(_=>r.symbolToInfo.has(_)).map(_=>{var l;return{type:12,data:((l=r.symbolToInfo.get(_))==null?void 0:l.dimValue)||0}});c.push({type:12,data:a});let g=e.map((_,l)=>[...Mt(_)]).reduce((_,l)=>_.concat(l),c);return g.push(...Mt(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:g}},getShaderSource:d}},yu=(e,t)=>{let r=new hi(e.inputs,t.equation),n=r.outputDims,s=e.inputs.map((a,i)=>a.dims);e.compute(wu(s,e.inputs[0].dataType,r,n))},za=e=>{let t=e.equation.replace(/\s+/g,"");return ir({equation:t})}}),bu,fi,Mu,vu,Da,vc=U(()=>{Yt(),Kt(),cr(),bu=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,s=t.length<r.length?0:t.length-r.length;for(;n<r.length&&s<t.length;++n,++s)if(r[n]!==t[s]&&r[n]!==1&&t[s]!==1)throw new Error("Expand requires shape to be broadcastable to input")},fi=(e,t)=>{let r=e.length-t.length,n=[];for(let s=0;s<r;++s)n.push(e[s]);for(let s=0;s<t.length;++s)n.push(t[s]===1?e[s+r]:t[s]);return n},Mu=(e,t)=>e.length>t.length?fi(e,t):fi(t,e),vu=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Mu(t,r),s=e[0].dataType,a=s===9?4:1,i=Math.ceil(ke.size(n)/a),u=c=>{let g=Ye("input",s,t.length,a),_=Wt("output",s,n.length,a),l;if(s===9){let x=(T,C,L="")=>`
          let outputIndices${C} = ${_.offsetToIndices(`outputOffset + ${C}u`)};
          let offset${C} = ${g.broadcastedIndicesToOffset(`outputIndices${C}`,_)};
          let index${C} = offset${C} / 4u;
          let component${C} = offset${C} % 4u;
          ${T}[${C}] = ${L}(${g.getByOffset(`index${C}`)}[component${C}]);
        `;l=`
        let outputOffset = global_idx * ${a};
        var data = vec4<u32>(0);
        ${x("data",0,"u32")}
        ${x("data",1,"u32")}
        ${x("data",2,"u32")}
        ${x("data",3,"u32")}
        ${_.setByOffset("global_idx","data")}
      }`}else l=`
        let outputIndices = ${_.offsetToIndices("global_idx")};
        let inputOffset = ${g.broadcastedIndicesToOffset("outputIndices",_)};
        ${_.setByOffset("global_idx",g.getByOffset("inputOffset"))}
      }`;return`
    ${c.registerUniform("vec_size","u32").declareVariables(g,_)}
    ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${l}`},d=[{type:12,data:i},...Mt(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d})}},Da=e=>{bu(e.inputs),e.compute(vu(e.inputs),{inputs:[0]})}}),Dd,Ba,xu=U(()=>{Yt(),Kt(),cr(),ca(),Dd=e=>{let t=e[0].dataType,r=ke.size(e[0].dims),n=ke.size(e[1].dims),s=n%4===0,a=i=>{let u=Ye("x",t,[1],4),d=Ye("bias",t,[1],4),c=Wt("y",t,[1],4),g=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],_=x=>`
      let bias${x}_offset: u32 = (global_idx * 4 + ${x}) % uniforms.bias_size;
      let bias${x} = ${d.getByOffset(`bias${x}_offset / 4`)}[bias${x}_offset % 4];`,l=s?`
      let bias = ${d.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${_(0)}${_(1)}${_(2)}${_(3)}
      let bias = ${u.type.value}(bias0, bias1, bias2, bias3);`;return`${i.registerUniforms(g).declareVariables(u,d,c)}

    ${ti(Pr(t))}

    ${i.mainStart(fn)}
      ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${u.getByOffset("global_idx")};
      ${l}
      let x_in = x + bias;
      ${c.setByOffset("global_idx",la("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:a,getRunData:i=>({outputs:[{dims:i[0].dims,dataType:i[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/fn/4)}})}},Ba=e=>{e.inputs.length<2||ke.size(e.inputs[1].dims)===0?bl(e):e.compute(Dd(e.inputs))}}),Tu,Cu,La,$u,Bd=U(()=>{Yt(),Kt(),Er(),cr(),Tu=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Cu=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,a=ke.normalizeAxis(t.axis,s),i=r.slice(0);i.splice(a,1,...n);let u=r[a],d=e[0].dataType===9?4:1,c=Math.ceil(ke.size(i)/d),g=[{type:12,data:c},{type:6,data:u},{type:12,data:a},...Mt(e[0].dims,e[1].dims,i)],_=l=>{let x=Ye("data",e[0].dataType,e[0].dims.length,d),T=Ye("inputIndices",e[1].dataType,e[1].dims.length),C=Wt("output",e[0].dataType,i.length,d),L=I=>{let te=n.length,Q=`var indicesIndices${I}  = ${T.type.indices}(0);`;for(let ne=0;ne<te;ne++)Q+=`${te>1?`indicesIndices${I}[${ne}]`:`indicesIndices${I}`} = ${i.length>1?`outputIndices${I}[uniforms.axis + ${ne}]`:`outputIndices${I}`};`;Q+=`
          var idx${I} = ${T.getByIndices(`indicesIndices${I}`)};
          if (idx${I} < 0) {
            idx${I} = idx${I} + uniforms.axisDimLimit;
          }
          var dataIndices${I} : ${x.type.indices};
        `;for(let ne=0,Re=0;ne<s;ne++)ne===a?(Q+=`${s>1?`dataIndices${I}[${ne}]`:`dataIndices${I}`} = u32(idx${I});`,Re+=te):(Q+=`${s>1?`dataIndices${I}[${ne}]`:`dataIndices${I}`} = ${i.length>1?`outputIndices${I}[${Re}]`:`outputIndices${I}`};`,Re++);return Q},G;if(e[0].dataType===9){let I=(te,Q,ne="")=>`
          let outputIndices${Q} = ${C.offsetToIndices(`outputOffset + ${Q}u`)};
          ${L(Q)};
          let offset${Q} = ${x.indicesToOffset(`dataIndices${Q}`)};
          let index${Q} = offset${Q} / 4u;
          let component${Q} = offset${Q} % 4u;
          ${te}[${Q}] = ${ne}(${x.getByOffset(`index${Q}`)}[component${Q}]);
        `;G=`
        let outputOffset = global_idx * ${d};
        var value = vec4<u32>(0);
        ${I("value",0,"u32")}
        ${I("value",1,"u32")}
        ${I("value",2,"u32")}
        ${I("value",3,"u32")}
        ${C.setByOffset("global_idx","value")}
      `}else G=`
      let outputIndices = ${C.offsetToIndices("global_idx")};
      ${L("")};
      let value = ${x.getByIndices("dataIndices")};
      ${C.setByOffset("global_idx","value")};
      `;return`
      ${l.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(x,T,C)}
      ${l.mainStart()}
        ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${G}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:g}),getShaderSource:_}},La=e=>ir({axis:e.axis}),$u=(e,t)=>{let r=e.inputs;Tu(r),e.compute(Cu(e.inputs,t))}}),Ra,Eu,ku,Na,Ld=U(()=>{Yt(),Kt(),Er(),cr(),Ra=(e,t)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let r=ke.normalizeAxis(t.quantizeAxis,e[0].dims.length),n=t.blockSize,s=e[0],a=e[2],i=e.length===4?e[3]:void 0;if(a.dims.length!==s.dims.length||!s.dims.map((u,d)=>d===r?Math.ceil(u/n)===a.dims[d]:u===a.dims[d]).reduce((u,d)=>u&&d,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(i){if(i.dataType!==s.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(i.dims.length!==a.dims.length||!i.dims.map((u,d)=>u===a.dims[d]).reduce((u,d)=>u&&d,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},Eu=(e,t)=>{let r=e[0].dims,n=e[1].dims,s=r.length,a=ke.normalizeAxis(t.gatherAxis,s),i=ke.normalizeAxis(t.quantizeAxis,s),u=r.slice(0);u.splice(a,1,...n);let d=ke.size(u),c=e[2].dataType,g=e[0].dataType===22,_=[{type:12,data:d},{type:12,data:i},{type:12,data:a},{type:12,data:t.blockSize},...Mt(...e.map((x,T)=>x.dims),u)],l=x=>{let T=Ye("data",e[0].dataType,e[0].dims.length),C=Ye("inputIndices",e[1].dataType,e[1].dims.length),L=Ye("scales",e[2].dataType,e[2].dims.length),G=e.length>3?Ye("zeroPoint",e[3].dataType,e[3].dims.length):void 0,I=Wt("output",c,u.length),te=[T,C,L];G&&te.push(G);let Q=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${x.registerUniforms(Q).declareVariables(...te,I)}
        ${x.mainStart()}
        let output_indices = ${I.offsetToIndices("global_idx")};
        var indices_indices = ${C.type.indices}(0);
        ${n.length>1?`
          for (var i: u32 = 0; i < ${n.length}; i++) {
            let index = ${I.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${C.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${I.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${T.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${I.indicesGet("output_indices","i")};
          ${T.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${C.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${r[a]};
        }
        ${T.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${u.length}; i++) {
          let index = ${I.indicesGet("output_indices",`i + ${n.length} - 1`)};
          ${T.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${T.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${T.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${g?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${L.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${L.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${L.getByIndices("scale_indices")};
        ${G?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${G.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${G.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${g?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${Pr(c)}(quantized_data - zero_point) * scale;
        ${I.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${t.cacheKey};${e.filter((x,T)=>T!==1).map(x=>x.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(x,T)=>"rank")},getRunData:()=>({outputs:[{dims:u,dataType:c}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:_}),getShaderSource:l}},ku=(e,t)=>{let r=e.inputs;Ra(r,t),e.compute(Eu(e.inputs,t))},Na=e=>ir({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),Su,Pu,Au,Ar,xc=U(()=>{Yt(),Kt(),Er(),cr(),Su=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Pu=(e,t)=>{let r=e[0].dims,n=e[0].dataType,s=r.length,a=e[1].dims,i=e[1].dataType,u=ke.normalizeAxis(t.axis,s),d=r[u],c=a.slice(0),g=ke.size(c),_=Ye("input",n,s),l=Ye("indicesInput",i,a.length),x=Wt("output",n,c.length),T=[{type:12,data:g},{type:6,data:d},{type:12,data:u}];return T.push(...Mt(r,a,c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:T}),getShaderSource:C=>`
      ${C.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,l,x)}
      ${C.mainStart()}
      ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${x.offsetToIndices("global_idx")};

      var idx = ${l.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${_.type.indices}(outputIndices);
      ${_.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${_.getByIndices("inputIndices")};

      ${x.setByOffset("global_idx","value")};
  }`}},Au=e=>ir({axis:e.axis}),Ar=(e,t)=>{let r=e.inputs;Su(r),e.compute(Pu(e.inputs,t))}}),Rd,Nd,ja,Iu,jd=U(()=>{Yt(),Kt(),cr(),Rd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Nd=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[s,a,i]=un.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),u=[s,a];if(!u)throw new Error("Can't use gemm on the given tensors");let d=ke.size(u),c=[{type:12,data:d},{type:12,data:s},{type:12,data:a},{type:12,data:i},{type:1,data:t.alpha},{type:1,data:t.beta}],g=["type","type"];e.length===3&&(c.push(...Mt(e[2].dims)),g.push("rank")),c.push(...Mt(u));let _=l=>{let x="";t.transA&&t.transB?x="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?x="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?x="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(x="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let T=t.alpha===1?"":"value *= uniforms.alpha;",C=Ye("a",e[0].dataType,e[0].dims),L=Ye("b",e[1].dataType,e[1].dims),G=C.type.value,I=null,te=[C,L];e.length===3&&(I=Ye("c",e[2].dataType,e[2].dims.length),te.push(I));let Q=Wt("output",e[0].dataType,u.length);te.push(Q);let ne=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${l.registerUniforms(ne).declareVariables(...te)}

  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${G}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${x}
    }

    ${T}
    ${I!=null?`let cOffset = ${I.broadcastedIndicesToOffset("vec2(m, n)",Q)}; value += ${G}(uniforms.beta) * ${I.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:c}),getShaderSource:_}},ja=e=>{let t=e.transA,r=e.transB,n=e.alpha,s=e.beta;return{transA:t,transB:r,alpha:n,beta:s,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Iu=(e,t)=>{Rd(e.inputs),e.compute(Nd(e.inputs,t))}}),wn,Fu,Va,mi,Ou,js,Ua,Vd=U(()=>{Yt(),Kt(),Er(),oe(),Ki(),cr(),jn(),wn=(e,t)=>e.length>t&&e[t].dims.length>0?e[t]:void 0,Fu=(e,t)=>{let r=e[0],n=wn(e,1),s=wn(e,2),a=wn(e,3),i=wn(e,4),u=wn(e,5),d=wn(e,6),c=wn(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let g=r.dims[0],_=r.dims[1],l=r.dims.length===3?r.dims[2]:t.numHeads*r.dims[4],x=_,T=0,C=0,L=Math.floor(l/t.numHeads);if(d&&c&&ke.size(d.dims)&&ke.size(c.dims)){if(d.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(d.dims[0]!==g||d.dims[1]!==t.numHeads||d.dims[3]!==L)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(c.dims[0]!==g||c.dims[1]!==t.numHeads||c.dims[3]!==L)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(d.dims[2]!==c.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');T=d.dims[2],C=d.dims[2]}else if(d&&ke.size(d.dims)||c&&ke.size(c.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let G;if(n&&ke.size(n.dims)>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');G=2,x=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==L)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');G=5,x=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==L)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');G=0,x=n.dims[2]}}else{if(r.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(r.dims[2]!==t.numHeads||r.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');G=3}if(a&&ke.size(a.dims)>0){if(a.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&n.dims.length===5&&n.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let I=T+x,te=0;if(i&&ke.size(i.dims)>0){te=8;let Pe=i.dims;throw Pe.length===1?Pe[0]===g?te=1:Pe[0]===3*g+2&&(te=3):Pe.length===2&&Pe[0]===g&&Pe[1]===I&&(te=5),te===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let Q=!1,ne=l;if(s&&ke.size(s.dims)>0){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(x!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');ne=s.dims[2]}else{if(x!==s.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');ne=s.dims[1]*s.dims[3],Q=!0}}let Re=!1;if(i&&ke.size(i.dims)>0)throw new Error("Key padding mask is not supported");if(u&&ke.size(u.dims)>0){if(u.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(u.dims[0]!==g||u.dims[1]!==t.numHeads||u.dims[2]!==_||u.dims[3]!==I)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:g,sequenceLength:_,pastSequenceLength:T,kvSequenceLength:x,totalSequenceLength:I,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:l,vHiddenSize:ne,headSize:L,vHeadSize:Math.floor(ne/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:te,scale:t.scale,broadcastResPosBias:Re,passPastInKv:Q,qkvFormat:G}},Va=e=>ir({...e}),mi=ir({perm:[0,2,1,3]}),Ou=(e,t,r,n,s,a,i)=>{let u=[n,s,a],d=ke.size(u),c=[{type:12,data:d},{type:12,data:i},{type:12,data:a}],g=_=>{let l=Wt("qkv_with_bias",t.dataType,u),x=Ye("qkv",t.dataType,u),T=Ye("bias",r.dataType,u),C=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${_.registerUniforms(C).declareVariables(x,T,l)}
  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:c}),getShaderSource:g},{inputs:[t,r],outputs:[-1]})[0]},js=(e,t,r,n,s,a,i,u)=>{let d=a;if(i&&ke.size(i.dims)>0){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return d=Ou(e,a,i,t,n,r*s,u),d=d.reshape([t,n,r,s]),r===1||n===1?d:e.compute(xn(d,mi.perm),{inputs:[d],outputs:[-1]})[0]}else return a.dims.length===3&&(d=a.reshape([t,n,r,s])),r===1||n===1?d:e.compute(xn(d,mi.perm),{inputs:[d],outputs:[-1]})[0]},Ua=(e,t)=>{let r=Fu(e.inputs,t),n=e.inputs[0],s=wn(e.inputs,1),a=wn(e.inputs,2),i=wn(e.inputs,3),u=wn(e.inputs,4),d=wn(e.inputs,5),c=wn(e.inputs,6),g=wn(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if((s==null?void 0:s.dims.length)===5)throw new Error("Packed KV is not implemented");let _=s&&a&&s.dims.length===4&&a.dims.length===4,l=js(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,i,0);if(_)return Fs(e,l,s,a,u,void 0,c,g,d,r,t);if(!s||!a)throw new Error("key and value must be provided");let x=js(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,s,i,r.hiddenSize),T=js(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,a,i,2*r.hiddenSize);Fs(e,l,x,T,u,void 0,c,g,d,r,t)}}),zu,Du,Bu,Wa,Lu,Ru=U(()=>{Yt(),Kt(),cr(),zu=e=>Array.from(e.getBigInt64Array(),Number),Du=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(zu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Bu=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Wa=(e,t)=>{let r=e[0].dims,n=t??zu(e[1]),s=Bu(r,n),a=ke.size(s),i=e[0].dataType,u=Ye("input",i,r.length),d=Wt("output",i,s.length),c=g=>`
      const inputShape = ${u.indices(...r)};
      ${g.registerUniform("output_size","u32").declareVariables(u,d)}
      ${g.mainStart()}
      ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:12,data:a},...Mt(e[0].dims,s)]}),getShaderSource:c}},Lu=e=>{Du(e.inputs),e.compute(Wa(e.inputs),{inputs:[0]})}}),Nu,Ga,ju,Vu,qa,Uu,Ud=U(()=>{Yt(),Kt(),Er(),Ki(),cr(),Vd(),Ru(),jn(),Nu=(e,t)=>{let r=e[0],n=e[1],s=e[2],a=e[3],i=e[4];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let u=!1,d=r.dims[0],c=r.dims[1],g=r.dims.length===3?u?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],_=c,l=0,x=0,T=Math.floor(g/t.numHeads),C=a&&a.dims.length!==0,L=i&&i.dims.length!==0,G=!0;if(C&&L){if(a.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(i.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');l=a.dims[1],x=a.dims[1]}else if(C||L)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let I;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');I=2,_=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==T)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');I=5,_=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==T)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');I=0,_=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');I=3}let te=0,Q=!1,ne=g;if(s){if(s.dims.length!==3&&s.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(s.dims.length===3){if(_!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');ne=s.dims[2]}else{if(_!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');ne=s.dims[1]*s.dims[3],Q=!0}}let Re=l+_;return{batchSize:d,sequenceLength:c,pastSequenceLength:l,kvSequenceLength:_,totalSequenceLength:Re,maxSequenceLength:x,inputHiddenSize:0,hiddenSize:g,vHiddenSize:ne,headSize:T,vHeadSize:Math.floor(ne/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:te,scale:t.scale,broadcastResPosBias:!1,passPastInKv:Q,qkvFormat:I,isPastkvBSNH:G}},Ga=(e,t,r,n)=>{let s=[n.batchSize,n.totalSequenceLength,n.kvNumHeads,n.headSize],a=4,i=ke.size(s)/a,u=n.totalSequenceLength,d=Wt("present_kv",r,s.length,a),c=Ye("new_kv",e.dataType,e.dims.length,a),g=t?Ye("past_kv",t.dataType,t.dims.length,a):void 0,_=Math.ceil(n.headSize/a),l={x:u,y:e.dims[0],z:1},x=t?["rank","rank"]:["rank"],T=[{type:12,data:i},{type:12,data:n.pastSequenceLength},{type:12,data:n.kvSequenceLength},{type:12,data:n.totalSequenceLength}],C=[c];g?(T.push(...Mt(e.dims),...Mt(t.dims),...Mt(s)),C.push(g)):T.push(...Mt(e.dims),...Mt(s));let L=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],G=`      let past_batch_stride = uniforms.past_seqlen * num_heads * H;
        var past_head_stride = uniforms.past_seqlen * H;
        if (is_bsnh) {
          past_head_stride = H;
        }
        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;
        present_kv[out_offset] = past_kv[in_offset];`,I=`      let new_batch_stride = uniforms.new_seqlen * num_heads * H;
        let new_row_stride = num_heads * H;
        let new_head_stride = H;
        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;
        present_kv[out_offset] = new_kv[in_offset];`,te=t?`if (s < past_seqlen) {
        ${G}
        } else if (s < past_seqlen + uniforms.new_seqlen) {
        ${I}
        }`:`if (s < past_seqlen + uniforms.new_seqlen) {
          ${I}
        }`,Q=ne=>`

  ${ne.registerUniforms(L).declareVariables(...C,d)}
  ${ne.mainStart([_,n.kvNumHeads,1])}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    var indices = ${d.offsetToIndices("global_idx")};
    let h = local_id.x;
    let n = local_id.y;
    let s = workgroup_id.x;
    let b = workgroup_id.y;
    let num_heads = ${n.kvNumHeads}u;
    let H = ${_}u;

    let present_seqlen = uniforms.present_seqlen;
    let present_batch_stride = present_seqlen * num_heads * H;
    var row_stride = H;
    let is_bsnh = ${n.isPastkvBSNH};

    if (is_bsnh) {
      row_stride = num_heads * H;
    }
    var present_head_stride = present_seqlen * H;
    if (is_bsnh) {
      present_head_stride = H;
    }

    let past_seqlen = uniforms.past_seqlen;

    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;
    ${te}
  }`;return{name:"ConcatPastNew",shaderCache:{hint:`${n.kvNumHeads}${_}${!!t}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:s,dataType:r}],dispatchGroup:l,programUniforms:T}),getShaderSource:Q}},ju=e=>ir({...e}),Vu=ir({perm:[0,2,1,3]}),qa=(e,t,r,n,s)=>{let a=t,i=n.kvNumHeads,u=n.nReps;return t.dims.length===3&&n.kvSequenceLength!==0&&(a=t.reshape([n.batchSize,n.kvSequenceLength,i,n.headSize])),r?a=e.compute(Ga(a,r,a.dataType,n),{inputs:[a,r],outputs:[n.isPastkvBSNH?s:-1]})[0]:a=e.compute(Ga(a,void 0,a.dataType,n),{inputs:[a],outputs:[n.isPastkvBSNH?s:-1]})[0],u!==1&&(a=e.compute(Wa([a],[1,1,1,u]),{inputs:[a],outputs:[-1]})[0],a=a.reshape([n.batchSize,n.totalSequenceLength,i*u,n.headSize])),e.compute(xn(a,Vu.perm),{inputs:[a],outputs:[-1]})[0]},Uu=(e,t)=>{var d;let r=Nu(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(((d=e.inputs[1])==null?void 0:d.dims.length)===5)throw new Error("Packed KV is not implemented");let n=js(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,a=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,i=qa(e,e.inputs[1],s,r,1),u=qa(e,e.inputs[2],a,r,2);Fs(e,n,i,u,void 0,void 0,void 0,void 0,void 0,r,t)}}),Ha,Wu,Gu,qu,Wd=U(()=>{Yt(),Kt(),jn(),cr(),Ha=(e,t,r,n,s,a,i,u)=>{let d=gr(a),c=d===1?"f32":`vec${d}f`,g=d===1?"vec2f":`mat2x${d}f`,_=s*i,l=[s,i,a/d],x=[s,i,2],T=["rank","type","type"],C=[];C.push(...Mt(l,x));let L=G=>{let I=Ye("x",t.dataType,3,d),te=Ye("scale",r.dataType,r.dims),Q=Ye("bias",n.dataType,n.dims),ne=Wt("output",1,3,2),Re=[I,te,Q,ne],Pe=64;return`
  var<workgroup> workgroup_shared : array<${g}, ${Pe}>;
  const workgroup_size = ${Pe}u;
  ${G.declareVariables(...Re)}
  ${G.mainStart(Pe)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${c}(0);
    var squared_sum = ${c}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${c}(${I.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${g}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Nn("workgroup_shared[0][0]",d)} / f32(hight * ${d});
      let squared_sum_final = ${Nn("workgroup_shared[0][1]",d)} / f32(hight * ${d});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${u}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${d};${u}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:x,dataType:1}],dispatchGroup:{x:_},programUniforms:C}),getShaderSource:L},{inputs:[t,r,n],outputs:[-1]})[0]},Wu=(e,t,r)=>{let n=t[0].dims,s=n,a=2,i=n[0],u=n[1],d=ke.sizeFromDimension(n,a),c=gr(d),g=ke.size(s)/c,_=Ha(e,t[0],t[1],t[2],i,d,u,r.epsilon),l=[i,u,d/c],x=[i,u],T=["type","none"],C=L=>{let G=Ye("x",t[0].dataType,l.length,c),I=Ye("scale_shift",1,x.length,2),te=Wt("output",t[0].dataType,l.length,c),Q=[G,I,te];return`
  ${L.registerUniform("output_size","u32").declareVariables(...Q)}
  ${L.mainStart()}
  ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${te.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${I.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${G.getByOffset("global_idx")} * ${te.type.value}(scale_shift.x) + ${te.type.value}(scale_shift.y);
      ${te.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${c}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:12,data:g},...Mt(l,x,l)]}),getShaderSource:C},{inputs:[t[0],_]})},Gu=(e,t,r)=>{let n=t[0].dims,s=n,a=n[0],i=n[n.length-1],u=ke.sizeFromDimension(n,1)/i,d=gr(i),c=ke.size(s)/d,g=[{type:12,data:u},{type:12,data:Math.floor(i/d)}],_=["type","type"],l=[0,n.length-1];for(let L=0;L<n.length-2;L++)l.push(L+1);let x=e.compute(xn(e.inputs[0],l),{inputs:[e.inputs[0]],outputs:[-1]})[0],T=Ha(e,x,t[1],t[2],a,u,i,r.epsilon),C=L=>{let G=fr(t[0].dataType),I=d===1?"vec2f":`mat${d}x2f`,te=Re=>{let Pe=Re===0?"x":"y",st=d===1?"f32":`vec${d}f`;switch(d){case 1:return`${G}(${st}(scale.${Pe}))`;case 2:return`vec2<${G}>(${st}(scale[0].${Pe}, scale[1].${Pe}))`;case 4:return`vec4<${G}>(${st}(scale[0].${Pe}, scale[1].${Pe}, scale[2].${Pe}, scale[3].${Pe}))`;default:throw new Error(`Not supported compoents ${d}`)}},Q=Ye("input",t[0].dataType,t[0].dims,d),ne=Wt("output",t[0].dataType,s,d);return`
  @group(0) @binding(0) var<storage, read> input : array<${Q.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${I}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ne.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${L.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${te(0)}, ${te(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${d}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:g}),getShaderSource:C},{inputs:[t[0],T]})},qu=(e,t)=>{t.format==="NHWC"?Gu(e,e.inputs,t):Wu(e,e.inputs,t)}}),Gd,Ka,Hu,qd=U(()=>{Yt(),Kt(),cr(),Gd=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Ka=(e,t,r)=>{let n=t.simplified,s=e[0].dims,a=e[1],i=!n&&e[2],u=s,d=ke.normalizeAxis(t.axis,s.length),c=ke.sizeToDimension(s,d),g=ke.sizeFromDimension(s,d),_=ke.size(a.dims),l=i?ke.size(i.dims):0;if(_!==g||i&&l!==g)throw new Error(`Size of X.shape()[axis:] == ${g}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${_} and bias size of ${l}`);let x=[];for(let ne=0;ne<s.length;++ne)ne<d?x.push(s[ne]):x.push(1);let T=gr(g),C=["type","type"],L=[{type:12,data:c},{type:1,data:g},{type:12,data:Math.floor(g/T)},{type:1,data:t.epsilon}];i&&C.push("type");let G=r>1,I=r>2,te=ne=>{let Re=fr(e[0].dataType),Pe=[Ye("x",e[0].dataType,e[0].dims,T),Ye("scale",a.dataType,a.dims,T)];i&&Pe.push(Ye("bias",i.dataType,i.dims,T)),Pe.push(Wt("output",e[0].dataType,u,T)),G&&Pe.push(Wt("mean_data_output",1,x)),I&&Pe.push(Wt("inv_std_output",1,x));let st=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${ne.registerUniforms(st).declareVariables(...Pe)}
  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${ss("f32",T)};
    var mean_square_vector = ${ss("f32",T)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Xn(Re,T,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Nn("mean_vector",T)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Nn("mean_square_vector",T)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Xn(Re,T,"x[j + offset]")};
      let f32scale = ${Xn(Re,T,"scale[j]")};
      output[j + offset] = ${Pe[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${i?`+ ${Xn(Re,T,"bias[j]")}`:""}
      );
    }

    ${G?"mean_data_output[global_idx] = mean":""};
    ${I?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},Q=[{dims:u,dataType:e[0].dataType}];return G&&Q.push({dims:x,dataType:1}),I&&Q.push({dims:x,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${T};${r};${n}`,inputDependencies:C},getRunData:()=>({outputs:Q,dispatchGroup:{x:Math.ceil(c/64)},programUniforms:L}),getShaderSource:te}},Hu=(e,t)=>{Gd(e.inputs),e.compute(Ka(e.inputs,t,e.outputCount))}}),Ku,Xu,Qu,Yu,Zu,Hd=U(()=>{Yt(),Kt(),Er(),cr(),Ku=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let s=Math.floor((t.k+t.blockSize-1)/t.blockSize),a=t.blockSize/8*t.bits,i=e[1];if(!ke.areEqual(i.dims,[t.n,s,a]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let u=e[2].dims;if(ke.size(u)!==t.n*s)throw new Error("scales input size error.");if(e.length===4){let d=e[3].dims,c=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(ke.size(d)!==c)throw new Error("zeroPoints input size error.")}},Xu=(e,t)=>{let r=e[0].dims,n=r.length,s=r[n-2],a=t.k,i=t.n,u=r.slice(0,n-2),d=ke.size(u),c=e[1].dims[2]/4,g=e[0].dataType,_=gr(t.k),l=gr(c),x=gr(i),T=u.concat([s,i]),C=s>1&&i/x%2===0?2:1,L=ke.size(T)/x/C,G=64,I=[],te=[d,s,a/_],Q=ke.convertShape(e[1].dims).slice();Q.splice(-1,1,c/l),I.push(...Mt(te)),I.push(...Mt(Q)),I.push(...Mt(e[2].dims)),e.length===4&&I.push(...Mt(ke.convertShape(e[3].dims)));let ne=[d,s,i/x];I.push(...Mt(ne));let Re=Pe=>{let st=te.length,Ot=Ye("a",e[0].dataType,st,_),jt=Ye("b",12,Q.length,l),ur=Ye("scales",e[2].dataType,e[2].dims.length),hr=[Ot,jt,ur],Xt=e.length===4?Ye("zero_points",12,e[3].dims.length):void 0;Xt&&hr.push(Xt);let Or=ne.length,Wr=Wt("output",e[0].dataType,Or,x),mr=fr(e[0].dataType),Br=(()=>{switch(_){case 1:return`array<${mr}, 8>`;case 2:return`mat4x2<${mr}>`;case 4:return`mat2x4<${mr}>`;default:throw new Error(`${_}-component is not supported.`)}})(),Gt=()=>{let We=`
          // reuse a data
            var input_offset = ${Ot.indicesToOffset(`${Ot.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Br};
            for (var j: u32 = 0; j < ${8/_}; j++) {
              a_data[j] = ${Ot.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let vt=0;vt<x*C;vt++)We+=`
            b_value = ${l===1?`b${vt}_data`:`b${vt}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Br}(${Array.from({length:4},(rr,zr)=>`${mr}(b_value_lower[${zr}]), ${mr}(b_value_upper[${zr}])`).join(", ")});
            b_dequantized_values = ${_===1?`${Br}(${Array.from({length:8},(rr,zr)=>`(b_quantized_values[${zr}] - ${Xt?`zero_point${vt}`:"zero_point"}) * scale${vt}`).join(", ")});`:`(b_quantized_values - ${Br}(${Array(8).fill(`${Xt?`zero_point${vt}`:"zero_point"}`).join(",")})) * scale${vt};`};
            workgroup_shared[local_id.x * ${C} + ${Math.floor(vt/x)}]${x>1?`[${vt%x}]`:""} += ${Array.from({length:8/_},(rr,zr)=>`${_===1?`a_data[${zr}] * b_dequantized_values[${zr}]`:`dot(a_data[${zr}], b_dequantized_values[${zr}])`}`).join(" + ")};
          `;return We},Jt=()=>{let We=`
            var col_index = col * ${x};
            ${Xt?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${mr}(8);`}
            `;for(let vt=0;vt<x*C;vt++)We+=`
            let scale${vt} = ${ur.getByOffset("col_index * nBlocksPerCol + block")};
            ${Xt?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${Xt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${vt} = ${mr}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return We},vr=()=>{let We=`col_index = col * ${x};`;for(let vt=0;vt<x*C;vt++)We+=`
            let b${vt}_data = ${jt.getByIndices(`${jt.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return We+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Br};
            var b_dequantized_values: ${Br};`,We};return`
        var<workgroup> workgroup_shared: array<${Wr.type.value}, ${C*G}>;
        ${Pe.declareVariables(...hr,Wr)}
        ${Pe.mainStart([G,1,1])}
          let output_indices = ${Wr.offsetToIndices(`(global_idx / ${G}) * ${C}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${G}) {
            //process one block
            var word_offset: u32 = block * ${t.blockSize/_};
            ${Jt()}
            for (var word: u32 = 0; word < ${c}; word += ${l}) {
              ${vr()}
              for (var i: u32 = 0; i < ${l}; i++) {
                ${Gt()}
                word_offset += ${8/_};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${C}) {
            var output_value: ${Wr.type.value} = ${Wr.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${G}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${C};
            }
            ${Wr.setByIndices(`${Wr.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.blockSize};${t.bits};${_};${l};${x};${C};${G}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:T,dataType:g}],dispatchGroup:{x:L},programUniforms:I}),getShaderSource:Re}},Qu=(e,t)=>{let r=e[0].dims,n=r.length,s=r[n-2],a=t.k,i=t.n,u=r.slice(0,n-2),d=ke.size(u),c=e[1].dims[2]/4,g=e[0].dataType,_=gr(t.k),l=gr(c),x=u.concat([s,i]),T=128,C=i%8===0?8:i%4===0?4:1,L=T/C,G=L*l*8,I=G/_,te=G/t.blockSize,Q=ke.size(x)/C,ne=[],Re=[d,s,a/_],Pe=ke.convertShape(e[1].dims).slice();Pe.splice(-1,1,c/l),ne.push(...Mt(Re)),ne.push(...Mt(Pe)),ne.push(...Mt(e[2].dims)),e.length===4&&ne.push(...Mt(ke.convertShape(e[3].dims)));let st=[d,s,i];ne.push(...Mt(st));let Ot=jt=>{let ur=Re.length,hr=Ye("a",e[0].dataType,ur,_),Xt=Ye("b",12,Pe.length,l),Or=Ye("scales",e[2].dataType,e[2].dims.length),Wr=[hr,Xt,Or],mr=e.length===4?Ye("zero_points",12,e[3].dims.length):void 0;mr&&Wr.push(mr);let Br=st.length,Gt=Wt("output",e[0].dataType,Br),Jt=fr(e[0].dataType),vr=()=>{switch(_){case 1:return`
          let a_data0 = vec4<${Jt}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${Jt}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${Jt}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${Jt}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${_}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${hr.type.value}, ${I}>;
        var<workgroup> inter_results: array<array<${Gt.type.value}, ${L}>, ${C}>;
        ${jt.declareVariables(...Wr,Gt)}
        ${jt.mainStart([L,C,1])}
          let output_indices = ${Gt.offsetToIndices(`workgroup_index * ${C}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${te} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${I};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${I}; a_offset += ${T})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${hr.getByIndices(`${hr.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${hr.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${te} + local_id.x;
            ${mr?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${mr.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${Jt}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Jt}(8);`}
            let scale = ${Or.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${Xt.getByIndices(`${Xt.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${t.blockSize/_};
            for (var i: u32 = 0; i < ${l}; i++) {
              ${vr()}
              let b_value = ${l===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${Jt}>(${Array.from({length:4},(We,vt)=>`${Jt}(b_value_lower[${vt}]), ${Jt}(b_value_upper[${vt}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${Jt}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(We,vt)=>`${`dot(a_data${vt}, b_dequantized_values[${vt}])`}`).join(" + ")};
              word_offset += ${8/_};
            }
            workgroupBarrier();
          }

          if (local_idx < ${C}) {
            var output_value: ${Gt.type.value} = ${Gt.type.value}(0);
            for (var b = 0u; b < ${L}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Gt.setByIndices(`${Gt.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${t.blockSize};${_};${l};${L};${C}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:x,dataType:g}],dispatchGroup:{x:Q},programUniforms:ne}),getShaderSource:Ot}},Yu=(e,t)=>{Ku(e.inputs,t),t.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(Qu(e.inputs,t)):e.compute(Xu(e.inputs,t))},Zu=e=>ir(e)}),Ju,ed,td,rd,nd,sd,id,ad,od,Kd=U(()=>{Yt(),Kt(),cr(),Ju=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},ed=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
            k = i32(${e.indicesGet("indices",s)}) - ${Ut("uniforms.pads",s,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${Ut("uniforms.x_shape",s,t)})) {
              break;
            }
            offset += k * i32(${Ut("uniforms.x_strides",s,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},td=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ut("uniforms.pads",s,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${Ut("uniforms.x_shape",s,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${Ut("uniforms.x_shape",s,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${Ut("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},rd=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ut("uniforms.pads",s,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${Ut("uniforms.x_shape",s,t)})) {
                  k = i32(${Ut("uniforms.x_shape",s,t)}) - 1;
                }
                offset += k * i32(${Ut("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},nd=(e,t,r)=>{let n="";for(let s=t-1;s>=0;--s)n+=`
                k = i32(${e.indicesGet("indices",s)}) - ${Ut("uniforms.pads",s,r)};
                if (k < 0)  {
                  k += i32(${Ut("uniforms.x_shape",s,t)}]);
                }
                if (k >= i32(${Ut("uniforms.x_shape",s,t)})) {
                  k -= i32(${Ut("uniforms.x_shape",s,t)});
                }
                offset += k * i32(${Ut("uniforms.x_strides",s,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},sd=(e,t,r)=>{switch(r.mode){case 0:return ed(e,t,r.pads.length);case 1:return td(e,t,r.pads.length);case 2:return rd(e,t,r.pads.length);case 3:return nd(e,t,r.pads.length);default:throw new Error("Invalid mode")}},id=(e,t)=>{let r=ke.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,s=ke.size(r),a=[{type:12,data:s},{type:6,data:t.pads}],i=e.length>=3&&e[2].data;t.mode===0&&a.push({type:i?e[2].dataType:1,data:t.value}),a.push(...Mt(e[0].dims,r));let u=["rank"],d=c=>{let g=Wt("output",e[0].dataType,r.length),_=Ye("x",e[0].dataType,n.length),l=_.type.value,x=sd(g,n.length,t),T=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&T.push({name:"constant_value",type:i?l:"f32"}),`
            ${c.registerUniforms(T).declareVariables(_,g)}
            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${g.offsetToIndices("global_idx")};

            var value = ${l}(0);
            ${x}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}${i}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(ke.size(r)/64)},programUniforms:a}),getShaderSource:d}},ad=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,s=e[0].dims.length,a=new Int32Array(2*s).fill(0);if(e.length>=4){let u=e[3].getBigInt64Array();for(let d=0;d<u.length;d++)a[Number(u[d])]=Number(r[d]),a[Number(u[d])+s]=Number(r[d+u.length])}else r.forEach((u,d)=>a[Number(d)]=Number(u));let i=[];return a.forEach(u=>i.push(u)),{mode:t.mode,value:n,pads:i}}else return t},od=(e,t)=>{Ju(e.inputs);let r=ad(e.inputs,t);e.compute(id(e.inputs,r),{inputs:[0]})}}),Vs,Xa,Qa,Ya,Za,ld,ud,Ja,eo,Xd,pr,to,an,dn,cn,as,Qd,dd,cd,f=U(()=>{St(),Yt(),Kt(),cr(),Vs=e=>{if(E.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Xa=(e,t,r)=>{let n=t.format==="NHWC",s=e.dims.slice();n&&s.splice(1,0,s.pop());let a=Object.hasOwnProperty.call(t,"dilations"),i=t.kernelShape.slice(),u=t.strides.slice(),d=a?t.dilations.slice():[],c=t.pads.slice();rn.adjustPoolAttributes(r,s,i,u,d,c);let g=rn.computePoolOutputShape(r,s,u,d,i,c,t.autoPad),_=Object.assign({},t);a?Object.assign(_,{kernelShape:i,strides:u,pads:c,dilations:d,cacheKey:t.cacheKey}):Object.assign(_,{kernelShape:i,strides:u,pads:c,cacheKey:t.cacheKey});let l=g.slice();return l.push(l.splice(1,1)[0]),[_,n?l:g]},Qa=(e,t)=>{let r=t.format==="NHWC",n=ke.size(e),s=ke.size(t.kernelShape),a=[{type:12,data:n},{type:12,data:s}],i=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let u=t.kernelShape[t.kernelShape.length-1],d=t.strides[t.strides.length-1],c=t.pads[t.pads.length/2-1],g=t.pads[t.pads.length-1],_=!!(c+g);a.push({type:12,data:u},{type:12,data:d},{type:12,data:c},{type:12,data:g}),i.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let l=!1;if(t.kernelShape.length===2){let x=t.kernelShape[t.kernelShape.length-2],T=t.strides[t.strides.length-2],C=t.pads[t.pads.length/2-2],L=t.pads[t.pads.length-2];l=!!(C+L),a.push({type:12,data:x},{type:12,data:T},{type:12,data:C},{type:12,data:L}),i.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[a,i,!0,_,l]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let u=ke.computeStrides(t.kernelShape);a.push({type:12,data:u},{type:12,data:t.pads},{type:12,data:t.strides}),i.push({name:"kernelStrides",type:"u32",length:u.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let d=t.pads.reduce((c,g)=>c+g);return[a,i,!!d,!1,!1]}},Ya=(e,t,r,n,s,a,i,u,d,c,g,_)=>{let l=s.format==="NHWC",x=t.type.value,T=Wt("output",t.type.tensor,n);if(s.kernelShape.length<=2){let C="",L="",G="",I=r-(l?2:1);if(g?C=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${I}] = indices[${I}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${I}] < 0 || xIndices[${I}]
                      >= uniforms.x_shape[${I}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${a}
                }`:C=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${I}] = indices[${I}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${a}
                }`,s.kernelShape.length===2){let te=r-(l?3:2);_?L=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${te}] = indices[${te}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${te}] < 0 || xIndices[${te}] >= uniforms.x_shape[${te}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:L=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${te}] = indices[${te}] * uniforms.sh - uniforms.phStart + j;
                `,G=`
              }
            `}return`
            ${e.registerUniforms(d).declareVariables(t,T)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${T.offsetToIndices("global_idx")};
              var xIndices = ${T.offsetToIndices("global_idx")};

              var value = ${x}(${u});
              var pad = 0;
              ${L}
              ${C}
              ${G}
              ${i}

              output[global_idx] = value;
            }`}else{if(l)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let C=s.kernelShape.length,L=s.pads.length,G="";return c?G=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${a}
              }`:G=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${a}
            `,`
            ${e.registerUniforms(d).declareVariables(t,T)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${T.offsetToIndices("global_idx")};
              var xIndices = ${T.offsetToIndices("global_idx")};

              var offsets: array<u32, ${C}>;

              var value = ${x}(${u});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${C-1}u; j++) {
                  offsets[j] = offset / ${Ut("uniforms.kernelStrides","j",C)};
                  offset -= offsets[j] * ${Ut("uniforms.kernelStrides","j",C)};
                }
                offsets[${C-1}] = offset;

                isPad = false;
                for (var j = ${r-C}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${Ut("uniforms.strides",`j - ${r-C}u`,C)}
                    + offsets[j - ${r-C}u] - ${Ut("uniforms.pads","j - 2u",L)};
                  ${G}
              }
              ${i}

              output[global_idx] = value;
            }`}},Za=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,ld=e=>`${Za(e)};${e.countIncludePad}`,ud=e=>`${Za(e)};${e.storageOrder};${e.dilations}`,Ja=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),eo=(e,t,r,n)=>{let[s,a]=Xa(t,n,r),i=Ye("x",t.dataType,t.dims.length),u=i.type.value,d="value += x_val;",c="";s.countIncludePad?c+=`value /= ${u}(uniforms.kernelSize);`:c+=`value /= ${u}(i32(uniforms.kernelSize) - pad);`;let[g,_,l,x,T]=Qa(a,s);g.push(...Mt(t.dims,a));let C=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${l};${x};${T}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(ke.size(a)/64)},programUniforms:g}),getShaderSource:L=>Ya(L,i,t.dims.length,a.length,s,d,c,0,_,l,x,T)}},Xd=e=>{let t=e.count_include_pad!==0,r=Ja(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:ld(n)}},pr=(e,t)=>{Vs(e.inputs),e.compute(eo("AveragePool",e.inputs[0],!1,t))},to={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},an=e=>{let t=e.format;return{format:t,...to,cacheKey:t}},dn=(e,t)=>{Vs(e.inputs),e.compute(eo("GlobalAveragePool",e.inputs[0],!0,t))},cn=(e,t,r,n)=>{let[s,a]=Xa(t,n,r),i=`
      value = max(x_val, value);
    `,u="",d=Ye("x",t.dataType,t.dims.length),c=["rank"],[g,_,l,x,T]=Qa(a,s);return g.push(...Mt(t.dims,a)),{name:e,shaderCache:{hint:`${n.cacheKey};${l};${x};${T}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(ke.size(a)/64)},programUniforms:g}),getShaderSource:C=>Ya(C,d,t.dims.length,a.length,s,i,u,t.dataType===10?-65504:-1e5,_,l,x,T)}},as=(e,t)=>{Vs(e.inputs),e.compute(cn("MaxPool",e.inputs[0],!1,t))},Qd=e=>{let t=e.storage_order,r=e.dilations,n=Ja(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let s={storageOrder:t,dilations:r,...n,cacheKey:""};return{...s,cacheKey:ud(s)}},dd=e=>{let t=e.format;return{format:t,...to,cacheKey:t}},cd=(e,t)=>{Vs(e.inputs),e.compute(cn("GlobalMaxPool",e.inputs[0],!0,t))}}),b,B,ve,Le,ze=U(()=>{Yt(),Kt(),Er(),cr(),b=(e,t)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((r,n)=>r===e[2].dims[n]).reduce((r,n)=>r&&n,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(t.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((s,a)=>a===t.axis||s===e[0].dims[a]).reduce((s,a)=>s&&a,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let r=e[0].dims[t.axis],n=e[1].dims[t.axis];if(t.blockSize<Math.ceil(r/n)||t.blockSize>Math.ceil(r/(n-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},B=(e,t)=>{let r=ke.normalizeAxis(t.axis,e[0].dims.length),n=e[0].dataType,s=n===3,a=e[0].dims,i=e[1].dataType,u=ke.size(a),d=n===3||n===2,c=d?[Math.ceil(ke.size(e[0].dims)/4)]:e[0].dims,g=e[1].dims,_=e.length>2?e[2]:void 0,l=_?d?[Math.ceil(ke.size(_.dims)/4)]:_.dims:void 0,x=g.length===0||g.length===1&&g[0]===1,T=x===!1&&g.length===1,C=gr(u),L=x&&(!d||C===4),G=L?C:1,I=L&&!d?C:1,te=Ye("input",d?12:n,c.length,I),Q=Ye("scale",i,g.length),ne=_?Ye("zero_point",d?12:n,l.length):void 0,Re=Wt("output",i,a.length,G),Pe=[te,Q];ne&&Pe.push(ne);let st=[c,g];_&&st.push(l);let Ot=[{type:12,data:u/G},{type:12,data:r},{type:12,data:t.blockSize},...Mt(...st,a)],jt=ur=>{let hr=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${ur.registerUniforms(hr).declareVariables(...Pe,Re)}
      ${ur.mainStart()}
          ${ur.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${Re.offsetToIndices("global_idx")};

          // Set input x
          ${d?`
            let input = ${te.getByOffset("global_idx / 4")};
            let x_vec = ${s?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${G===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${te.getByOffset("global_idx")};`};

          // Set scale input
          ${x?`let scale_value= ${Q.getByOffset("0")}`:T?`
            let scale_index = ${Re.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${Q.getByOffset("scale_index")};`:`
            var scale_indices: ${Q.type.indices} = output_indices;
            let index = ${Q.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${Q.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${Q.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${ne?x?d?`
                let zero_point_input = ${ne.getByOffset("0")};
                let zero_point_vec =  ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${ne.getByOffset("0")}`:T?d?`
                let zero_point_index = ${Re.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${ne.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${Re.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${ne.getByOffset("zero_point_index")};`:d?`
                let zero_point_offset = ${Q.indicesToOffset("scale_indices")};
                let zero_point_input = ${ne.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${s?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${ne.getByIndices("scale_indices")};`:`let zero_point_value = ${d?s?"i32":"u32":te.type.value}(0);`};
      // Compute and write output
      ${Re.setByOffset("global_idx",`${Re.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:t.cacheKey,inputDependencies:ne?["rank","rank","rank"]:["rank","rank"]},getShaderSource:jt,getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(u/G/64),y:1,z:1},programUniforms:Ot})}},ve=(e,t)=>{b(e.inputs,t),e.compute(B(e.inputs,t))},Le=e=>ir({axis:e.axis,blockSize:e.blockSize})}),pt,$t,Vt,nr=U(()=>{St(),Yt(),cr(),pt=(e,t,r)=>{let n=e===t,s=e<t&&r<0,a=e>t&&r>0;if(n||s||a)throw new Error("Range these inputs' contents are invalid.")},$t=(e,t,r,n)=>{let s=Math.abs(Math.ceil((t-e)/r)),a=[s],i=s,u=[{type:12,data:i},{type:n,data:e},{type:n,data:r},...Mt(a)],d=c=>{let g=Wt("output",n,a.length),_=g.type.value,l=[{name:"outputSize",type:"u32"},{name:"start",type:_},{name:"delta",type:_}];return`
        ${c.registerUniforms(l).declareVariables(g)}
        ${c.mainStart()}
        ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${_}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:d,getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:u})}},Vt=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),E.webgpu.validateInputContent&&pt(t,r,n),e.compute($t(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),kr,Ir,wr,sr,Sr,Cr,yr,Fr,Tn,pn,qr,Kr,Yr,yn,Jn,_i,ro,Tc,Bn,Us=U(()=>{Yt(),Kt(),Er(),cr(),kr=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Ir=(e,t,r)=>{t.every(s=>s>=0&&s<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((s,a)=>n[s]=e[a]),n},wr=(e,t,r,n,s,a)=>{let[i,u,d]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(i>0&&e.length>i&&e[i].dims.length>0)e[i].getFloat32Array().forEach(g=>a.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(u>0&&e.length>u&&e[u].dims.length===1&&e[u].dims[0]>0){if(e[u].getFloat32Array().forEach(g=>n.push(g)),n.length!==0&&n.length!==c&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");kr(n,t),t.axes.length>0&&Ir(n,t.axes,c).forEach((g,_)=>n[_]=g)}if(d>0&&e.length>d&&e[d].dims.length===1&&e[d].dims[0]>0&&(e[d].getBigInt64Array().forEach(g=>s.push(Number(g))),s.length!==0&&s.length!==c&&r>=18&&s.length!==t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==0&&n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==0&&s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof s<"u"&&n.length>0&&s.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},sr=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Sr=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Cr=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),s=e.length===0?n:e.slice();return t.length>0?(t.forEach((a,i)=>{n[a]=s[i],n[i+r]=s[t.length+i]}),n):s},yr=(e,t,r,n)=>{let s=[];if(r.length>0)if(n.length>0){if(e.forEach(a=>s.push(a)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((a,i)=>s[a]=r[i])}else r.forEach(a=>s.push(a));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");s=e.map((a,i)=>Math.round(a*t[i]))}return s},Fr=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(a=>t[a]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(a=>t[a]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let s=e.slice();return r.axes.length>0?(r.axes.forEach(a=>t[a]=n),r.axes.forEach(a=>s[a]=Math.round(e[a]*t[a]))):(t.fill(n,0,t.length),s.forEach((a,i)=>s[i]=Math.round(a*t[i]))),s},Tn=(e,t,r,n,s)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${Ut("uniforms.scales","i",n)};
        var roi_low = ${Ut("uniforms.roi","i",s)};
        var roi_hi = ${Ut("uniforms.roi",`i + ${t.length}`,s)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${Ut("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${Ut("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,pn=(e,t,r,n,s,a,i)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${Ut("uniforms.scales","i",s)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${Ut("uniforms.roi","i",a)};
          var roi_hi = ${Ut("uniforms.roi",`i + ${r.length}`,a)};
          var input_shape_i = ${Ut("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${Ut("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${i} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,qr=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${Ut("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Kr=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Yr=(e,t,r,n,s)=>{let[a,i,u,d]=r.length===2?[-1,0,1,-1]:[0,2,3,1],c=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${c} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(row, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",u,`max(0, min(col, ${r[u]} - 1))`)};
      ${Kr(e,d,a,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${c} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${c} = originalIndices[${i}];
      var col:${c} = originalIndices[${u}];
      ${n?`if (row < 0 || row > (${r[i]} - 1) || col < 0 || col > (${r[u]} - 1)) {
        return ${s};
      }`:""};
      row = max(0, min(row, ${r[i]} - 1));
      col = max(0, min(col, ${r[u]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${d}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:"0"};
      var x11: ${c} = getInputValue(batch, channel, row1, col1);
      var x12: ${c} = getInputValue(batch, channel, row1, col2);
      var x21: ${c} = getInputValue(batch, channel, row2, col1);
      var x22: ${c} = getInputValue(batch, channel, row2, col2);
      var dx1: ${c} = abs(row - ${c}(row1));
      var dx2: ${c} = abs(${c}(row2) - row);
      var dy1: ${c} = abs(col - ${c}(col1));
      var dy2: ${c} = abs(${c}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},yn=(e,t,r,n,s,a,i,u,d,c)=>{let g=r.length===2,[_,l]=g?[0,1]:[2,3],x=e.type.value,T=C=>{let L=C===_?"row":"col";return`
      fn ${L}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${x} {
        var output_index = ${t.indicesGet("output_indices",C)};
        var originalIdx: ${x} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[C]},
        ${n[C]}, ${r[C]}, ${a[C]}, ${a[C]} + ${r.length});
        var fractOriginalIdx: ${x} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${u} && (originalIdx < 0 || originalIdx > (${r[C]} - 1))) {
          return ${d};
        }
        var data: array<${x}, 4> = array<${x}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${L}: ${x} = originalIdx + ${x}(i);
          if (${L} < 0 || ${L} >= ${r[C]}) {
            ${c?`coefs[i + 1] = 0.0;
                        continue;`:u?`return ${d};`:`${L} = max(0, min(${L}, ${r[C]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",C,`u32(${L})`)};
          data[i + 1] = ${C===_?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${T(_)};
    ${T(l)};
  fn getCubicInterpolationCoefs(s: ${x}) -> array<${x}, 4> {
    var absS = abs(s);
    var coeffs: array<${x}, 4> = array<${x}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${x} = 1.0 - absS;
    var twoMinusAbsS: ${x} = 2.0 - absS;
    var onePlusAbsS: ${x} = 1.0 + absS;
    coeffs[0] = ((${i} * onePlusAbsS - 5 * ${i}) * onePlusAbsS + 8 * ${i}) * onePlusAbsS - 4 * ${i};
    coeffs[1] = ((${i} + 2) * absS - (${i} + 3)) * absS * absS + 1;
    coeffs[2] = ((${i} + 2) * oneMinusAbsS - (${i} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${i} * twoMinusAbsS - 5 * ${i}) * twoMinusAbsS + 8 * ${i}) * twoMinusAbsS - 4 * ${i};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${x}, 4>, coefs: array<${x}, 4>) -> ${x} {
    var coefsSum: ${x} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${x} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Jn=(e,t,r,n,s)=>{let[a,i,u,d,c]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",i,`max(0, min(depth, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",u,`max(0, min(height, ${r[u]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(width, ${r[d]} - 1))`)};
      ${Kr(e,c,a,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${g} = originalIndices[${i}];
      var height:${g} = originalIndices[${u}];
      var width:${g} = originalIndices[${d}];
      ${n?`if (depth < 0 || depth > (${r[i]} - 1) || height < 0 || height > (${r[u]} - 1) || width < 0 || (width > ${r[d]} - 1)) {
      return ${s};
        }`:""};

    depth = max(0, min(depth, ${r[i]} - 1));
      height = max(0, min(height, ${r[u]} - 1));
      width = max(0, min(width, ${r[d]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:"0"};

      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${g} = abs(depth - ${g}(depth1));
      var dx2: ${g} = abs(${g}(depth2) - depth);
      var dy1: ${g} = abs(height - ${g}(height1));
      var dy2: ${g} = abs(${g}(height2) - height);
      var dz1: ${g} = abs(width - ${g}(width1));
      var dz2: ${g} = abs(${g}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},_i=(e,t,r,n,s,a)=>{let i=e.dims,u=Cr(a,t.axes,i.length),d=yr(i,n,s,t.axes),c=n.slice();n.length===0&&(c=i.map((I,te)=>I===0?1:d[te]/I),t.keepAspectRatioPolicy!=="stretch"&&(d=Fr(i,c,t)));let g=Wt("output",e.dataType,d.length),_=Ye("input",e.dataType,i.length),l=ke.size(d),x=i.length===d.length&&i.every((I,te)=>I===d[te]),T=t.coordinateTransformMode==="tf_crop_and_resize",C=t.extrapolationValue,L=_.type.value,G=I=>`
      ${x?"":`
      ${sr(t.coordinateTransformMode,L)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${qr(_,i)};
              ${Sr(t.nearestMode,r,L)};
              ${pn(_,g,i,d,c.length,u.length,T)};
              `;case"linear":return`
              ${Tn(g,i,d,c.length,u.length)};
              ${(()=>{if(i.length===2||i.length===4)return`${Yr(_,g,i,T,C)}`;if(i.length===3||i.length===5)return`${Jn(_,g,i,T,C)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(i.length===2||i.length===4)return`${yn(_,g,i,d,c,u,t.cubicCoeffA,T,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${I.registerUniform("output_size","u32").registerUniform("scales","f32",c.length).registerUniform("roi","f32",u.length).declareVariables(_,g)}
      ${I.mainStart()}
        ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${x?"output[global_idx] = input[global_idx];":`
        let output_indices = ${g.offsetToIndices("global_idx")};
        var input_indices: ${_.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${_.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${i.length===2||i.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${s.length>0?s:""}|${u.length>0?u:""}|${x}|${i}`,inputDependencies:["rank"]},getShaderSource:G,getRunData:()=>({outputs:[{dims:d,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:[{type:12,data:l},{type:1,data:c},{type:1,data:u},...Mt(i,d)]})}},ro=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Tc=(e,t)=>{let r=[],n=[],s=[],a=ro(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");wr(e.inputs,t,a,r,n,s),e.compute(_i(e.inputs[0],t,a,r,n,s),{inputs:[0]})},Bn=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,s=e.cubicCoeffA,a=e.excludeOutside!==0,i=e.extrapolationValue,u=e.keepAspectRatioPolicy,d=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return ir({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:s,excludeOutside:a,extrapolationValue:i,keepAspectRatioPolicy:u,mode:d,nearestMode:c})}}),Yd,Zd,Jd,ec=U(()=>{Yt(),Kt(),Er(),cr(),Yd=(e,t)=>{let[r,n,s,a]=e,{numHeads:i,rotaryEmbeddingDim:u}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!ke.areEqual(n.dims,[])&&!ke.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(a.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${a.dims.length}`);if(!ke.areEqual(s.dims,a.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(u>0&&i===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let d=r.dims[0],c=r.dims[r.dims.length-2],g=s.dims[0],_=ke.sizeFromDimension(r.dims,1)/c,l=u===0?s.dims[1]*2:_/i;if(u>l)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(d!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(c!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(l/2!==s.dims[1]&&u/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(c>g)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Zd=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:s,scale:a}=t,i=e[0].dims[0],u=ke.sizeFromDimension(e[0].dims,1),d=e[0].dims[e[0].dims.length-2],c=u/d,g=e[2].dims[1],_=s===0?g*2:c/n,l=new Array(i,d,c/_,_-g),x=ke.computeStrides(l),T=[{type:1,data:a},{type:12,data:l},{type:12,data:x},...e[0].dims.length===3?new Array({type:12,data:[u,c,_,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[u,_,d*_,1]}):[],...Mt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],C=L=>{let G=Ye("input",e[0].dataType,e[0].dims.length),I=Ye("position_ids",e[1].dataType,e[1].dims.length),te=Ye("cos_cache",e[2].dataType,e[2].dims.length),Q=Ye("sin_cache",e[3].dataType,e[3].dims.length),ne=Wt("output",e[0].dataType,e[0].dims.length);return L.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:l.length},{name:"global_strides",type:"u32",length:x.length},{name:"input_output_strides",type:"u32",length:x.length}]),`
        ${L.declareVariables(G,I,te,Q,ne)}

        ${L.mainStart(fn)}
          let half_rotary_emb_dim = uniforms.${te.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${L.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${I.broadcastedIndicesToOffset("bsnh.xy",Wt("",I.type.tensor,2))};
            let position_id =
                u32(${I.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${G.getByOffset("i")} * ${te.get("position_id","bsnh[3]")} -
                ${G.getByOffset("j")} * ${Q.get("position_id","bsnh[3]")};
            ${ne.setByOffset("i","re")}
            let im = ${G.getByOffset("i")} * ${Q.get("position_id","bsnh[3]")} +
                ${G.getByOffset("j")} * ${te.get("position_id","bsnh[3]")};
            ${ne.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${ne.setByOffset("k",G.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:ir({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:C,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(ke.size(l)/fn)},programUniforms:T})}},Jd=(e,t)=>{Yd(e.inputs,t),e.compute(Zd(e.inputs,t))}}),dp,cp,pp,Ff=U(()=>{Yt(),Kt(),cr(),dp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let s=t.dims[t.dims.length-1],a=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==a)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let i=e[3];if(i.dims.length!==1)throw new Error("Beta must be 1D");if(i.dims[i.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let i=e[4];if(i.dims.length!==1)throw new Error("Bias must be 1D");if(i.dims[i.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},cp=(e,t,r,n)=>{let s=t.simplified,a=e[0].dims,i=ke.size(a),u=a,d=i,c=a.slice(-1)[0],g=n?a.slice(0,-1).concat(1):[],_=!s&&e.length>3,l=e.length>4,x=n&&r>1,T=n&&r>2,C=r>3,L=64,G=gr(c),I=[{type:12,data:d},{type:12,data:G},{type:12,data:c},{type:1,data:t.epsilon}],te=ne=>{let Re=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],Pe=[Ye("x",e[0].dataType,e[0].dims,G),Ye("skip",e[1].dataType,e[1].dims,G),Ye("gamma",e[2].dataType,e[2].dims,G)];_&&Pe.push(Ye("beta",e[3].dataType,e[3].dims,G)),l&&Pe.push(Ye("bias",e[4].dataType,e[4].dims,G)),Pe.push(Wt("output",e[0].dataType,u,G)),x&&Pe.push(Wt("mean_output",1,g)),T&&Pe.push(Wt("inv_std_output",1,g)),C&&Pe.push(Wt("input_skip_bias_sum",e[0].dataType,u,G));let st=fr(e[0].dataType),Ot=fr(1,G);return`

      ${ne.registerUniforms(Re).declareVariables(...Pe)}
      var<workgroup> sum_shared : array<${Ot}, ${L}>;
      var<workgroup> sum_squared_shared : array<${Ot}, ${L}>;

      ${ne.mainStart([L,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${L};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${L};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${L-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${l?"bias[offset1d + i]":st+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${C?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Xn(st,G,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${L};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Nn("sum",G)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Nn("square_sum",G)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);
        ${x?"mean_output[global_idx] = mean;":""}
        ${T?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${s?"":`- ${st}(mean)`}) *
            ${st}(inv_std_dev) * gamma[offset1d + i]
            ${_?"+ beta[offset1d + i]":""};
        }
      }`},Q=[{dims:u,dataType:e[0].dataType}];return r>1&&Q.push({dims:g,dataType:1}),r>2&&Q.push({dims:g,dataType:1}),r>3&&Q.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${G};${x};${T};${C}`,inputDependencies:e.map((ne,Re)=>"type")},getShaderSource:te,getRunData:()=>({outputs:Q,dispatchGroup:{x:Math.ceil(d/c)},programUniforms:I})}},pp=(e,t)=>{dp(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(cp(e.inputs,t,e.outputCount,!1),{outputs:r})}}),hp,pd,fp,Cc,mp,_p,gp,wp,Of=U(()=>{Yt(),Kt(),Er(),cr(),hp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},pd=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},fp=(e,t)=>{if(e.length>1){let r=pd(e,1),n=pd(e,2),s=pd(e,3);return s.length===0&&(s=[...Array(e[0].dims.length).keys()]),ir({starts:r,ends:n,axes:s})}else return t},Cc=(e,t,r,n,s)=>{let a=e;return e<0&&(a+=r[n[t]]),s[t]<0?Math.max(0,Math.min(a,r[n[t]]-1)):Math.max(0,Math.min(a,r[n[t]]))},mp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${Ut("uniforms.input_shape","i",r.length)};
            let steps_i = ${Ut("uniforms.steps","i",r.length)};
            let signs_i = ${Ut("uniforms.signs","i",r.length)};
            let starts_i = ${Ut("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,_p=(e,t)=>{let r=e[0].dims,n=ke.size(r),s=t.axes.length>0?ke.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],a=pd(e,4);a.forEach(G=>G!==0||(()=>{throw new Error("step cannot be 0")})),a.length===0&&(a=Array(s.length).fill(1));let i=t.starts.map((G,I)=>Cc(G,I,r,s,a)),u=t.ends.map((G,I)=>Cc(G,I,r,s,a));if(s.length!==i.length||s.length!==u.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==r.length)for(let G=0;G<r.length;++G)s.includes(G)||(i.splice(G,0,0),u.splice(G,0,r[G]),a.splice(G,0,1));let d=a.map(G=>Math.sign(G));a.forEach((G,I,te)=>{if(G<0){let Q=(u[I]-i[I])/G,ne=i[I],Re=ne+Q*a[I];i[I]=Re,u[I]=ne,te[I]=-G}});let c=r.slice(0);s.forEach((G,I)=>{c[G]=Math.ceil((u[G]-i[G])/a[G])});let g={dims:c,dataType:e[0].dataType},_=Wt("output",e[0].dataType,c.length),l=Ye("input",e[0].dataType,e[0].dims.length),x=ke.size(c),T=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:i.length},{name:"signs",type:"i32",length:d.length},{name:"steps",type:"u32",length:a.length}],C=[{type:12,data:x},{type:12,data:i},{type:6,data:d},{type:12,data:a},...Mt(e[0].dims,c)],L=G=>`
      ${G.registerUniforms(T).declareVariables(l,_)}
        ${mp(l,_,r)}
        ${G.mainStart()}
          ${G.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${_.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${_.setByOffset("global_idx",l.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${d.length}_${i.length}_${a.length}`,inputDependencies:["rank"]},getShaderSource:L,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:C})}},gp=(e,t)=>{hp(e.inputs,t);let r=fp(e.inputs,t);e.compute(_p(e.inputs,r),{inputs:[0]})},wp=e=>{let t=e.starts,r=e.ends,n=e.axes;return ir({starts:t,ends:r,axes:n})}}),yp,bp,Mp,vp,zf=U(()=>{Yt(),Kt(),Er(),jn(),cr(),yp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},bp=(e,t)=>{let r=e.inputs[0],n=r.dims,s=ke.size(n),a=64,i=n.length,u=ke.normalizeAxis(t.axis,i),d=u<n.length-1,c,g=[];d?(g=Array.from({length:i},(Pe,st)=>st),g[u]=i-1,g[i-1]=u,c=e.compute(xn(r,g),{inputs:[r],outputs:[-1]})[0]):c=r;let _=c.dims,l=_[i-1],x=s/l,T=gr(l),C=l/T,L=(Pe,st)=>st===4?`max(max(${Pe}.x, ${Pe}.y), max(${Pe}.z, ${Pe}.w))`:st===2?`max(${Pe}.x, ${Pe}.y)`:st===3?`max(max(${Pe}.x, ${Pe}.y), ${Pe}.z)`:Pe,G=Ye("x",c.dataType,c.dims,T),I=Wt("result",c.dataType,c.dims,T),te=G.type.value,Q=fr(c.dataType)==="f32"?`var threadMax = ${te}(-3.402823e+38f);`:`var threadMax = ${te}(-65504.0h);`,ne=Pe=>`
      var<workgroup> rowMaxShared : ${te};
      var<workgroup> rowSumShared : ${te};
      var<workgroup> threadShared : array<${te}, ${a}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${te} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${te}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${Pe.registerUniform("packedCols","i32").declareVariables(G,I)}
      ${Pe.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${a};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${Q}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${te}(${L("threadShared[0]",T)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${te}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${te}(${Nn("threadShared[0]",T)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,Re=e.compute({name:"Softmax",shaderCache:{hint:`${T}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:_,dataType:c.dataType}],dispatchGroup:{x},programUniforms:[{type:6,data:C}]}),getShaderSource:ne},{inputs:[c],outputs:[d?-1:0]})[0];d&&e.compute(xn(Re,g),{inputs:[Re]})},Mp=(e,t)=>{yp(e.inputs),bp(e,t)},vp=e=>ir({axis:e.axis})}),xp,Tp,Cp,$p,Ep,kp,Sp,Df=U(()=>{Yt(),Kt(),Er(),cr(),xp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Tp=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(s=>r.push(Number(s))),n=r.length),ir({numOutputs:n,axis:t.axis,splitSizes:r})},Cp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${Ut("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,$p=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let s=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(s):n===0?r.push(`if (output_number == ${n}u) { ${s} }`):n===t-1?r.push(`else { ${s} }`):r.push(`else if (output_number == ${n}) { ${s} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Ep=(e,t)=>{let r=e[0].dims,n=ke.size(r),s=e[0].dataType,a=ke.normalizeAxis(t.axis,r.length),i=new Array(t.numOutputs),u=Ye("input",s,r.length),d=new Array(t.numOutputs),c=[],g=[],_=0,l=[{type:12,data:n}];for(let T=0;T<t.numOutputs;T++){_+=t.splitSizes[T],d[T]=_;let C=r.slice();C[a]=t.splitSizes[T],g.push(C),i[T]=Wt(`output${T}`,s,C.length),c.push({dims:g[T],dataType:e[0].dataType})}l.push({type:12,data:d},...Mt(r,...g));let x=T=>`
  ${T.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",d.length).declareVariables(u,...i)}
  ${Cp(d.length)}
  ${$p(i)}

  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${u.offsetToIndices("global_idx")};
    var index = ${u.indicesGet("indices",a)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Ut("uniforms.size_in_split_axis","output_number - 1u",d.length)};
      ${u.indicesSet("indices",a,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:x,getRunData:()=>({outputs:c,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:l})}},kp=(e,t)=>{xp(e.inputs);let r=e.inputs.length===1?t:Tp(e.inputs,t);e.compute(Ep(e.inputs,r),{inputs:[0]})},Sp=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ir({axis:t,numOutputs:n,splitSizes:r})}}),Pp,Ap,Ip,Bf=U(()=>{Yt(),Kt(),cr(),Pp=(e,t,r,n,s)=>{let a=Wt("output_data",s,r.length,4),i=Ye("a_data",t[1].dataType,t[1].dims.length,4),u=Ye("b_data",t[2].dataType,t[2].dims.length,4),d=Ye("c_data",t[0].dataType,t[0].dims.length,4),c,g=(_,l,x)=>`select(${l}, ${_}, ${x})`;if(!n)c=a.setByOffset("global_idx",g(i.getByOffset("global_idx"),u.getByOffset("global_idx"),d.getByOffset("global_idx")));else{let _=(l,x,T="")=>{let C=`a_data[index_a${x}][component_a${x}]`,L=`b_data[index_b${x}][component_b${x}]`,G=`bool(c_data[index_c${x}] & (0xffu << (component_c${x} * 8)))`;return`
            let output_indices${x} = ${a.offsetToIndices(`global_idx * 4u + ${x}u`)};
            let offset_a${x} = ${i.broadcastedIndicesToOffset(`output_indices${x}`,a)};
            let offset_b${x} = ${u.broadcastedIndicesToOffset(`output_indices${x}`,a)};
            let offset_c${x} = ${d.broadcastedIndicesToOffset(`output_indices${x}`,a)};
            let index_a${x} = offset_a${x} / 4u;
            let index_b${x} = offset_b${x} / 4u;
            let index_c${x} = offset_c${x} / 4u;
            let component_a${x} = offset_a${x} % 4u;
            let component_b${x} = offset_b${x} % 4u;
            let component_c${x} = offset_c${x} % 4u;
            ${l}[${x}] = ${T}(${g(C,L,G)});
          `};s===9?c=`
            var data = vec4<u32>(0);
            ${_("data",0,"u32")}
            ${_("data",1,"u32")}
            ${_("data",2,"u32")}
            ${_("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:c=`
            ${_("output_data[global_idx]",0)}
            ${_("output_data[global_idx]",1)}
            ${_("output_data[global_idx]",2)}
            ${_("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(d,i,u,a)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${c}
      }`},Ap=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,s=e[1].dataType,a=!(ke.areEqual(t,r)&&ke.areEqual(r,n)),i=t,u=ke.size(t);if(a){let c=Mn.calcShape(Mn.calcShape(t,r,!1),n,!1);if(!c)throw new Error("Can't perform where op on the given tensors");i=c,u=ke.size(i)}let d=Math.ceil(u/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:c=>Pp(c,e,i,a,s),getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:Math.ceil(u/64/4)},programUniforms:[{type:12,data:d},...Mt(n,t,r,i)]})}},Ip=e=>{e.compute(Ap(e.inputs))}}),Fp,Lf=U(()=>{Vo(),Ki(),Md(),vd(),xd(),Td(),Rl(),kd(),Id(),Fd(),Od(),zd(),vc(),xu(),Bd(),Ld(),xc(),jd(),Ud(),Wd(),qd(),Zl(),Hd(),Vd(),Kd(),f(),ze(),nr(),Vi(),Us(),ec(),Ff(),Of(),zf(),Df(),Ru(),jn(),ca(),Bf(),Fp=new Map([["Abs",[Zi]],["Acos",[Zo]],["Acosh",[Jo]],["Add",[fa]],["ArgMax",[jo,Gi]],["ArgMin",[Wi,Gi]],["Asin",[el]],["Asinh",[tl]],["Atan",[Ji]],["Atanh",[rl]],["Attention",[qo]],["AveragePool",[pr,Xd]],["BatchNormalization",[Qi]],["BiasAdd",[Qo]],["BiasSplitGelu",[Cl]],["Cast",[sl,nl]],["Ceil",[al]],["Clip",[ea]],["Concat",[Bl,Ll]],["Conv",[Ea,Ca]],["ConvTranspose",[uu,au]],["Cos",[ol]],["Cosh",[ta]],["CumSum",[Pa,cu]],["DepthToSpace",[Ia,fu]],["DequantizeLinear",[ve,Le]],["Div",[El]],["Einsum",[yu,za]],["Elu",[ll,Os]],["Equal",[kl]],["Erf",[ul]],["Exp",[dl]],["Expand",[Da]],["FastGelu",[Ba]],["Floor",[ra]],["FusedConv",[Ea,Ca]],["Gather",[$u,La]],["GatherElements",[Ar,Au]],["GatherBlockQuantized",[ku,Na]],["Gelu",[cl]],["Gemm",[Iu,ja]],["GlobalAveragePool",[dn,an]],["GlobalMaxPool",[cd,dd]],["Greater",[Al]],["GreaterOrEqual",[ri]],["GroupQueryAttention",[Uu,ju]],["HardSigmoid",[sa,_l]],["InstanceNormalization",[qu]],["LayerNormalization",[Hu]],["LeakyRelu",[pl,Os]],["Less",[Il]],["LessOrEqual",[Fl]],["Log",[ua]],["MatMul",[li]],["MatMulNBits",[Yu,Zu]],["MaxPool",[as,Qd]],["Mul",[ma]],["MultiHeadAttention",[Ua,Va]],["Neg",[hl]],["Not",[na]],["Pad",[od]],["Pow",[Sl]],["QuickGelu",[da,Os]],["Range",[Vt]],["Reciprocal",[fl]],["ReduceMin",[Lo]],["ReduceMean",[Li]],["ReduceMax",[Bo]],["ReduceSum",[Ro]],["ReduceProd",[Ni]],["ReduceL1",[zo]],["ReduceL2",[Do]],["ReduceLogSum",[ji]],["ReduceLogSumExp",[Ri]],["ReduceSumSquare",[No]],["Relu",[ei]],["Resize",[Tc,Bn]],["RotaryEmbedding",[Jd]],["Sigmoid",[ml]],["Sin",[ia]],["Sinh",[gl]],["Slice",[gp,wp]],["SkipLayerNormalization",[pp]],["Split",[kp,Sp]],["Sqrt",[aa]],["Softmax",[Mp,vp]],["Sub",[Pl]],["Tan",[wl]],["Tanh",[yl]],["ThresholdedRelu",[Ml,Os]],["Tile",[Lu]],["Transpose",[yd,ho]],["Where",[Ip]]])}),Op,Rf=U(()=>{St(),m(),cr(),Op=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,s){je(e.programInfo.name);let a=this.backend.device,i=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let u=[];for(let c of t)u.push({binding:u.length,resource:{buffer:c.buffer}});for(let c of r)u.push({binding:u.length,resource:{buffer:c.buffer}});s&&u.push({binding:u.length,resource:s});let d=a.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:u,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let c={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:d,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(c)}i.setPipeline(e.computePipeline),i.setBindGroup(0,d),i.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Ve(e.programInfo.name)}dispose(){}build(e,t){je(e.name);let r=this.backend.device,n=[];r.features.has("shader-f16")&&n.push("enable f16;");let s=uo(t,this.backend.device.limits),a=e.getShaderSource(s),i=`${n.join(`
`)}
${s.additionalImplementations}
${a}`,u=r.createShaderModule({code:i,label:e.name});ae("verbose",()=>`[WebGPU] ${e.name} shader code: ${i}`);let d=r.createComputePipeline({compute:{module:u,entryPoint:"main"},layout:"auto",label:e.name});return Ve(e.name),{programInfo:e,computePipeline:d,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&r<=s&&n<=s)return[t,r,n];let a=t*r*n,i=Math.ceil(Math.sqrt(a));if(i>s){if(i=Math.ceil(Math.cbrt(a)),i>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[i,i,i]}else return[i,i,1]}}}),zp,Dp,Bp,Lp,Nf=U(()=>{St(),Yt(),m(),Y(),Ur(),Lf(),Rf(),zp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let s=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${s}`);break}case"rank":{let a=e[n].dims.length;r.push(`${s};${a}`);break}case"dims":{let a=e[n].dims.join(",");r.push(`${s};${a}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},Dp=(e,t,r)=>{var s,a;let n=e.name;return(s=e.shaderCache)!=null&&s.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${zp(t,((a=e.shaderCache)==null?void 0:a.inputDependencies)??new Array(t.length).fill("dims"))}`,n},Bp=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},Lp=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r};t.features.has("chromium-experimental-timestamp-query-inside-passes")?r.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&r.push("timestamp-query"),t.features.has("shader-f16")&&r.push("shader-f16"),this.device=await t.requestDevice(n),this.adapterInfo=new Bp(t.info||await t.requestAdapterInfo()),this.gpuDataManager=lr(this),this.programManager=new Op(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ns(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;je(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{var n;let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let s=0;s<t.length/2;s++){let a=r[s],i=a.kernelId,u=this.kernels.get(i),d=u.kernelType,c=u.kernelName,g=a.programName,_=a.inputTensorViews,l=a.outputTensorViews,x=t[s*2],T=t[s*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=x);let C=Number(x-this.queryTimeBase),L=Number(T-this.queryTimeBase);if(!Number.isSafeInteger(C)||!Number.isSafeInteger(L))throw new RangeError("incorrect timestamp range");if((n=this.env.webgpu.profiling)!=null&&n.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:_.map(G=>({dims:G.dims,dataType:kn(G.dataType)})),outputsMetadata:l.map(G=>({dims:G.dims,dataType:kn(G.dataType)})),kernelId:i,kernelType:d,kernelName:c,programName:g,startTime:C,endTime:L});else{let G="";_.forEach((te,Q)=>{G+=`input[${Q}]: [${te.dims}] | ${kn(te.dataType)}, `});let I="";l.forEach((te,Q)=>{I+=`output[${Q}]: [${te.dims}] | ${kn(te.dataType)}, `}),console.log(`[profiling] kernel "${i}|${d}|${c}|${g}" ${G}${I}execution time: ${L-C} ns`)}Ge("GPU",`${g}::${x}::${T}`)}e.unmap(),this.pendingQueries.delete(e)}),Ve()}run(e,t,r,n,s,a){je(e.name);let i=[];for(let I=0;I<t.length;++I){let te=t[I].data;if(te===0)continue;let Q=this.gpuDataManager.get(te);if(!Q)throw new Error(`no GPU data for input: ${te}`);i.push(Q)}let{outputs:u,dispatchGroup:d,programUniforms:c}=e.getRunData(t),g=r.length===0?u.map((I,te)=>te):r;if(g.length!==u.length)throw new Error(`Output size ${g.length} must be equal to ${u.length}.`);let _=[],l=[];for(let I=0;I<u.length;++I){if(!Number.isInteger(g[I])||g[I]<-3||g[I]>=a)throw new Error(`Invalid output index: ${g[I]}`);if(g[I]===-3)continue;let te=g[I]===-1,Q=g[I]===-2,ne=te||Q?s(u[I].dataType,u[I].dims):n(g[I],u[I].dataType,u[I].dims);if(_.push(ne),ne.data===0)continue;let Re=this.gpuDataManager.get(ne.data);if(!Re)throw new Error(`no GPU data for output: ${ne.data}`);if(te&&this.temporaryData.push(Re),Q){let Pe=this.kernelPersistentData.get(this.currentKernelId);Pe||(Pe=[],this.kernelPersistentData.set(this.currentKernelId,Pe)),Pe.push(Re)}l.push(Re)}if(i.length!==t.length||l.length!==_.length){if(l.length===0)return Ve(e.name),_;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let x;if(c){let I=0,te=[];c.forEach(Pe=>{let st=typeof Pe.data=="number"?[Pe.data]:Pe.data;if(st.length===0)return;let Ot=Pe.type===10?2:4,jt,ur;Pe.type===10?(ur=st.length>4?16:st.length>2?8:st.length*Ot,jt=st.length>4?16:Ot*st.length):(ur=st.length<=2?st.length*Ot:16,jt=16),I=Math.ceil(I/ur)*ur,te.push(I);let hr=Pe.type===10?8:4;I+=st.length>4?Math.ceil(st.length/hr)*jt:st.length*Ot});let Q=16;I=Math.ceil(I/Q)*Q;let ne=new ArrayBuffer(I);c.forEach((Pe,st)=>{let Ot=te[st],jt=typeof Pe.data=="number"?[Pe.data]:Pe.data;if(Pe.type===6)new Int32Array(ne,Ot,jt.length).set(jt);else if(Pe.type===12)new Uint32Array(ne,Ot,jt.length).set(jt);else if(Pe.type===10)new Uint16Array(ne,Ot,jt.length).set(jt);else if(Pe.type===1)new Float32Array(ne,Ot,jt.length).set(jt);else throw new Error(`Unsupported uniform type: ${kn(Pe.type)}`)});let Re=this.gpuDataManager.create(I,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(Re.buffer,0,ne,0,I),this.gpuDataManager.release(Re.id),x={offset:0,size:I,buffer:Re.buffer}}let T=this.programManager.normalizeDispatchGroupSize(d),C=T[1]===1&&T[2]===1,L=Dp(e,t,C),G=this.programManager.getArtifact(L);if(G||(G=this.programManager.build(e,T),this.programManager.setArtifact(L,G),ae("info",()=>`[artifact] key: ${L}, programName: ${e.name}`)),c&&G.uniformVariablesInfo){if(c.length!==G.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${G.uniformVariablesInfo.length}, got ${c.length} in program "${G.programInfo.name}".`);for(let I=0;I<c.length;I++){let te=c[I],Q=te.type,ne=typeof te.data=="number"?1:te.data.length,[Re,Pe]=G.uniformVariablesInfo[I];if(Q!==Re||ne!==Pe)throw new Error(`Uniform variable ${I} mismatch: expect type ${Re} with size ${Pe}, got type ${Q} with size ${ne} in program "${G.programInfo.name}".`)}}if(ae("info",()=>`[ProgramManager] run "${e.name}" (key=${L}) with ${T[0]}x${T[1]}x${T[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let I={kernelId:this.currentKernelId,programName:G.programInfo.name,inputTensorViews:t,outputTensorViews:_};this.pendingKernels.push(I),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(I)}return this.programManager.run(G,i,l,T,x),Ve(e.name),_}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let s=Fp.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);let a={kernelType:e,kernelName:n,kernelEntry:s[0],attributes:[s[1],r]};this.kernels.set(t,a)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let s=n.kernelType,a=n.kernelName,i=n.kernelEntry,u=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${a}" is not allowed to be called recursively`);this.currentKernelId=e,u[0]&&(u[1]=u[0](u[1]),u[0]=void 0),ae("info",()=>`[WebGPU] Start to run kernel "[${s}] ${a}"...`);let d=this.env.debug;this.temporaryData=[];try{return d&&this.device.pushErrorScope("validation"),i(t,u[1]),0}catch(c){return r.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${a}" failed. ${c}`)),1}finally{d&&r.push(this.device.popErrorScope().then(c=>c?`GPU validation error for kernel "[${s}] ${a}": ${c.message}`:null));for(let c of this.temporaryData)this.gpuDataManager.release(c.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));let a=s.get(t),i=this.gpuDataManager.registerExternalBuffer(r,n,a);return s.set(t,[i,r]),i}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await tr(this,e,t);return A(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){var e;this.queryType="none",(((e=this.env.webgpu.profiling)==null?void 0:e.mode)==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){ae("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){ae("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){ae("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let s=this.getComputePassEncoder(),a=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(a.computePipeline),s.setBindGroup(0,a.bindGroup),s.dispatchWorkgroups(...a.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),Rp,$c,Ec,Np,jp,jf=U(()=>{m(),Rp=1,$c=()=>Rp++,Ec=class{constructor(e,t){this.mlContext=e,this.tensorEntry=t,this.tensorCache=t?[t]:[]}get tensor(){var e;return(e=this.tensorEntry)==null?void 0:e[0]}get context(){if(!this.mlContext)throw new Error("MLContext has not been set.");return this.mlContext}set context(e){if(this.mlContext&&this.mlContext!==e)throw new Error("MLTensor in use in a different MLContext.");this.mlContext=e}destroy(){for(let[e]of this.tensorCache)e.destroy();this.tensorCache=[],this.tensorEntry=void 0}trySelectTensor(e,t){for(let[r,n,s]of this.tensorCache)if(t===r){if(this.context!==e)throw new Error("MLTensor cannot be registered with a different MLContext.");return this.tensorEntry=[r,n,s],!0}return!1}async ensureTensor(e,t,r){var a;if(this.tensorEntry){let[i,u,d]=this.tensorEntry;if(u===e&&d.every((c,g)=>c===t[g]))return i}for(let[i,u,d]of this.tensorCache)if(u===e&&d.every((c,g)=>c===t[g])){if(r&&this.tensorEntry){ae("verbose",()=>`[WebNN] Slowdown may occur, having to copy existing tensor {dataType: ${e}, shape: ${t}}`);let c=await this.context.readTensor(this.tensorEntry[0]);this.context.writeTensor(i,c)}return this.tensorEntry=[i,u,d],i}ae("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${e}, shape: ${t}}`);let n=MLTensorUsage.READ|MLTensorUsage.WRITE,s=await this.context.createTensor({dataType:e,shape:t,dimensions:t,usage:n});return this.tensorEntry=[s,e,t],this.tensorCache.push(this.tensorEntry),this.activeUpload&&((a=this.mlContext)==null||a.writeTensor(s,this.activeUpload),this.activeUpload=void 0),s}upload(e){var t;if(!this.tensorEntry){this.activeUpload=new Uint8Array(e);return}(t=this.mlContext)==null||t.writeTensor(this.tensorEntry[0],e)}async download(e){if(this.activeUpload)if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(this.activeUpload):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(this.activeUpload);return}else return this.activeUpload.buffer;if(!this.tensorEntry)throw new Error("Tensor has not been created.");return e?this.context.readTensor(this.tensorEntry[0],e):this.context.readTensor(this.tensorEntry[0])}},Np=class{constructor(e){this.backend=e,this.tensorsById=new Map,this.tensorIdsByContext=new Map}reserveTensorId(){let e=$c();return this.tensorsById.set(e,new Ec),e}releaseTensorId(e){let t=this.tensorsById.get(e);if(t){t.destroy(),this.tensorsById.delete(e);for(let[r,n]of this.tensorIdsByContext)if(n.has(e)){n.delete(e),n.size===0&&this.tensorIdsByContext.delete(r);break}}}async ensureTensor(e,t,r,n){var a;ae("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${e}, dataType: ${t}, shape: ${r}, copyOld: ${n}}`);let s=this.tensorsById.get(e);if(!s)throw new Error("Tensor not found.");return s.context=this.backend.currentContext,this.tensorIdsByContext.has(this.backend.currentContext)||this.tensorIdsByContext.set(this.backend.currentContext,new Set),(a=this.tensorIdsByContext.get(this.backend.currentContext))==null||a.add(e),s.ensureTensor(t,r,n)}upload(e,t){this.tensorsById.get(e).upload(t)}async download(e,t){return ae("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${t==null?void 0:t.byteLength}}`),this.tensorsById.get(e).download(t)}releaseTensorsForContext(e){let t=this.tensorIdsByContext.get(e);if(t){for(let r of t)this.tensorsById.get(r).destroy(),this.tensorsById.delete(r);this.tensorIdsByContext.delete(e)}}registerTensor(e,t,r,n){for(let[i,u]of this.tensorsById)if(u.trySelectTensor(e,t))return i;let s=$c();this.tensorsById.set(s,new Ec(e,[t,r,n]));let a=this.tensorIdsByContext.get(e);return a||(a=new Set,this.tensorIdsByContext.set(e,a)),a.add(s),s}},jp=(...e)=>new Np(...e)}),kc,Vp,Vf=U(()=>{Yt(),Gr(),Y(),jf(),m(),kc=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),Vp=class{constructor(e){this.tensorManager=jp(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,ns(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){this.activeSessionId=e}get currentContext(){let e=this.getMLContext(this.currentSessionId);if(!e)throw new Error(`No MLContext found for session ${this.currentSessionId}`);return e}registerMLContext(e,t){this.mlContextBySessionId.set(e,t);let r=this.sessionIdsByMLContext.get(t);r||(r=new Set,this.sessionIdsByMLContext.set(t,r)),r.add(e)}onReleaseSession(e){let t=this.mlContextBySessionId.get(e);if(!t)return;this.mlContextBySessionId.delete(e);let r=this.sessionIdsByMLContext.get(t);r.delete(e),r.size===0&&(this.sessionIdsByMLContext.delete(t),this.tensorManager.releaseTensorsForContext(t))}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){ae("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,t,r,n){let s=kc.get(t);if(!s)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e,s,r,n)}uploadTensor(e,t){if(!or().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");ae("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${t.byteLength}}`),this.tensorManager.upload(e,t)}async downloadTensor(e,t){return this.tensorManager.download(e,t)}createMLTensorDownloader(e,t){return async()=>{let r=await this.tensorManager.download(e);return A(r,t)}}registerMLTensor(e,t,r){let n=kc.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let s=this.tensorManager.registerTensor(this.currentContext,e,n,r);return ae("verbose",()=>`[WebNN] registerMLTensor {tensor: ${e}, dataType: ${n}, dimensions: ${r}} -> {tensorId: ${s}}`),s}flush(){}}}),Up={};P(Up,{init:()=>Gp});var tc,Wp,Gp,Uf=U(()=>{Yt(),Nf(),m(),Kt(),Vf(),tc=class Sf{constructor(t,r,n,s){this.module=t,this.dataType=r,this.data=n,this.dims=s}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=ke.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=ke.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=ke.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let t=ke.size(this.dims);return t===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(ke.size(t)!==ke.size(this.dims))throw new Error("Invalid new shape");return new Sf(this.module,this.dataType,this.data,t)}},Wp=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.HEAPU32,s=r>>>2;this.opKernelContext=n[s++];let a=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let i=[];for(let u=0;u<a;u++){let d=n[s++],c=n[s++],g=n[s++],_=[];for(let l=0;l<g;l++)_.push(n[s++]);i.push(new tc(e,d,c,_))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){var i;let r=((i=t==null?void 0:t.inputs)==null?void 0:i.map(u=>typeof u=="number"?this.inputs[u]:u))??this.inputs,n=(t==null?void 0:t.outputs)??[],s=(u,d,c)=>new tc(this.module,d,this.output(u,c),c),a=(u,d)=>{let c=Ln(u,d);if(!c)throw new Error(`Unsupported data type: ${u}`);let g=c>0?this.backend.gpuDataManager.create(c).id:0;return new tc(this.module,u,g,d)};return this.backend.run(e,r,n,s,a,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.stackAlloc((1+t.length)*4),s=n>>2;this.module.HEAPU32[s++]=t.length;for(let a=0;a<t.length;a++)this.module.HEAPU32[s++]=t[a];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},Gp=async(e,t,r,n)=>{let s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let a=new Lp;await a.initialize(r,n),s("webgpu",[a,i=>a.alloc(i),i=>a.free(i),(i,u,d,c=!1)=>{if(c)ae("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${i}, dst=${u}, size=${d}`),a.memcpy(i,u);else{ae("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${i}, gpuDataId=${u}, size=${d}`);let g=t.HEAPU8.subarray(i>>>0,(i>>>0)+d);a.upload(u,g)}},async(i,u,d)=>{ae("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${i}, dataOffset=${u}, size=${d}`),await a.download(i,()=>t.HEAPU8.subarray(u>>>0,(u>>>0)+d))},(i,u,d)=>a.createKernel(i,u,d,t.UTF8ToString(t._JsepGetNodeName(u))),i=>a.releaseKernel(i),(i,u,d,c)=>{ae("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${i}, contextDataOffset=${u}`);let g=new Wp(t,a,u);return a.computeKernel(i,g,c)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let a=new Vp(r);s("webnn",[a,()=>a.reserveTensorId(),i=>a.releaseTensorId(i),async(i,u,d,c)=>a.ensureTensor(i,u,d,c),(i,u)=>{a.uploadTensor(i,u)},async(i,u)=>a.downloadTensor(i,u)])}}}),qp,Sc,Pc,Ws,Hp,rc,Ac,Ic,Fc,Oc,zc,Dc,Kp=U(()=>{Hn(),ts(),Yt(),Gr(),cs(),ks(),qp=(e,t)=>{or()._OrtInit(e,t)!==0&&Vr("Can't initialize onnxruntime.")},Sc=async e=>{qp(e.wasm.numThreads,Dn(e.logLevel))},Pc=async(e,t)=>{{let r=(Uf(),D(Up)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let s=e.webgpu.powerPreference;if(s!==void 0&&s!=="low-power"&&s!=="high-performance")throw new Error(`Invalid powerPreference setting: "${s}"`);let a=e.webgpu.forceFallbackAdapter;if(a!==void 0&&typeof a!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${a}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:s,forceFallbackAdapter:a}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await r("webgpu",or(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",or(),e)}}},Ws=new Map,Hp=e=>{let t=or(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&Vr("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},rc=e=>{let t=or(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Ac=async(e,t)=>{var _,l;let r,n,s=or();Array.isArray(e)?[r,n]=e:e.buffer===s.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=rc(e);let a=0,i=0,u=0,d=[],c=[],g=[];try{if([i,d]=Es(t),(t==null?void 0:t.externalData)&&s.mountExternalData){let Q=[];for(let ne of t.externalData){let Re=typeof ne=="string"?ne:ne.path;Q.push(rs(typeof ne=="string"?ne:ne.data).then(Pe=>{s.mountExternalData(Re,Pe)}))}await Promise.all(Q)}for(let Q of(t==null?void 0:t.executionProviders)??[])if((typeof Q=="string"?Q:Q.name)==="webnn"){if(s.shouldTransferToMLTensor=!1,s.currentContext)throw new Error("WebNN execution provider is already set.");if(typeof Q!="string"){let ne=Q,Re=ne==null?void 0:ne.context,Pe=ne==null?void 0:ne.gpuDevice,st=ne==null?void 0:ne.deviceType,Ot=ne==null?void 0:ne.numThreads,jt=ne==null?void 0:ne.powerPreference;Re?s.currentContext=Re:Pe?s.currentContext=await navigator.ml.createContext(Pe):s.currentContext=await navigator.ml.createContext({deviceType:st,numThreads:Ot,powerPreference:jt})}else s.currentContext=await navigator.ml.createContext();break}a=await s._OrtCreateSession(r,n,i),a===0&&Vr("Can't create a session."),s.currentContext&&(s.jsepRegisterMLContext(a,s.currentContext),s.currentContext=void 0,s.shouldTransferToMLTensor=!0);let[x,T]=Hp(a),C=!!(t!=null&&t.enableGraphCapture),L=[],G=[],I=[];for(let Q=0;Q<x;Q++){let ne=s._OrtGetInputName(a,Q);ne===0&&Vr("Can't get an input name."),c.push(ne),L.push(s.UTF8ToString(ne))}for(let Q=0;Q<T;Q++){let ne=s._OrtGetOutputName(a,Q);ne===0&&Vr("Can't get an output name."),g.push(ne);let Re=s.UTF8ToString(ne);G.push(Re);{if(C&&(t==null?void 0:t.preferredOutputLocation)===void 0){I.push("gpu-buffer");continue}let Pe=typeof(t==null?void 0:t.preferredOutputLocation)=="string"?t.preferredOutputLocation:((_=t==null?void 0:t.preferredOutputLocation)==null?void 0:_[Re])??"cpu";if(Pe!=="cpu"&&Pe!=="cpu-pinned"&&Pe!=="gpu-buffer"&&Pe!=="ml-tensor")throw new Error(`Not supported preferred output location: ${Pe}.`);if(C&&Pe!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${Pe}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);I.push(Pe)}}let te=null;return I.some(Q=>Q==="gpu-buffer"||Q==="ml-tensor")&&(u=s._OrtCreateBinding(a),u===0&&Vr("Can't create IO binding."),te={handle:u,outputPreferredLocations:I,outputPreferredLocationsEncoded:I.map(Q=>ms(Q))}),Ws.set(a,[a,c,g,te,C,!1]),[a,L,G]}catch(x){throw c.forEach(T=>s._OrtFree(T)),g.forEach(T=>s._OrtFree(T)),u!==0&&s._OrtReleaseBinding(u),a!==0&&s._OrtReleaseSession(a),x}finally{s._free(r),i!==0&&s._OrtReleaseSessionOptions(i),d.forEach(x=>s._free(x)),(l=s.unmountExternalData)==null||l.call(s)}},Ic=e=>{var d;let t=or(),r=Ws.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,s,a,i,u]=r;i&&(u&&t._OrtClearBoundOutputs(i.handle),t._OrtReleaseBinding(i.handle)),(d=t.jsepOnReleaseSession)==null||d.call(t,e),s.forEach(c=>t._OrtFree(c)),a.forEach(c=>t._OrtFree(c)),t._OrtReleaseSession(n),Ws.delete(e)},Fc=(e,t,r,n,s,a=!1)=>{if(!e){t.push(0);return}let i=or(),u=e[0],d=e[1],c=e[3],g,_;if(u==="string"&&(c==="gpu-buffer"||c==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&c!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(c==="gpu-buffer"){let T=e[2].gpuBuffer;_=Ln(Kn(u),d);let C=i.jsepRegisterBuffer;if(!C)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');g=C(n,s,T,_)}else if(c==="ml-tensor"){let T=e[2].mlTensor;_=Ln(Kn(u),d);let C=i.jsepRegisterMLTensor;if(!C)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');g=C(T,Kn(u),d)}else{let T=e[2];if(Array.isArray(T)){_=4*T.length,g=i._malloc(_),r.push(g);let C=g/4;for(let L=0;L<T.length;L++){if(typeof T[L]!="string")throw new TypeError(`tensor data at index ${L} is not a string`);i.HEAPU32[C++]=jr(T[L],r)}}else _=T.byteLength,g=i._malloc(_),r.push(g),i.HEAPU8.set(new Uint8Array(T.buffer,T.byteOffset,_),g)}let l=i.stackSave(),x=i.stackAlloc(4*d.length);try{let T=x/4;d.forEach(L=>i.HEAP32[T++]=L);let C=i._OrtCreateTensor(Kn(u),g,_,x,d.length,ms(c));C===0&&Vr(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(C)}finally{i.stackRestore(l)}},Oc=async(e,t,r,n,s,a)=>{var jt,ur;let i=or(),u=Ws.get(e);if(!u)throw new Error(`cannot run inference. invalid session id: ${e}`);let d=u[0],c=u[1],g=u[2],_=u[3],l=u[4],x=u[5],T=t.length,C=n.length,L=0,G=[],I=[],te=[],Q=[],ne=i.stackSave(),Re=i.stackAlloc(T*4),Pe=i.stackAlloc(T*4),st=i.stackAlloc(C*4),Ot=i.stackAlloc(C*4);try{(jt=i.jsepOnRunStart)==null||jt.call(i,d),[L,G]=vs(a);for(let Gt=0;Gt<T;Gt++)Fc(r[Gt],I,Q,e,t[Gt],l);for(let Gt=0;Gt<C;Gt++)Fc(s[Gt],te,Q,e,T+n[Gt],l);let hr=Re/4,Xt=Pe/4,Or=st/4,Wr=Ot/4;for(let Gt=0;Gt<T;Gt++)i.HEAPU32[hr++]=I[Gt],i.HEAPU32[Xt++]=c[t[Gt]];for(let Gt=0;Gt<C;Gt++)i.HEAPU32[Or++]=te[Gt],i.HEAPU32[Wr++]=g[n[Gt]];if(_&&!x){let{handle:Gt,outputPreferredLocations:Jt,outputPreferredLocationsEncoded:vr}=_;if(c.length!==T)throw new Error(`input count from feeds (${T}) is expected to be always equal to model's input count (${c.length}).`);for(let We=0;We<T;We++){let vt=t[We];await i._OrtBindInput(Gt,c[vt],I[We])!==0&&Vr(`Can't bind input[${We}] for session=${e}.`)}for(let We=0;We<C;We++){let vt=n[We];(ur=s[We])!=null&&ur[3]?i._OrtBindOutput(Gt,g[vt],te[We],0)!==0&&Vr(`Can't bind pre-allocated output[${We}] for session=${e}.`):i._OrtBindOutput(Gt,g[vt],0,vr[vt])!==0&&Vr(`Can't bind output[${We}] to ${Jt[We]} for session=${e}.`)}Ws.set(e,[d,c,g,_,l,!0])}let mr;_?mr=await i._OrtRunWithBinding(d,_.handle,C,st,L):mr=await i._OrtRun(d,Pe,Re,T,Ot,C,st,L),mr!==0&&Vr("failed to call OrtRun().");let Br=[];for(let Gt=0;Gt<C;Gt++){let Jt=i.HEAPU32[st/4+Gt];if(Jt===te[Gt]){Br.push(s[Gt]);continue}let vr=i.stackSave(),We=i.stackAlloc(4*4),vt=!1,rr,zr=0;try{i._OrtGetTensorData(Jt,We,We+4,We+8,We+12)!==0&&Vr(`Can't access output tensor data on index ${Gt}.`);let sn=We/4,on=i.HEAPU32[sn++];zr=i.HEAPU32[sn++];let qs=i.HEAPU32[sn++],ic=i.HEAPU32[sn++],$n=[];for(let hn=0;hn<ic;hn++)$n.push(i.HEAPU32[qs/4+hn]);i._OrtFree(qs);let _n=$n.reduce((hn,vn)=>hn*vn,1);rr=kn(on);let yi=_==null?void 0:_.outputPreferredLocations[n[Gt]];if(rr==="string"){if(yi==="gpu-buffer"||yi==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let hn=[],vn=zr/4;for(let Wn=0;Wn<_n;Wn++){let Hs=i.HEAPU32[vn++],ac=Wn===_n-1?void 0:i.HEAPU32[vn]-Hs;hn.push(i.UTF8ToString(Hs,ac))}Br.push([rr,$n,hn,"cpu"])}else if(yi==="gpu-buffer"&&_n>0){let hn=i.jsepGetBuffer;if(!hn)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let vn=hn(zr),Wn=Ln(on,_n);if(Wn===void 0||!hs(rr))throw new Error(`Unsupported data type: ${rr}`);vt=!0,Br.push([rr,$n,{gpuBuffer:vn,download:i.jsepCreateDownloader(vn,Wn,rr),dispose:()=>{i._OrtReleaseTensor(Jt)}},"gpu-buffer"])}else if(yi==="ml-tensor"&&_n>0){let hn=i.jsepEnsureTensor;if(!hn)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(Ln(on,_n)===void 0||!fs(rr))throw new Error(`Unsupported data type: ${rr}`);let vn=await hn(zr,on,$n,!1);vt=!0,Br.push([rr,$n,{mlTensor:vn,download:i.jsepCreateMLTensorDownloader(zr,rr),dispose:()=>{i.jsepReleaseTensorId(zr),i._OrtReleaseTensor(Jt)}},"ml-tensor"])}else{let hn=ps(rr),vn=new hn(_n);new Uint8Array(vn.buffer,vn.byteOffset,vn.byteLength).set(i.HEAPU8.subarray(zr,zr+vn.byteLength)),Br.push([rr,$n,vn,"cpu"])}}finally{i.stackRestore(vr),rr==="string"&&zr&&i._free(zr),vt||i._OrtReleaseTensor(Jt)}}return _&&!l&&(i._OrtClearBoundOutputs(_.handle),Ws.set(e,[d,c,g,_,l,!1])),Br}finally{i.stackRestore(ne),I.forEach(hr=>i._OrtReleaseTensor(hr)),te.forEach(hr=>i._OrtReleaseTensor(hr)),Q.forEach(hr=>i._free(hr)),L!==0&&i._OrtReleaseRunOptions(L),G.forEach(hr=>i._free(hr))}},zc=e=>{let t=or(),r=Ws.get(e);if(!r)throw new Error("invalid session id");let n=r[0],s=t._OrtEndProfiling(n);s===0&&Vr("Can't get an profile file name."),t._OrtFree(s)},Dc=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),Gs,On,no,hd,fd,nc,Bc,sc,gi,wi,Xp,Qp,Yp,Zp,Jp,eh,th,rh,nh=U(()=>{St(),Kp(),Gr(),qt(),Gs=()=>!!E.wasm.proxy&&typeof document<"u",no=!1,hd=!1,fd=!1,sc=new Map,gi=(e,t)=>{let r=sc.get(e);r?r.push(t):sc.set(e,[t])},wi=()=>{if(no||!hd||fd||!On)throw new Error("worker not ready")},Xp=e=>{switch(e.data.type){case"init-wasm":no=!1,e.data.err?(fd=!0,Bc[1](e.data.err)):(hd=!0,Bc[0]()),nc&&(URL.revokeObjectURL(nc),nc=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=sc.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},Qp=async()=>{if(!hd){if(no)throw new Error("multiple calls to 'initWasm()' detected.");if(fd)throw new Error("previous call to 'initWasm()' failed.");if(no=!0,Gs())return new Promise((e,t)=>{On==null||On.terminate(),Bt().then(([r,n])=>{try{On=n,On.onerror=a=>t(a),On.onmessage=Xp,Bc=[e,t];let s={type:"init-wasm",in:E};On.postMessage(s),nc=r}catch(s){t(s)}},t)});try{await Xr(E.wasm),await Sc(E),hd=!0}catch(e){throw fd=!0,e}finally{no=!1}}},Yp=async e=>{if(Gs())return wi(),new Promise((t,r)=>{gi("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:E}};On.postMessage(n)});await Pc(E,e)},Zp=async e=>Gs()?(wi(),new Promise((t,r)=>{gi("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};On.postMessage(n,[e.buffer])})):rc(e),Jp=async(e,t)=>{if(Gs()){if(t!=null&&t.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return wi(),new Promise((r,n)=>{gi("create",[r,n]);let s={type:"create",in:{model:e,options:{...t}}},a=[];e instanceof Uint8Array&&a.push(e.buffer),On.postMessage(s,a)})}else return Ac(e,t)},eh=async e=>{if(Gs())return wi(),new Promise((t,r)=>{gi("release",[t,r]);let n={type:"release",in:e};On.postMessage(n)});Ic(e)},th=async(e,t,r,n,s,a)=>{if(Gs()){if(r.some(i=>i[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some(i=>i))throw new Error("pre-allocated output tensor is not supported for proxy.");return wi(),new Promise((i,u)=>{gi("run",[i,u]);let d=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:d,outputIndices:n,options:a}};On.postMessage(c,Dc(d))})}else return Oc(e,t,r,n,s,a)},rh=async e=>{if(Gs())return wi(),new Promise((t,r)=>{gi("end-profiling",[t,r]);let n={type:"end-profiling",in:e};On.postMessage(n)});zc(e)}}),Lc,sh,ih,Wf=U(()=>{St(),nh(),Yt(),dr(),ks(),Lc=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},sh=e=>{switch(e[3]){case"cpu":return new J(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!hs(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:s}=e[2];return J.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:s})}case"ml-tensor":{let t=e[0];if(!fs(t))throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);let{mlTensor:r,download:n,dispose:s}=e[2];return J.fromMLTensor(r,{dataType:t,dims:e[1],download:n,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},ih=class{async fetchModelAndCopyToWasmMemory(e){return Zp(await rs(e))}async loadModel(e,t){je();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames]=await Jp(r,t),Ve()}async dispose(){return eh(this.sessionId)}async run(e,t,r){je();let n=[],s=[];Object.entries(e).forEach(_=>{let l=_[0],x=_[1],T=this.inputNames.indexOf(l);if(T===-1)throw new Error(`invalid input '${l}'`);n.push(x),s.push(T)});let a=[],i=[];Object.entries(t).forEach(_=>{let l=_[0],x=_[1],T=this.outputNames.indexOf(l);if(T===-1)throw new Error(`invalid output '${l}'`);a.push(x),i.push(T)});let u=n.map((_,l)=>Lc(_,()=>`input "${this.inputNames[s[l]]}"`)),d=a.map((_,l)=>_?Lc(_,()=>`output "${this.outputNames[i[l]]}"`):null),c=await th(this.sessionId,s,u,i,d,r),g={};for(let _=0;_<c.length;_++)g[this.outputNames[i[_]]]=a[_]??sh(c[_]);return Ve(),g}startProfiling(){}endProfiling(){rh(this.sessionId)}}}),ah={};P(ah,{OnnxruntimeWebAssemblyBackend:()=>Nc,initializeFlags:()=>Rc,wasmBackend:()=>oh});var Rc,Nc,oh,Gf=U(()=>{St(),nh(),Wf(),qt(),Rc=()=>{if((typeof E.wasm.initTimeout!="number"||E.wasm.initTimeout<0)&&(E.wasm.initTimeout=0),E.wasm.simd===!1&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof E.wasm.proxy!="boolean"&&(E.wasm.proxy=!1),typeof E.wasm.trace!="boolean"&&(E.wasm.trace=!1),typeof E.wasm.numThreads!="number"||!Number.isInteger(E.wasm.numThreads)||E.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)E.wasm.numThreads=1;else{let e=typeof navigator>"u"?Ee("node:os").cpus().length:navigator.hardwareConcurrency;E.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Nc=class{async init(e){Rc(),await Qp(),await Yp(e)}async createInferenceSessionHandler(e,t){let r=new ih;return await r.loadModel(e,t),Promise.resolve(r)}},oh=new Nc});St(),St(),St();var qf="1.20.0-dev.20241016-2b8fc5529b",Hf=zt;{let e=(Gf(),D(ah)).wasmBackend;fe("webgpu",e,5),fe("webnn",e,5),fe("cpu",e,10),fe("wasm",e,10)}Object.defineProperty(E.versions,"web",{value:qf,enumerable:!0});/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */},"./src/backends/onnx.js":(It,Se,j)=>{var F;j.r(Se),j.d(Se,{Tensor:()=>Ee.Tensor,createInferenceSession:()=>O,deviceToExecutionProviders:()=>fe,isONNXProxy:()=>X,isONNXTensor:()=>ee});var he=j("./src/env.js"),be=j("?2ce3"),Ce=j("./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs"),Ee=j("./node_modules/onnxruntime-common/dist/esm/index.js");const U=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),P=[];let z,D;const q=Symbol.for("onnxruntime");if(q in globalThis)D=globalThis[q];else if(he.apis.IS_NODE_ENV){switch(D=be??(F||(F=j.t(be,2))),process.platform){case"win32":P.push("dml");break;case"linux":process.arch==="x64"&&P.push("cuda");break}P.push("cpu"),z=["cpu"]}else D=Ce,he.apis.IS_WEBNN_AVAILABLE&&P.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),he.apis.IS_WEBGPU_AVAILABLE&&P.push("webgpu"),P.push("wasm"),z=["wasm"];const re=D.InferenceSession;function fe(K=null){if(!K)return z;switch(K){case"auto":return P;case"gpu":return P.filter(N=>["webgpu","cuda","dml","webnn-gpu"].includes(N))}if(P.includes(K))return[U[K]??K];throw new Error(`Unsupported device: "${K}". Should be one of: ${P.join(", ")}.`)}let le=null;async function O(K,N,k){le&&await le;const R=re.create(K,N);le??(le=R);const E=await R;return E.config=k,E}function ee(K){return K instanceof D.Tensor}const ce=D==null?void 0:D.env;ce!=null&&ce.wasm&&(ce.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${he.env.version}/dist/`,ce.wasm.proxy=!1,(typeof crossOriginIsolated>"u"||!crossOriginIsolated)&&(ce.wasm.numThreads=1)),ce!=null&&ce.webgpu&&(ce.webgpu.powerPreference="high-performance");function X(){var K;return(K=ce==null?void 0:ce.wasm)==null?void 0:K.proxy}he.env.backends.onnx=ce},"./src/configs.js":(It,Se,j)=>{j.r(Se),j.d(Se,{AutoConfig:()=>P,PretrainedConfig:()=>U,getKeyValueShapes:()=>Ee});var F=j("./src/utils/core.js"),he=j("./src/utils/hub.js");async function be(z,D){return await(0,he.getModelJSON)(z,"config.json",!0,D)}function Ce(z){const D={};let q={};switch(z.model_type){case"llava":case"paligemma":case"florence2":q=Ce(z.text_config);break;case"moondream1":q=Ce(z.phi_config);break;case"musicgen":q=Ce(z.decoder);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":D.num_heads="n_head",D.num_layers="n_layer",D.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"phi":case"phi3":case"falcon":D.num_heads="num_attention_heads",D.num_layers="num_hidden_layers",D.hidden_size="hidden_size";break;case"llama":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":D.num_heads="num_key_value_heads",D.num_layers="num_hidden_layers",D.hidden_size="hidden_size",D.num_attention_heads="num_attention_heads";break;case"gemma":case"gemma2":D.num_heads="num_key_value_heads",D.num_layers="num_hidden_layers",D.dim_kv="head_dim";break;case"openelm":D.num_heads="num_kv_heads",D.num_layers="num_transformer_layers",D.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":D.num_heads="num_heads",D.num_layers="num_layers",D.hidden_size="hidden_size";break;case"bloom":D.num_heads="n_head",D.num_layers="n_layer",D.hidden_size="hidden_size";break;case"mpt":D.num_heads="n_heads",D.num_layers="n_layers",D.hidden_size="d_model";break;case"t5":case"mt5":case"longt5":D.num_decoder_layers="num_decoder_layers",D.num_decoder_heads="num_heads",D.decoder_dim_kv="d_kv",D.num_encoder_layers="num_layers",D.num_encoder_heads="num_heads",D.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":D.num_decoder_layers="decoder_layers",D.num_decoder_heads="decoder_attention_heads",D.decoder_hidden_size="d_model",D.num_encoder_layers="encoder_layers",D.num_encoder_heads="encoder_attention_heads",D.encoder_hidden_size="d_model";break;case"speecht5":D.num_decoder_layers="decoder_layers",D.num_decoder_heads="decoder_attention_heads",D.decoder_hidden_size="hidden_size",D.num_encoder_layers="encoder_layers",D.num_encoder_heads="encoder_attention_heads",D.encoder_hidden_size="hidden_size";break;case"trocr":D.num_encoder_layers=D.num_decoder_layers="decoder_layers",D.num_encoder_heads=D.num_decoder_heads="decoder_attention_heads",D.encoder_hidden_size=D.decoder_hidden_size="d_model";break;case"musicgen_decoder":D.num_encoder_layers=D.num_decoder_layers="num_hidden_layers",D.num_encoder_heads=D.num_decoder_heads="num_attention_heads",D.encoder_hidden_size=D.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const fe=Ce(z.decoder),le="num_decoder_layers"in fe,O=(0,F.pick)(z,["model_type","is_encoder_decoder"]);return le?(O.num_decoder_layers=fe.num_decoder_layers,O.num_decoder_heads=fe.num_decoder_heads,O.decoder_hidden_size=fe.decoder_hidden_size,O.num_encoder_layers=fe.num_encoder_layers,O.num_encoder_heads=fe.num_encoder_heads,O.encoder_hidden_size=fe.encoder_hidden_size):(O.num_layers=fe.num_layers,O.num_heads=fe.num_heads,O.hidden_size=fe.hidden_size),O}const re={...q,...(0,F.pick)(z,["model_type","multi_query","is_encoder_decoder"])};for(const fe in D)re[fe]=z[D[fe]];return re}function Ee(z,{prefix:D="past_key_values"}={}){const q={},re=z.normalized_config,fe=1;if(re.is_encoder_decoder&&"num_encoder_heads"in re&&"num_decoder_heads"in re){const le=re.encoder_dim_kv??re.encoder_hidden_size/re.num_encoder_heads,O=re.decoder_dim_kv??re.decoder_hidden_size/re.num_decoder_heads,ee=[fe,re.num_encoder_heads,0,le],ce=[fe,re.num_decoder_heads,0,O];for(let X=0;X<re.num_decoder_layers;++X)q[`${D}.${X}.encoder.key`]=ee,q[`${D}.${X}.encoder.value`]=ee,q[`${D}.${X}.decoder.key`]=ce,q[`${D}.${X}.decoder.value`]=ce}else{const le=re.num_heads,O=re.num_layers,ee=re.dim_kv??re.hidden_size/(re.num_attention_heads??le);if(re.model_type==="falcon"){const ce=[fe*le,0,ee];for(let X=0;X<O;++X)q[`${D}.${X}.key`]=ce,q[`${D}.${X}.value`]=ce}else if(re.multi_query){const ce=[fe*le,0,2*ee];for(let X=0;X<O;++X)q[`${D}.${X}.key_value`]=ce}else if(re.model_type==="bloom"){const ce=[fe*le,ee,0],X=[fe*le,0,ee];for(let K=0;K<O;++K)q[`${D}.${K}.key`]=ce,q[`${D}.${K}.value`]=X}else if(re.model_type==="openelm")for(let ce=0;ce<O;++ce){const X=[fe,le[ce],0,ee];q[`${D}.${ce}.key`]=X,q[`${D}.${ce}.value`]=X}else{const ce=[fe,le,0,ee];for(let X=0;X<O;++X)q[`${D}.${X}.key`]=ce,q[`${D}.${X}.value`]=ce}}return q}class U{constructor(D){Me(this,"model_type",null);Me(this,"is_encoder_decoder",!1);Me(this,"max_position_embeddings");Me(this,"transformers.js_config");Object.assign(this,D),this.normalized_config=Ce(this)}static async from_pretrained(D,{progress_callback:q=null,config:re=null,cache_dir:fe=null,local_files_only:le=!1,revision:O="main"}={}){re&&!(re instanceof U)&&(re=new U(re));const ee=re??await be(D,{progress_callback:q,config:re,cache_dir:fe,local_files_only:le,revision:O});return new this(ee)}}class P{static async from_pretrained(...D){return U.from_pretrained(...D)}}},"./src/env.js":(It,Se,j)=>{var E;j.r(Se),j.d(Se,{apis:()=>O,env:()=>k});var F=j("?569f"),he=j("?3f59"),be=j("?154a");const Ce="3.0.0",Ee=typeof self<"u",U=Ee&&self.constructor.name==="DedicatedWorkerGlobalScope",P=Ee&&"caches"in self,z=typeof navigator<"u"&&"gpu"in navigator,D=typeof navigator<"u"&&"ml"in navigator,q=typeof process<"u",re=q&&((E=process==null?void 0:process.release)==null?void 0:E.name)==="node",fe=!R(F),le=!R(he),O=Object.freeze({IS_BROWSER_ENV:Ee,IS_WEBWORKER_ENV:U,IS_WEB_CACHE_AVAILABLE:P,IS_WEBGPU_AVAILABLE:z,IS_WEBNN_AVAILABLE:D,IS_PROCESS_AVAILABLE:q,IS_NODE_ENV:re,IS_FS_AVAILABLE:fe,IS_PATH_AVAILABLE:le}),ee=fe&&le,ce=ee?he.dirname(he.dirname(be.fileURLToPath(self.location.href))):"./",X=ee?he.join(ce,"/.cache/"):null,K="/models/",N=ee?he.join(ce,K):K,k={version:Ce,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!Ee,localModelPath:N,useFS:fe,useBrowserCache:P,useFSCache:fe,cacheDir:X,useCustomCache:!1,customCache:null};function R(de){return Object.keys(de).length===0}},"./src/generation/configuration_utils.js":(It,Se,j)=>{j.r(Se),j.d(Se,{GenerationConfig:()=>he});var F=j("./src/utils/core.js");class he{constructor(Ce){Me(this,"max_length",20);Me(this,"max_new_tokens",null);Me(this,"min_length",0);Me(this,"min_new_tokens",null);Me(this,"early_stopping",!1);Me(this,"max_time",null);Me(this,"do_sample",!1);Me(this,"num_beams",1);Me(this,"num_beam_groups",1);Me(this,"penalty_alpha",null);Me(this,"use_cache",!0);Me(this,"temperature",1);Me(this,"top_k",50);Me(this,"top_p",1);Me(this,"typical_p",1);Me(this,"epsilon_cutoff",0);Me(this,"eta_cutoff",0);Me(this,"diversity_penalty",0);Me(this,"repetition_penalty",1);Me(this,"encoder_repetition_penalty",1);Me(this,"length_penalty",1);Me(this,"no_repeat_ngram_size",0);Me(this,"bad_words_ids",null);Me(this,"force_words_ids",null);Me(this,"renormalize_logits",!1);Me(this,"constraints",null);Me(this,"forced_bos_token_id",null);Me(this,"forced_eos_token_id",null);Me(this,"remove_invalid_values",!1);Me(this,"exponential_decay_length_penalty",null);Me(this,"suppress_tokens",null);Me(this,"begin_suppress_tokens",null);Me(this,"forced_decoder_ids",null);Me(this,"guidance_scale",null);Me(this,"num_return_sequences",1);Me(this,"output_attentions",!1);Me(this,"output_hidden_states",!1);Me(this,"output_scores",!1);Me(this,"return_dict_in_generate",!1);Me(this,"pad_token_id",null);Me(this,"bos_token_id",null);Me(this,"eos_token_id",null);Me(this,"encoder_no_repeat_ngram_size",0);Me(this,"decoder_start_token_id",null);Me(this,"generation_kwargs",{});Object.assign(this,(0,F.pick)(Ce,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(It,Se,j)=>{j.r(Se),j.d(Se,{ClassifierFreeGuidanceLogitsProcessor:()=>ee,ForcedBOSTokenLogitsProcessor:()=>U,ForcedEOSTokenLogitsProcessor:()=>P,LogitsProcessor:()=>be,LogitsProcessorList:()=>Ee,LogitsWarper:()=>Ce,MinLengthLogitsProcessor:()=>fe,MinNewTokensLengthLogitsProcessor:()=>le,NoBadWordsLogitsProcessor:()=>O,NoRepeatNGramLogitsProcessor:()=>q,RepetitionPenaltyLogitsProcessor:()=>re,SuppressTokensAtBeginLogitsProcessor:()=>z,TemperatureLogitsWarper:()=>ce,TopKLogitsWarper:()=>K,TopPLogitsWarper:()=>X,WhisperTimeStampLogitsProcessor:()=>D});var F=j("./src/utils/generic.js");j("./src/utils/tensor.js");var he=j("./src/utils/maths.js");class be extends F.Callable{_call(k,R){throw Error("`_call` should be implemented in a subclass")}}class Ce extends F.Callable{_call(k,R){throw Error("`_call` should be implemented in a subclass")}}class Ee extends F.Callable{constructor(){super(),this.processors=[]}push(k){this.processors.push(k)}extend(k){this.processors.push(...k)}_call(k,R){let E=R;for(const de of this.processors)E=de(k,E);return E}[Symbol.iterator](){return this.processors.values()}}class U extends be{constructor(k){super(),this.bos_token_id=k}_call(k,R){for(let E=0;E<k.length;++E)if(k[E].length===1){const de=R[E].data;de.fill(-1/0),de[this.bos_token_id]=0}return R}}class P extends be{constructor(k,R){super(),this.max_length=k,this.eos_token_id=Array.isArray(R)?R:[R]}_call(k,R){for(let E=0;E<k.length;++E)if(k[E].length===this.max_length-1){const de=R[E].data;de.fill(-1/0);for(const we of this.eos_token_id)de[we]=0}return R}}class z extends be{constructor(k,R){super(),this.begin_suppress_tokens=k,this.begin_index=R}_call(k,R){for(let E=0;E<k.length;++E)if(k[E].length===this.begin_index){const de=R[E].data;for(const we of this.begin_suppress_tokens)de[we]=-1/0}return R}}class D extends be{constructor(k,R){super(),this.eos_token_id=Array.isArray(k.eos_token_id)?k.eos_token_id[0]:k.eos_token_id,this.no_timestamps_token_id=k.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=R.length,R.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=k.max_initial_timestamp_index}_call(k,R){for(let E=0;E<k.length;++E){const de=R[E].data;if(de[this.no_timestamps_token_id]=-1/0,k[E].length===this.begin_index-1){de.fill(-1/0),de[this.timestamp_begin]=0;continue}const we=k[E].slice(this.begin_index),$e=we.length>=1&&we[we.length-1]>=this.timestamp_begin,Oe=we.length<2||we[we.length-2]>=this.timestamp_begin;if($e&&(Oe?de.subarray(this.timestamp_begin).fill(-1/0):de.subarray(0,this.eos_token_id).fill(-1/0)),k[E].length===this.begin_index&&this.max_initial_timestamp_index!==null){const lt=this.timestamp_begin+this.max_initial_timestamp_index;de.subarray(lt+1).fill(-1/0)}const Fe=(0,he.log_softmax)(de),nt=Math.log(Fe.subarray(this.timestamp_begin).map(Math.exp).reduce((lt,me)=>lt+me)),Je=(0,he.max)(Fe.subarray(0,this.timestamp_begin))[0];nt>Je&&de.subarray(0,this.timestamp_begin).fill(-1/0)}return R}}class q extends be{constructor(k){super(),this.no_repeat_ngram_size=k}getNgrams(k){const R=k.length,E=[];for(let we=0;we<R+1-this.no_repeat_ngram_size;++we){const $e=[];for(let Oe=0;Oe<this.no_repeat_ngram_size;++Oe)$e.push(k[we+Oe]);E.push($e.map(Number))}const de=new Map;for(const we of E){const $e=we.slice(0,we.length-1),Oe=JSON.stringify($e),Fe=de.get(Oe)??[];Fe.push(we[we.length-1]),de.set(Oe,Fe)}return de}getGeneratedNgrams(k,R){const E=R.slice(R.length+1-this.no_repeat_ngram_size,R.length);return k.get(JSON.stringify(E.map(Number)))??[]}calcBannedNgramTokens(k){const R=[];if(k.length+1<this.no_repeat_ngram_size)return R;{const E=this.getNgrams(k);return this.getGeneratedNgrams(E,k)}}_call(k,R){for(let E=0;E<k.length;++E){const de=R[E].data,we=this.calcBannedNgramTokens(k[E]);for(const $e of we)de[$e]=-1/0}return R}}class re extends be{constructor(k){super(),this.penalty=k}_call(k,R){for(let E=0;E<k.length;++E){const de=R[E].data;for(const we of k[E]){const $e=Number(we);de[$e]<0?de[$e]*=this.penalty:de[$e]/=this.penalty}}return R}}class fe extends be{constructor(k,R){super(),this.min_length=k,this.eos_token_id=Array.isArray(R)?R:[R]}_call(k,R){for(let E=0;E<k.length;++E)if(k[E].length<this.min_length){const de=R[E].data;for(const we of this.eos_token_id)de[we]=-1/0}return R}}class le extends be{constructor(k,R,E){super(),this.prompt_length_to_skip=k,this.min_new_tokens=R,this.eos_token_id=Array.isArray(E)?E:[E]}_call(k,R){for(let E=0;E<k.length;++E)if(k[E].length-this.prompt_length_to_skip<this.min_new_tokens){const we=R[E].data;for(const $e of this.eos_token_id)we[$e]=-1/0}return R}}class O extends be{constructor(k,R){super(),this.bad_words_ids=k,this.eos_token_id=Array.isArray(R)?R:[R]}_call(k,R){for(let E=0;E<k.length;++E){const de=R[E].data,we=k[E];for(const $e of this.bad_words_ids){let Oe=!0;for(let Fe=1;Fe<=$e.length-1&&$e.length<we.length;++Fe)if($e.at(-Fe-1)!=we.at(-Fe)){Oe=!1;break}Oe&&(de[$e.at(-1)]=-1/0)}}return R}}class ee extends be{constructor(k){if(super(),k<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${k}.`);this.guidance_scale=k}_call(k,R){if(R.dims[0]!==2*k.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${R.dims[0]} for the logits and ${k.length} for the input ids.`);const E=k.length,de=R.slice([0,E],null),we=R.slice([E,R.dims[0]],null);for(let $e=0;$e<we.data.length;++$e)we.data[$e]+=(de.data[$e]-we.data[$e])*this.guidance_scale;return we}}class ce extends Ce{constructor(k){super(),this.temperature=k}_call(k,R){const E=R.data;for(let de=0;de<E.length;++de)E[de]/=this.temperature;return R}}class X extends Ce{constructor(k,{filter_value:R=-1/0,min_tokens_to_keep:E=1}={}){if(super(),k<0||k>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${k}`);if(!Number.isInteger(E)||E<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${E}`);this.top_p=k,this.filter_value=R,this.min_tokens_to_keep=E}}class K extends Ce{constructor(k,{filter_value:R=-1/0,min_tokens_to_keep:E=1}={}){if(super(),!Number.isInteger(k)||k<0)throw new Error(`\`top_k\` must be a positive integer, but is ${k}`);this.top_k=Math.max(k,E),this.filter_value=R}}},"./src/generation/logits_sampler.js":(It,Se,j)=>{j.r(Se),j.d(Se,{LogitsSampler:()=>Ce});var F=j("./src/utils/generic.js"),he=j("./src/utils/tensor.js"),be=j("./src/utils/maths.js");j("./src/generation/configuration_utils.js");class Ce extends F.Callable{constructor(D){super(),this.generation_config=D}async _call(D){return this.sample(D)}async sample(D){throw Error("sample should be implemented in subclasses.")}getLogits(D,q){let re=D.dims.at(-1),fe=D.data;if(q===-1)fe=fe.slice(-re);else{let le=q*re;fe=fe.slice(le,le+re)}return fe}randomSelect(D){let q=0;for(let fe=0;fe<D.length;++fe)q+=D[fe];let re=Math.random()*q;for(let fe=0;fe<D.length;++fe)if(re-=D[fe],re<=0)return fe;return 0}static getSampler(D){if(D.do_sample)return new U(D);if(D.num_beams>1)return new P(D);if(D.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${D.num_return_sequences}.`);return new Ee(D)}}class Ee extends Ce{async sample(D){const q=(0,be.max)(D.data)[1];return[[BigInt(q),0]]}}class U extends Ce{async sample(D){let q=D.dims.at(-1);this.generation_config.top_k>0&&(q=Math.min(this.generation_config.top_k,q));const[re,fe]=await(0,he.topk)(D,q),le=(0,be.softmax)(re.data);return Array.from({length:this.generation_config.num_beams},()=>{const O=this.randomSelect(le);return[fe.data[O],Math.log(le[O])]})}}class P extends Ce{async sample(D){let q=D.dims.at(-1);this.generation_config.top_k>0&&(q=Math.min(this.generation_config.top_k,q));const[re,fe]=await(0,he.topk)(D,q),le=(0,be.softmax)(re.data);return Array.from({length:this.generation_config.num_beams},(O,ee)=>[fe.data[ee],Math.log(le[ee])])}}},"./src/generation/stopping_criteria.js":(It,Se,j)=>{j.r(Se),j.d(Se,{EosTokenCriteria:()=>Ee,InterruptableStoppingCriteria:()=>U,MaxLengthCriteria:()=>Ce,StoppingCriteria:()=>he,StoppingCriteriaList:()=>be});var F=j("./src/utils/generic.js");class he extends F.Callable{_call(z,D){throw Error("StoppingCriteria needs to be subclassed")}}class be extends F.Callable{constructor(){super(),this.criteria=[]}push(z){this.criteria.push(z)}extend(z){z instanceof be?z=z.criteria:z instanceof he&&(z=[z]),this.criteria.push(...z)}_call(z,D){const q=new Array(z.length).fill(!1);for(const re of this.criteria){const fe=re(z,D);for(let le=0;le<q.length;++le)q[le]||(q[le]=fe[le])}return q}[Symbol.iterator](){return this.criteria.values()}}class Ce extends he{constructor(z,D=null){super(),this.max_length=z,this.max_position_embeddings=D}_call(z){return z.map(D=>D.length>=this.max_length)}}class Ee extends he{constructor(z){super(),Array.isArray(z)||(z=[z]),this.eos_token_id=z}_call(z,D){return z.map(q=>{const re=q.at(-1);return this.eos_token_id.some(fe=>re==fe)})}}class U extends he{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(z,D){return new Array(z.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(It,Se,j)=>{j.r(Se),j.d(Se,{BaseStreamer:()=>Ce,TextStreamer:()=>U,WhisperTextStreamer:()=>P});var F=j("./src/utils/core.js"),he=j("./src/tokenizers.js"),be=j("./src/env.js");class Ce{put(D){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const Ee=be.apis.IS_PROCESS_AVAILABLE?z=>process.stdout.write(z):z=>console.log(z);class U extends Ce{constructor(D,{skip_prompt:q=!1,callback_function:re=null,token_callback_function:fe=null,decode_kwargs:le={},...O}={}){super(),this.tokenizer=D,this.skip_prompt=q,this.callback_function=re??Ee,this.token_callback_function=fe,this.decode_kwargs={...le,...O},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(D){var le;if(D.length>1)throw Error("TextStreamer only supports batch size of 1");if(this.skip_prompt&&this.next_tokens_are_prompt){this.next_tokens_are_prompt=!1;return}const q=D[0];(le=this.token_callback_function)==null||le.call(this,q),this.token_cache=(0,F.mergeArrays)(this.token_cache,q);const re=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let fe;re.endsWith(`
`)?(fe=re.slice(this.print_len),this.token_cache=[],this.print_len=0):re.length>0&&(0,he.is_chinese_char)(re.charCodeAt(re.length-1))?(fe=re.slice(this.print_len),this.print_len+=fe.length):(fe=re.slice(this.print_len,re.lastIndexOf(" ")+1),this.print_len+=fe.length),this.on_finalized_text(fe,!1)}end(){let D;this.token_cache.length>0?(D=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):D="",this.next_tokens_are_prompt=!0,this.on_finalized_text(D,!0)}on_finalized_text(D,q){var re,fe;D.length>0&&((re=this.callback_function)==null||re.call(this,D)),q&&this.callback_function===Ee&&be.apis.IS_PROCESS_AVAILABLE&&((fe=this.callback_function)==null||fe.call(this,`
`))}}class P extends U{constructor(D,{skip_prompt:q=!1,callback_function:re=null,token_callback_function:fe=null,on_chunk_start:le=null,on_chunk_end:O=null,on_finalize:ee=null,time_precision:ce=.02,skip_special_tokens:X=!0,decode_kwargs:K={}}={}){super(D,{skip_prompt:q,callback_function:re,token_callback_function:fe,decode_kwargs:{skip_special_tokens:X,...K}}),this.timestamp_begin=D.timestamp_begin,this.on_chunk_start=le,this.on_chunk_end=O,this.on_finalize=ee,this.time_precision=ce,this.waiting_for_timestamp=!1}put(D){var re,fe;if(D.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const q=D[0];if(q.length===1){const le=Number(q[0])-this.timestamp_begin;if(le>=0){const O=le*this.time_precision;this.waiting_for_timestamp?(re=this.on_chunk_end)==null||re.call(this,O):(fe=this.on_chunk_start)==null||fe.call(this,O),this.waiting_for_timestamp=!this.waiting_for_timestamp,D=[[]]}}return super.put(D)}end(){var D;super.end(),(D=this.on_finalize)==null||D.call(this)}}},"./src/models.js":(It,Se,j)=>{j.r(Se),j.d(Se,{ASTForAudioClassification:()=>Zs,ASTModel:()=>Ut,ASTPreTrainedModel:()=>Nn,AlbertForMaskedLM:()=>Yt,AlbertForQuestionAnswering:()=>ms,AlbertForSequenceClassification:()=>fs,AlbertModel:()=>hs,AlbertPreTrainedModel:()=>Dn,AutoModel:()=>Ka,AutoModelForAudioClassification:()=>Vs,AutoModelForAudioFrameClassification:()=>Qa,AutoModelForCTC:()=>Kd,AutoModelForCausalLM:()=>Zu,AutoModelForDepthEstimation:()=>ud,AutoModelForDocumentQuestionAnswering:()=>Ya,AutoModelForImageClassification:()=>td,AutoModelForImageFeatureExtraction:()=>eo,AutoModelForImageMatting:()=>Za,AutoModelForImageSegmentation:()=>rd,AutoModelForImageToImage:()=>ld,AutoModelForMaskGeneration:()=>od,AutoModelForMaskedLM:()=>Hd,AutoModelForNormalEstimation:()=>Ja,AutoModelForObjectDetection:()=>id,AutoModelForQuestionAnswering:()=>Ju,AutoModelForSemanticSegmentation:()=>nd,AutoModelForSeq2SeqLM:()=>Ku,AutoModelForSequenceClassification:()=>Hu,AutoModelForSpeechSeq2Seq:()=>Xu,AutoModelForTextToSpectrogram:()=>Qu,AutoModelForTextToWaveform:()=>Yu,AutoModelForTokenClassification:()=>qd,AutoModelForUniversalSegmentation:()=>sd,AutoModelForVision2Seq:()=>ed,AutoModelForXVector:()=>Xa,AutoModelForZeroShotObjectDetection:()=>ad,BartForConditionalGeneration:()=>Y,BartForSequenceClassification:()=>oe,BartModel:()=>A,BartPretrainedModel:()=>m,BaseModelOutput:()=>ct,BeitForImageClassification:()=>fl,BeitModel:()=>hl,BeitPreTrainedModel:()=>na,BertForMaskedLM:()=>bt,BertForQuestionAnswering:()=>Ae,BertForSequenceClassification:()=>He,BertForTokenClassification:()=>J,BertModel:()=>mt,BertPreTrainedModel:()=>Be,BlenderbotForConditionalGeneration:()=>$r,BlenderbotModel:()=>tr,BlenderbotPreTrainedModel:()=>Ft,BlenderbotSmallForConditionalGeneration:()=>tn,BlenderbotSmallModel:()=>Ur,BlenderbotSmallPreTrainedModel:()=>lr,BloomForCausalLM:()=>Fs,BloomModel:()=>Go,BloomPreTrainedModel:()=>qi,CLIPModel:()=>po,CLIPPreTrainedModel:()=>is,CLIPSegForImageSegmentation:()=>bo,CLIPSegModel:()=>yo,CLIPSegPreTrainedModel:()=>Ei,CLIPTextModel:()=>wd,CLIPTextModelWithProjection:()=>xn,CLIPVisionModel:()=>yd,CLIPVisionModelWithProjection:()=>ho,CamembertForMaskedLM:()=>Zr,CamembertForQuestionAnswering:()=>ot,CamembertForSequenceClassification:()=>Dr,CamembertForTokenClassification:()=>en,CamembertModel:()=>Tr,CamembertPreTrainedModel:()=>dr,CausalLMOutput:()=>as,CausalLMOutputWithPast:()=>Qd,ChineseCLIPModel:()=>wo,ChineseCLIPPreTrainedModel:()=>go,ClapAudioModelWithProjection:()=>mu,ClapModel:()=>Ns,ClapPreTrainedModel:()=>ws,ClapTextModelWithProjection:()=>Fa,CodeGenForCausalLM:()=>So,CodeGenModel:()=>ko,CodeGenPreTrainedModel:()=>Cn,CohereForCausalLM:()=>In,CohereModel:()=>Oo,CoherePreTrainedModel:()=>Bi,ConvBertForMaskedLM:()=>$,ConvBertForQuestionAnswering:()=>et,ConvBertForSequenceClassification:()=>Z,ConvBertForTokenClassification:()=>pe,ConvBertModel:()=>H,ConvBertPreTrainedModel:()=>M,ConvNextForImageClassification:()=>wa,ConvNextModel:()=>mn,ConvNextPreTrainedModel:()=>Vn,ConvNextV2ForImageClassification:()=>Nl,ConvNextV2Model:()=>ya,ConvNextV2PreTrainedModel:()=>Ds,DPTForDepthEstimation:()=>Pl,DPTModel:()=>Sl,DPTPreTrainedModel:()=>ma,DebertaForMaskedLM:()=>Ie,DebertaForQuestionAnswering:()=>Qe,DebertaForSequenceClassification:()=>tt,DebertaForTokenClassification:()=>xe,DebertaModel:()=>ge,DebertaPreTrainedModel:()=>V,DebertaV2ForMaskedLM:()=>kt,DebertaV2ForQuestionAnswering:()=>Nt,DebertaV2ForSequenceClassification:()=>_t,DebertaV2ForTokenClassification:()=>Bt,DebertaV2Model:()=>gt,DebertaV2PreTrainedModel:()=>ft,DecisionTransformerModel:()=>Au,DecisionTransformerPreTrainedModel:()=>Pu,DeiTForImageClassification:()=>xl,DeiTModel:()=>vl,DeiTPreTrainedModel:()=>ua,DepthAnythingForDepthEstimation:()=>Il,DepthAnythingPreTrainedModel:()=>Al,DepthProForDepthEstimation:()=>Dl,DepthProPreTrainedModel:()=>zl,DetrForObjectDetection:()=>_l,DetrForSegmentation:()=>sa,DetrModel:()=>ml,DetrObjectDetectionOutput:()=>ia,DetrPreTrainedModel:()=>ei,DetrSegmentationOutput:()=>gl,Dinov2ForImageClassification:()=>ni,Dinov2Model:()=>jl,Dinov2PreTrainedModel:()=>ba,DistilBertForMaskedLM:()=>Ht,DistilBertForQuestionAnswering:()=>ut,DistilBertForSequenceClassification:()=>ye,DistilBertForTokenClassification:()=>rt,DistilBertModel:()=>qt,DistilBertPreTrainedModel:()=>Dt,DonutSwinModel:()=>ga,DonutSwinPreTrainedModel:()=>Zn,EfficientNetForImageClassification:()=>vu,EfficientNetModel:()=>Mu,EfficientNetPreTrainedModel:()=>fi,ElectraForMaskedLM:()=>ht,ElectraForQuestionAnswering:()=>St,ElectraForSequenceClassification:()=>Tt,ElectraForTokenClassification:()=>zt,ElectraModel:()=>Rt,ElectraPreTrainedModel:()=>Xe,EsmForMaskedLM:()=>Xr,EsmForSequenceClassification:()=>or,EsmForTokenClassification:()=>Gr,EsmModel:()=>Nr,EsmPreTrainedModel:()=>_r,FalconForCausalLM:()=>Od,FalconModel:()=>fu,FalconPreTrainedModel:()=>Ia,FastViTForImageClassification:()=>nl,FastViTModel:()=>rl,FastViTPreTrainedModel:()=>Ji,Florence2ForConditionalGeneration:()=>$i,Florence2PreTrainedModel:()=>co,GLPNForDepthEstimation:()=>Yn,GLPNModel:()=>Qn,GLPNPreTrainedModel:()=>Rl,GPT2LMHeadModel:()=>Pn,GPT2Model:()=>Mo,GPT2PreTrainedModel:()=>ki,GPTBigCodeForCausalLM:()=>Oi,GPTBigCodeModel:()=>Js,GPTBigCodePreTrainedModel:()=>Fi,GPTJForCausalLM:()=>An,GPTJModel:()=>bd,GPTJPreTrainedModel:()=>Ii,GPTNeoForCausalLM:()=>Co,GPTNeoModel:()=>To,GPTNeoPreTrainedModel:()=>Pi,GPTNeoXForCausalLM:()=>Eo,GPTNeoXModel:()=>$o,GPTNeoXPreTrainedModel:()=>Ai,Gemma2ForCausalLM:()=>Lo,Gemma2Model:()=>Bo,Gemma2PreTrainedModel:()=>Ri,GemmaForCausalLM:()=>Do,GemmaModel:()=>zo,GemmaPreTrainedModel:()=>Li,GraniteForCausalLM:()=>Fo,GraniteModel:()=>Io,GranitePreTrainedModel:()=>Di,GroupViTModel:()=>tl,GroupViTPreTrainedModel:()=>el,HieraForImageClassification:()=>Tl,HieraModel:()=>ca,HieraPreTrainedModel:()=>da,HubertForCTC:()=>ru,HubertForSequenceClassification:()=>ka,HubertModel:()=>Pd,HubertPreTrainedModel:()=>Sd,ImageMattingOutput:()=>dd,JAISLMHeadModel:()=>xo,JAISModel:()=>vo,JAISPreTrainedModel:()=>Si,LlamaForCausalLM:()=>Ao,LlamaModel:()=>Po,LlamaPreTrainedModel:()=>zi,LlavaForConditionalGeneration:()=>gs,LlavaPreTrainedModel:()=>uo,LongT5ForConditionalGeneration:()=>As,LongT5Model:()=>Ps,LongT5PreTrainedModel:()=>_s,M2M100ForConditionalGeneration:()=>ql,M2M100Model:()=>Bs,M2M100PreTrainedModel:()=>oi,MBartForCausalLM:()=>xt,MBartForConditionalGeneration:()=>wt,MBartForSequenceClassification:()=>Ct,MBartModel:()=>Ue,MBartPreTrainedModel:()=>_e,MPNetForMaskedLM:()=>Ts,MPNetForQuestionAnswering:()=>Es,MPNetForSequenceClassification:()=>Cs,MPNetForTokenClassification:()=>$s,MPNetModel:()=>xs,MPNetPreTrainedModel:()=>Hn,MT5ForConditionalGeneration:()=>ae,MT5Model:()=>Is,MT5PreTrainedModel:()=>ns,MarianMTModel:()=>Gl,MarianModel:()=>Cd,MarianPreTrainedModel:()=>va,MaskFormerForInstanceSegmentation:()=>Ll,MaskFormerModel:()=>Bl,MaskFormerPreTrainedModel:()=>_a,MaskedLMOutput:()=>dn,MistralForCausalLM:()=>Fd,MistralModel:()=>cu,MistralPreTrainedModel:()=>Pa,MobileBertForMaskedLM:()=>Vr,MobileBertForQuestionAnswering:()=>vs,MobileBertForSequenceClassification:()=>cs,MobileBertModel:()=>zn,MobileBertPreTrainedModel:()=>jr,MobileNetV1ForImageClassification:()=>Cu,MobileNetV1Model:()=>Tu,MobileNetV1PreTrainedModel:()=>xu,MobileNetV2ForImageClassification:()=>Bd,MobileNetV2Model:()=>$u,MobileNetV2PreTrainedModel:()=>La,MobileNetV3ForImageClassification:()=>ku,MobileNetV3Model:()=>Eu,MobileNetV3PreTrainedModel:()=>Ra,MobileNetV4ForImageClassification:()=>Su,MobileNetV4Model:()=>Ld,MobileNetV4PreTrainedModel:()=>Na,MobileViTForImageClassification:()=>ol,MobileViTModel:()=>al,MobileViTPreTrainedModel:()=>ea,MobileViTV2ForImageClassification:()=>ll,MobileViTV2Model:()=>Os,MobileViTV2PreTrainedModel:()=>ta,ModelOutput:()=>Ke,Moondream1ForConditionalGeneration:()=>cr,MptForCausalLM:()=>Ki,MptModel:()=>qo,MptPreTrainedModel:()=>Hi,MusicgenForCausalLM:()=>Dd,MusicgenForConditionalGeneration:()=>Ba,MusicgenModel:()=>vc,MusicgenPreTrainedModel:()=>Da,NomicBertModel:()=>Ze,NomicBertPreTrainedModel:()=>Ge,OPTForCausalLM:()=>Ko,OPTModel:()=>Ho,OPTPreTrainedModel:()=>Xi,OpenELMForCausalLM:()=>No,OpenELMModel:()=>Ro,OpenELMPreTrainedModel:()=>Ni,OwlViTForObjectDetection:()=>dl,OwlViTModel:()=>ul,OwlViTPreTrainedModel:()=>zs,Owlv2ForObjectDetection:()=>pl,Owlv2Model:()=>cl,Owlv2PreTrainedModel:()=>ra,Phi3ForCausalLM:()=>Wo,Phi3Model:()=>Uo,Phi3PreTrainedModel:()=>Vo,PhiForCausalLM:()=>Gi,PhiModel:()=>jo,PhiPreTrainedModel:()=>Wi,PreTrainedModel:()=>se,PretrainedMixin:()=>Ar,PvtForImageClassification:()=>vd,PvtModel:()=>Qo,PvtPreTrainedModel:()=>Yi,PyAnnoteForAudioFrameClassification:()=>Ed,PyAnnoteModel:()=>Ql,PyAnnotePreTrainedModel:()=>xa,QuestionAnsweringModelOutput:()=>cn,Qwen2ForCausalLM:()=>Ui,Qwen2Model:()=>Vi,Qwen2PreTrainedModel:()=>ji,RTDetrForObjectDetection:()=>oa,RTDetrModel:()=>wl,RTDetrObjectDetectionOutput:()=>yl,RTDetrPreTrainedModel:()=>aa,ResNetForImageClassification:()=>xd,ResNetModel:()=>Cl,ResNetPreTrainedModel:()=>pa,RoFormerForMaskedLM:()=>dt,RoFormerForQuestionAnswering:()=>Et,RoFormerForSequenceClassification:()=>yt,RoFormerForTokenClassification:()=>Pt,RoFormerModel:()=>Ve,RoFormerPreTrainedModel:()=>je,RobertaForMaskedLM:()=>gn,RobertaForQuestionAnswering:()=>rn,RobertaForSequenceClassification:()=>Mn,RobertaForTokenClassification:()=>ke,RobertaModel:()=>Er,RobertaPreTrainedModel:()=>ir,SamImageSegmentationOutput:()=>Wl,SamModel:()=>ai,SamPreTrainedModel:()=>Ma,SapiensForDepthEstimation:()=>Td,SapiensForNormalEstimation:()=>Ol,SapiensForSemanticSegmentation:()=>Fl,SapiensPreTrainedModel:()=>ri,SegformerForImageClassification:()=>wu,SegformerForSemanticSegmentation:()=>yu,SegformerModel:()=>gu,SegformerPreTrainedModel:()=>hi,Seq2SeqLMOutput:()=>Xd,SequenceClassifierOutput:()=>pr,SiglipModel:()=>fo,SiglipPreTrainedModel:()=>jn,SiglipTextModel:()=>mo,SiglipVisionModel:()=>_o,SpeechT5ForSpeechToText:()=>ou,SpeechT5ForTextToSpeech:()=>lu,SpeechT5HifiGan:()=>uu,SpeechT5Model:()=>Ad,SpeechT5PreTrainedModel:()=>pi,SqueezeBertForMaskedLM:()=>kn,SqueezeBertForQuestionAnswering:()=>ps,SqueezeBertForSequenceClassification:()=>Ln,SqueezeBertModel:()=>Kn,SqueezeBertPreTrainedModel:()=>ts,StableLmForCausalLM:()=>bu,StableLmModel:()=>zd,StableLmPreTrainedModel:()=>za,Starcoder2ForCausalLM:()=>hu,Starcoder2Model:()=>pu,Starcoder2PreTrainedModel:()=>Aa,Swin2SRForImageSuperResolution:()=>kl,Swin2SRModel:()=>El,Swin2SRPreTrainedModel:()=>fa,SwinForImageClassification:()=>Fn,SwinModel:()=>$l,SwinPreTrainedModel:()=>ha,T5ForConditionalGeneration:()=>Ss,T5Model:()=>ks,T5PreTrainedModel:()=>rs,TableTransformerForObjectDetection:()=>bl,TableTransformerModel:()=>la,TableTransformerObjectDetectionOutput:()=>Ml,TableTransformerPreTrainedModel:()=>ti,TokenClassifierOutput:()=>an,TrOCRForCausalLM:()=>du,TrOCRPreTrainedModel:()=>Id,UniSpeechForCTC:()=>Jl,UniSpeechForSequenceClassification:()=>ui,UniSpeechModel:()=>Zl,UniSpeechPreTrainedModel:()=>li,UniSpeechSatForAudioFrameClassification:()=>eu,UniSpeechSatForCTC:()=>Ca,UniSpeechSatForSequenceClassification:()=>$a,UniSpeechSatModel:()=>di,UniSpeechSatPreTrainedModel:()=>Ls,ViTForImageClassification:()=>Xo,ViTMAEModel:()=>Mr,ViTMAEPreTrainedModel:()=>Yo,ViTMSNForImageClassification:()=>Jo,ViTMSNModel:()=>Zo,ViTMSNPreTrainedModel:()=>Zi,ViTModel:()=>Md,ViTPreTrainedModel:()=>Qi,VisionEncoderDecoderModel:()=>Ci,VitMatteForImageMatting:()=>il,VitMattePreTrainedModel:()=>sl,VitsModel:()=>Oa,VitsModelOutput:()=>cd,VitsPreTrainedModel:()=>_u,Wav2Vec2BertForCTC:()=>kd,Wav2Vec2BertForSequenceClassification:()=>tu,Wav2Vec2BertModel:()=>Ea,Wav2Vec2BertPreTrainedModel:()=>ci,Wav2Vec2ForAudioFrameClassification:()=>$d,Wav2Vec2ForCTC:()=>Kl,Wav2Vec2ForSequenceClassification:()=>Xl,Wav2Vec2Model:()=>Hl,Wav2Vec2PreTrainedModel:()=>Un,WavLMForAudioFrameClassification:()=>au,WavLMForCTC:()=>su,WavLMForSequenceClassification:()=>iu,WavLMForXVector:()=>Sa,WavLMModel:()=>nu,WavLMPreTrainedModel:()=>Rs,WeSpeakerResNetModel:()=>Yl,WeSpeakerResNetPreTrainedModel:()=>Ta,WhisperForConditionalGeneration:()=>Ti,WhisperModel:()=>Wt,WhisperPreTrainedModel:()=>Ye,XLMForQuestionAnswering:()=>Qr,XLMForSequenceClassification:()=>Kt,XLMForTokenClassification:()=>fn,XLMModel:()=>Sn,XLMPreTrainedModel:()=>un,XLMRobertaForMaskedLM:()=>Mt,XLMRobertaForQuestionAnswering:()=>Xn,XLMRobertaForSequenceClassification:()=>gr,XLMRobertaForTokenClassification:()=>ss,XLMRobertaModel:()=>Pr,XLMRobertaPreTrainedModel:()=>fr,XLMWithLMHeadModel:()=>Rn,XVectorOutput:()=>to,YolosForObjectDetection:()=>ii,YolosModel:()=>Vl,YolosObjectDetectionOutput:()=>Ul,YolosPreTrainedModel:()=>si});var F=j("./src/configs.js"),he=j("./src/backends/onnx.js"),be=j("./src/utils/dtypes.js"),Ce=j("./src/utils/generic.js"),Ee=j("./src/utils/core.js"),U=j("./src/utils/hub.js"),P=j("./src/utils/constants.js"),z=j("./src/generation/logits_process.js"),D=j("./src/generation/configuration_utils.js"),q=j("./src/utils/tensor.js"),re=j("./src/utils/maths.js"),fe=j("./src/generation/stopping_criteria.js"),le=j("./src/generation/logits_sampler.js"),O=j("./src/env.js"),ee=j("./src/models/whisper/generation_whisper.js"),ce=j("./src/models/whisper/common_whisper.js");const X={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7},K=new Map,N=new Map,k=new Map;async function R(f,b,B){var pn;const ve=((pn=B.config)==null?void 0:pn["transformers.js_config"])??{};let Le=B.device??ve.device;Le&&typeof Le!="string"&&(Le.hasOwnProperty(b)?Le=Le[b]:(console.warn(`device not specified for "${b}". Using the default device.`),Le=null));const ze=Le??(O.apis.IS_NODE_ENV?"cpu":"wasm"),pt=(0,he.deviceToExecutionProviders)(ze);let $t=B.dtype??ve.dtype;typeof $t!="string"&&($t&&$t.hasOwnProperty(b)?$t=$t[b]:($t=be.DEFAULT_DEVICE_DTYPE_MAPPING[ze]??be.DATA_TYPES.fp32,console.warn(`dtype not specified for "${b}". Using the default dtype (${$t}) for this device (${ze}).`)));const Vt=$t;if(be.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(Vt)){if(Vt===be.DATA_TYPES.fp16&&ze==="webgpu"&&!await(0,be.isWebGpuFp16Supported)())throw new Error(`The device (${ze}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${Vt}. Should be one of: ${Object.keys(be.DATA_TYPES).join(", ")}`);const nr=ve.kv_cache_dtype?typeof ve.kv_cache_dtype=="string"?ve.kv_cache_dtype:ve.kv_cache_dtype[Vt]??"float32":void 0;if(nr&&!["float32","float16"].includes(nr))throw new Error(`Invalid kv_cache_dtype: ${nr}. Should be one of: float32, float16`);const kr={dtype:Vt,kv_cache_dtype:nr},Ir=be.DEFAULT_DTYPE_SUFFIX_MAPPING[Vt],wr=`${B.subfolder??""}/${b}${Ir}.onnx`,sr={...B.session_options};sr.executionProviders??(sr.executionProviders=pt);const Sr=ve.free_dimension_overrides;Sr?sr.freeDimensionOverrides??(sr.freeDimensionOverrides=Sr):ze.startsWith("webnn")&&!sr.freeDimensionOverrides&&console.warn('WebNN does not currently support dynamic shapes and requires `free_dimension_overrides` to be set in config.json as a field within "transformers.js_config". When `free_dimension_overrides` is not set, you may experience significant performance degradation.');const Cr=(0,U.getModelFile)(f,wr,!0,B),yr=B.use_external_data_format??ve.use_external_data_format;let Fr=[];if(yr&&(yr===!0||typeof yr=="object"&&yr.hasOwnProperty(b)&&yr[b]===!0)){if(O.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const qr=`${b}${Ir}.onnx_data`,Kr=`${B.subfolder??""}/${qr}`;Fr.push(new Promise(async(Yr,yn)=>{const Jn=await(0,U.getModelFile)(f,Kr,!0,B);Yr({path:qr,data:Jn})}))}else sr.externalData!==void 0&&(Fr=sr.externalData.map(async qr=>{if(typeof qr.data=="string"){const Kr=await(0,U.getModelFile)(f,qr.data,!0,B);return{...qr,data:Kr}}return qr}));if(Fr.length>0&&(sr.externalData=await Promise.all(Fr)),ze==="webgpu"){const qr=(0,F.getKeyValueShapes)(B.config,{prefix:"present"});if(Object.keys(qr).length>0&&!(0,he.isONNXProxy)()){const Kr={};for(const Yr in qr)Kr[Yr]="gpu-buffer";sr.preferredOutputLocation=Kr}}return{buffer:await Cr,session_options:sr,session_config:kr}}async function E(f,b,B){return Object.fromEntries(await Promise.all(Object.keys(b).map(async ve=>{const{buffer:Le,session_options:ze,session_config:pt}=await R(f,b[ve],B),$t=await(0,he.createInferenceSession)(Le,ze,pt);return[ve,$t]})))}async function de(f,b,B){return Object.fromEntries(await Promise.all(Object.keys(b).map(async ve=>{const Le=await(0,U.getModelJSON)(f,b[ve],!1,B);return[ve,Le]})))}function we(f,b){const B=Object.create(null),ve=[];for(const pt of f.inputNames){const $t=b[pt];if(!($t instanceof q.Tensor)){ve.push(pt);continue}B[pt]=(0,he.isONNXProxy)()?$t.clone():$t}if(ve.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${ve.join(", ")}.`);const Le=Object.keys(b).length,ze=f.inputNames.length;if(Le>ze){let pt=Object.keys(b).filter($t=>!f.inputNames.includes($t));console.warn(`WARNING: Too many inputs were provided (${Le} > ${ze}). The following inputs will be ignored: "${pt.join(", ")}".`)}return B}async function $e(f,b){const B=we(f,b);try{const ve=Object.fromEntries(Object.entries(B).map(([ze,pt])=>[ze,pt.ort_tensor]));let Le=await f.run(ve);return Le=Oe(Le),Le}catch(ve){throw console.error(`An error occurred during model execution: "${ve}".`),console.error("Inputs given to model:",B),ve}}function Oe(f){for(let b in f)(0,he.isONNXTensor)(f[b])?f[b]=new q.Tensor(f[b]):typeof f[b]=="object"&&Oe(f[b]);return f}function Fe(f){if(f instanceof q.Tensor)return f;if(f.length===0)throw Error("items must be non-empty");if(Array.isArray(f[0])){if(f.some(b=>b.length!==f[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new q.Tensor("int64",BigInt64Array.from(f.flat().map(b=>BigInt(b))),[f.length,f[0].length])}else return new q.Tensor("int64",BigInt64Array.from(f.map(b=>BigInt(b))),[1,f.length])}function nt(f){return new q.Tensor("bool",[f],[1])}async function Je(f,b){let{encoder_outputs:B,input_ids:ve,decoder_input_ids:Le,...ze}=b;if(!B){const $t=(0,Ee.pick)(b,f.sessions.model.inputNames);B=(await lt(f,$t)).last_hidden_state}return ze.input_ids=Le,ze.encoder_hidden_states=B,f.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(ze.encoder_attention_mask=b.attention_mask),await me(f,ze,!0)}async function lt(f,b){const B=f.sessions.model,ve=(0,Ee.pick)(b,B.inputNames);if(B.inputNames.includes("inputs_embeds")&&!ve.inputs_embeds){if(!b.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");ve.inputs_embeds=await f.encode_text({input_ids:b.input_ids})}return B.inputNames.includes("token_type_ids")&&!ve.token_type_ids&&(ve.token_type_ids=new q.Tensor("int64",new BigInt64Array(ve.input_ids.data.length),ve.input_ids.dims)),await $e(B,ve)}async function me(f,b,B=!1){const ve=f.sessions[B?"decoder_model_merged":"model"],{past_key_values:Le,...ze}=b;ve.inputNames.includes("use_cache_branch")&&(ze.use_cache_branch=nt(!!Le)),ve.inputNames.includes("position_ids")&&ze.attention_mask&&!ze.position_ids&&(ze.position_ids=ue(ze,Le)),f.addPastKeyValues(ze,Le);const pt=(0,Ee.pick)(ze,ve.inputNames);return await $e(ve,pt)}async function W(f,{input_ids:b=null,attention_mask:B=null,pixel_values:ve=null,position_ids:Le=null,inputs_embeds:ze=null,past_key_values:pt=null,generation_config:$t=null,logits_processor:Vt=null,...nr}){if(!ze){if(ze=await f.encode_text({input_ids:b}),ve&&b.dims[1]!==1){const Ir=await f.encode_image({pixel_values:ve});({inputs_embeds:ze,attention_mask:B}=f._merge_input_ids_with_image_features({image_features:Ir,inputs_embeds:ze,input_ids:b,attention_mask:B}))}else if(pt&&ve&&b.dims[1]===1){const Ir=b.dims[1],wr=Object.values(pt)[0].dims.at(-2);B=(0,q.cat)([(0,q.ones)([b.dims[0],wr]),B.slice(null,[B.dims[1]-Ir,B.dims[1]])],1)}}return await me(f,{inputs_embeds:ze,past_key_values:pt,attention_mask:B,position_ids:Le,generation_config:$t,logits_processor:Vt},!0)}function ue(f,b=null){const{input_ids:B,inputs_embeds:ve,attention_mask:Le}=f,[ze,pt]=Le.dims,$t=new BigInt64Array(Le.data.length);for(let nr=0;nr<ze;++nr){const kr=nr*pt;let Ir=BigInt(0);for(let wr=0;wr<pt;++wr){const sr=kr+wr;Le.data[sr]===0n?$t[sr]=BigInt(1):($t[sr]=Ir,Ir+=Le.data[sr])}}let Vt=new q.Tensor("int64",$t,Le.dims);if(b){const nr=-(B??ve).dims.at(1);Vt=Vt.slice(null,[nr,null])}return Vt}function Te(f,b,B,ve){if(B.past_key_values){const Le=Object.values(B.past_key_values)[0].dims.at(-2),{input_ids:ze,attention_mask:pt}=B;if(!(pt&&pt.dims[1]>ze.dims[1])){if(Le<ze.dims[1])B.input_ids=ze.slice(null,[Le,null]);else if(f.config.image_token_index!=null&&ze.data.some($t=>$t==f.config.image_token_index)){const $t=f.config.num_image_tokens;if(!$t)throw new Error("`num_image_tokens` is missing in the model configuration.");const Vt=ze.dims[1]-(Le-$t);B.input_ids=ze.slice(null,[-Vt,null]),B.attention_mask=(0,q.ones)([1,Le+Vt])}}}return B}function Ne(f,b,B,ve){return B.past_key_values&&(b=b.map(Le=>[Le.at(-1)])),{...B,decoder_input_ids:Fe(b)}}function at(f,...b){return f.config.is_encoder_decoder?Ne(f,...b):Te(f,...b)}class se extends Ce.Callable{constructor(B,ve,Le){super();Me(this,"main_input_name","input_ids");Me(this,"forward_params",["input_ids","attention_mask"]);this.config=B,this.sessions=ve,this.configs=Le;const ze=k.get(this.constructor),pt=K.get(ze);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,pt){case X.DecoderOnly:this.can_generate=!0,this._forward=me,this._prepare_inputs_for_generation=Te;break;case X.Seq2Seq:case X.Vision2Seq:case X.Musicgen:this.can_generate=!0,this._forward=Je,this._prepare_inputs_for_generation=Ne;break;case X.EncoderDecoder:this._forward=Je;break;case X.ImageTextToText:this.can_generate=!0,this._forward=W,this._prepare_inputs_for_generation=at;break;default:this._forward=lt;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){var ve;const B=[];for(const Le of Object.values(this.sessions))(ve=Le==null?void 0:Le.handler)!=null&&ve.dispose&&B.push(Le.handler.dispose());return await Promise.all(B)}static async from_pretrained(B,{progress_callback:ve=null,config:Le=null,cache_dir:ze=null,local_files_only:pt=!1,revision:$t="main",model_file_name:Vt=null,subfolder:nr="onnx",device:kr=null,dtype:Ir=null,use_external_data_format:wr=null,session_options:sr={}}={}){let Sr={progress_callback:ve,config:Le,cache_dir:ze,local_files_only:pt,revision:$t,model_file_name:Vt,subfolder:nr,device:kr,dtype:Ir,use_external_data_format:wr,session_options:sr};const Cr=k.get(this),yr=K.get(Cr);Le=Sr.config=await F.AutoConfig.from_pretrained(B,Sr);let Fr;if(yr===X.DecoderOnly)Fr=await Promise.all([E(B,{model:Sr.model_file_name??"model"},Sr),de(B,{generation_config:"generation_config.json"},Sr)]);else if(yr===X.Seq2Seq||yr===X.Vision2Seq)Fr=await Promise.all([E(B,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Sr),de(B,{generation_config:"generation_config.json"},Sr)]);else if(yr===X.MaskGeneration)Fr=await Promise.all([E(B,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},Sr)]);else if(yr===X.EncoderDecoder)Fr=await Promise.all([E(B,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Sr)]);else if(yr===X.ImageTextToText){const Tn={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Le.is_encoder_decoder&&(Tn.model="encoder_model"),Fr=await Promise.all([E(B,Tn,Sr),de(B,{generation_config:"generation_config.json"},Sr)])}else yr===X.Musicgen?Fr=await Promise.all([E(B,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},Sr),de(B,{generation_config:"generation_config.json"},Sr)]):(yr!==X.EncoderOnly&&console.warn(`Model type for '${Cr??(Le==null?void 0:Le.model_type)}' not found, assuming encoder-only architecture. Please report this at ${P.GITHUB_ISSUE_URL}.`),Fr=await Promise.all([E(B,{model:Sr.model_file_name??"model"},Sr)]));return new this(Le,...Fr)}async _call(B){return await this.forward(B)}async forward(B){return await this._forward(this,B)}get generation_config(){var B;return((B=this.configs)==null?void 0:B.generation_config)??null}_get_logits_warper(B){const ve=new z.LogitsProcessorList;return B.temperature!==null&&B.temperature!==1&&ve.push(new z.TemperatureLogitsWarper(B.temperature)),B.top_k!==null&&B.top_k!==0&&ve.push(new z.TopKLogitsWarper(B.top_k)),B.top_p!==null&&B.top_p<1&&ve.push(new z.TopPLogitsWarper(B.top_p)),ve}_get_logits_processor(B,ve,Le=null){const ze=new z.LogitsProcessorList;if(B.repetition_penalty!==null&&B.repetition_penalty!==1&&ze.push(new z.RepetitionPenaltyLogitsProcessor(B.repetition_penalty)),B.no_repeat_ngram_size!==null&&B.no_repeat_ngram_size>0&&ze.push(new z.NoRepeatNGramLogitsProcessor(B.no_repeat_ngram_size)),B.bad_words_ids!==null&&ze.push(new z.NoBadWordsLogitsProcessor(B.bad_words_ids,B.eos_token_id)),B.min_length!==null&&B.eos_token_id!==null&&B.min_length>0&&ze.push(new z.MinLengthLogitsProcessor(B.min_length,B.eos_token_id)),B.min_new_tokens!==null&&B.eos_token_id!==null&&B.min_new_tokens>0&&ze.push(new z.MinNewTokensLengthLogitsProcessor(ve,B.min_new_tokens,B.eos_token_id)),B.forced_bos_token_id!==null&&ze.push(new z.ForcedBOSTokenLogitsProcessor(B.forced_bos_token_id)),B.forced_eos_token_id!==null&&ze.push(new z.ForcedEOSTokenLogitsProcessor(B.max_length,B.forced_eos_token_id)),B.begin_suppress_tokens!==null){const pt=ve>1||B.forced_bos_token_id===null?ve:ve+1;ze.push(new z.SuppressTokensAtBeginLogitsProcessor(B.begin_suppress_tokens,pt))}return B.guidance_scale!==null&&B.guidance_scale>1&&ze.push(new z.ClassifierFreeGuidanceLogitsProcessor(B.guidance_scale)),Le!==null&&ze.extend(Le),ze}_prepare_generation_config(B,ve,Le=D.GenerationConfig){const ze={...this.config};for(const $t of["decoder","generator","text_config"])$t in ze&&Object.assign(ze,ze[$t]);const pt=new Le(ze);return Object.assign(pt,this.generation_config??{}),B&&Object.assign(pt,B),ve&&Object.assign(pt,(0,Ee.pick)(ve,Object.getOwnPropertyNames(pt))),pt}_get_stopping_criteria(B,ve=null){const Le=new fe.StoppingCriteriaList;return B.max_length!==null&&Le.push(new fe.MaxLengthCriteria(B.max_length,this.config.max_position_embeddings??null)),B.eos_token_id!==null&&Le.push(new fe.EosTokenCriteria(B.eos_token_id)),ve&&Le.extend(ve),Le}_validate_model_class(){if(!this.can_generate){const B=[mi,Ua,Va,ja],ve=k.get(this.constructor),Le=new Set,ze=this.config.model_type;for(const $t of B){const Vt=$t.get(ze);Vt&&Le.add(Vt[0])}let pt=`The current model class (${ve}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Le.size>0&&(pt+=` Please use the following class instead: ${[...Le].join(", ")}`),Error(pt)}}prepare_inputs_for_generation(...B){return this._prepare_inputs_for_generation(this,...B)}_update_model_kwargs_for_generation({generated_input_ids:B,outputs:ve,model_inputs:Le,is_encoder_decoder:ze}){return Le.past_key_values=this.getPastKeyValues(ve,Le.past_key_values),Le.input_ids=new q.Tensor("int64",B.flat(),[B.length,1]),ze||(Le.attention_mask=(0,q.cat)([Le.attention_mask,(0,q.ones)([Le.attention_mask.dims[0],1])],1)),Le.position_ids=null,Le}_prepare_model_inputs({inputs:B,bos_token_id:ve,model_kwargs:Le}){const ze=(0,Ee.pick)(Le,this.forward_params),pt=this.main_input_name;if(pt in ze){if(B)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else ze[pt]=B;return{inputs_tensor:ze[pt],model_inputs:ze,model_input_name:pt}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:B,model_inputs:ve,model_input_name:Le,generation_config:ze}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!ve.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:$t,pixel_values:Vt,attention_mask:nr,...kr}=ve,Ir=await this._prepare_inputs_embeds(ve);ve={...kr,...(0,Ee.pick)(Ir,["inputs_embeds","attention_mask"])}}let{last_hidden_state:pt}=await lt(this,ve);if(ze.guidance_scale!==null&&ze.guidance_scale>1)pt=(0,q.cat)([pt,(0,q.full_like)(pt,0)],0),"attention_mask"in ve&&(ve.attention_mask=(0,q.cat)([ve.attention_mask,(0,q.zeros_like)(ve.attention_mask)],0));else if(ve.decoder_input_ids){const $t=Fe(ve.decoder_input_ids).dims[0];if($t!==pt.dims[0]){if(pt.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${pt.dims[0]}) than the decoder inputs (${$t}).`);pt=(0,q.cat)(Array.from({length:$t},()=>pt),0)}}return ve.encoder_outputs=pt,ve}_prepare_decoder_input_ids_for_generation({batch_size:B,model_input_name:ve,model_kwargs:Le,decoder_start_token_id:ze,bos_token_id:pt,generation_config:$t}){let{decoder_input_ids:Vt,...nr}=Le;if(Vt)Array.isArray(Vt[0])||(Vt=Array.from({length:B},()=>Vt));else if(ze??(ze=pt),this.config.model_type==="musicgen")Vt=Array.from({length:B*this.config.decoder.num_codebooks},()=>[ze]);else if(Array.isArray(ze)){if(ze.length!==B)throw new Error(`\`decoder_start_token_id\` expcted to have length ${B} but got ${ze.length}`);Vt=ze}else Vt=Array.from({length:B},()=>[ze]);return Vt=Fe(Vt),Le.decoder_attention_mask=(0,q.ones_like)(Vt),{input_ids:Vt,model_inputs:nr}}async generate({inputs:B=null,generation_config:ve=null,logits_processor:Le=null,stopping_criteria:ze=null,streamer:pt=null,...$t}){this._validate_model_class(),ve=this._prepare_generation_config(ve,$t);let{inputs_tensor:Vt,model_inputs:nr,model_input_name:kr}=this._prepare_model_inputs({inputs:B,model_kwargs:$t});const Ir=this.config.is_encoder_decoder;Ir&&("encoder_outputs"in nr||(nr=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Vt,model_inputs:nr,model_input_name:kr,generation_config:ve})));let wr;Ir?{input_ids:wr,model_inputs:nr}=this._prepare_decoder_input_ids_for_generation({batch_size:nr[kr].dims.at(0),model_input_name:kr,model_kwargs:nr,decoder_start_token_id:ve.decoder_start_token_id,bos_token_id:ve.bos_token_id,generation_config:ve}):wr=nr[kr];let sr=wr.dims.at(-1);ve.max_new_tokens!==null&&(ve.max_length=sr+ve.max_new_tokens);const Sr=this._get_logits_processor(ve,sr,Le),Cr=this._get_stopping_criteria(ve,ze),yr=nr[kr].dims.at(0),Fr=le.LogitsSampler.getSampler(ve),Tn=new Array(yr).fill(0),pn=wr.tolist();pt&&pt.put(pn);let qr,Kr={};for(;;){if(nr=this.prepare_inputs_for_generation(pn,nr,ve),qr=await this.forward(nr),ve.output_attentions&&ve.return_dict_in_generate){const Bn=this.getAttentions(qr);for(const Us in Bn)Us in Kr||(Kr[Us]=[]),Kr[Us].push(Bn[Us])}const Jn=qr.logits.slice(null,-1,null),_i=Sr(pn,Jn),ro=[];for(let Bn=0;Bn<_i.dims.at(0);++Bn){const Us=_i[Bn],Yd=await Fr(Us);for(const[Zd,Jd]of Yd){const ec=BigInt(Zd);Tn[Bn]+=Jd,pn[Bn].push(ec),ro.push([ec]);break}}if(pt&&pt.put(ro),Cr(pn).every(Bn=>Bn))break;nr=this._update_model_kwargs_for_generation({generated_input_ids:ro,outputs:qr,model_inputs:nr,is_encoder_decoder:Ir})}pt&&pt.end();const Yr=this.getPastKeyValues(qr,nr.past_key_values,!0),yn=new q.Tensor("int64",pn.flat(),[pn.length,pn[0].length]);if(ve.return_dict_in_generate)return{sequences:yn,past_key_values:Yr,...Kr};for(const Jn of Object.values(qr))Jn.location==="gpu-buffer"&&Jn.dispose();return yn}getPastKeyValues(B,ve,Le=!1){const ze=Object.create(null);for(const pt in B)if(pt.startsWith("present")){const $t=pt.replace("present","past_key_values"),Vt=pt.includes("encoder");if(Vt&&ve?ze[$t]=ve[$t]:ze[$t]=B[pt],ve&&(!Vt||Le)){const nr=ve[$t];nr.location==="gpu-buffer"&&nr.dispose()}}return ze}getAttentions(B){const ve={};for(const Le of["cross_attentions","encoder_attentions","decoder_attentions"])for(const ze in B)ze.startsWith(Le)&&(Le in ve||(ve[Le]=[]),ve[Le].push(B[ze]));return ve}addPastKeyValues(B,ve){var Le;if(ve)Object.assign(B,ve);else{const ze=this.sessions.decoder_model_merged??this.sessions.model,pt=((Le=ze==null?void 0:ze.config)==null?void 0:Le.kv_cache_dtype)??"float32",$t=pt==="float16"?new Uint16Array:[],Vt=(0,F.getKeyValueShapes)(this.config);for(const nr in Vt)B[nr]=new q.Tensor(pt,$t,Vt[nr])}}async encode_image({pixel_values:B}){const ve=(await $e(this.sessions.vision_encoder,{pixel_values:B})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${ve.dims[1]}).`),this.config.num_image_tokens=ve.dims[1]),ve}async encode_text({input_ids:B}){return(await $e(this.sessions.embed_tokens,{input_ids:B})).inputs_embeds}}class Ke{}class ct extends Ke{constructor({last_hidden_state:b,hidden_states:B=null,attentions:ve=null}){super(),this.last_hidden_state=b,this.hidden_states=B,this.attentions=ve}}class Be extends se{}class mt extends Be{}class bt extends Be{async _call(b){return new dn(await super._call(b))}}class He extends Be{async _call(b){return new pr(await super._call(b))}}class J extends Be{async _call(b){return new an(await super._call(b))}}class Ae extends Be{async _call(b){return new cn(await super._call(b))}}class Ge extends se{}class Ze extends Ge{}class je extends se{}class Ve extends je{}class dt extends je{async _call(b){return new dn(await super._call(b))}}class yt extends je{async _call(b){return new pr(await super._call(b))}}class Pt extends je{async _call(b){return new an(await super._call(b))}}class Et extends je{async _call(b){return new cn(await super._call(b))}}class M extends se{}class H extends M{}class $ extends M{async _call(b){return new dn(await super._call(b))}}class Z extends M{async _call(b){return new pr(await super._call(b))}}class pe extends M{async _call(b){return new an(await super._call(b))}}class et extends M{async _call(b){return new cn(await super._call(b))}}class Xe extends se{}class Rt extends Xe{}class ht extends Xe{async _call(b){return new dn(await super._call(b))}}class Tt extends Xe{async _call(b){return new pr(await super._call(b))}}class zt extends Xe{async _call(b){return new an(await super._call(b))}}class St extends Xe{async _call(b){return new cn(await super._call(b))}}class dr extends se{}class Tr extends dr{}class Zr extends dr{async _call(b){return new dn(await super._call(b))}}class Dr extends dr{async _call(b){return new pr(await super._call(b))}}class en extends dr{async _call(b){return new an(await super._call(b))}}class ot extends dr{async _call(b){return new cn(await super._call(b))}}class V extends se{}class ge extends V{}class Ie extends V{async _call(b){return new dn(await super._call(b))}}class tt extends V{async _call(b){return new pr(await super._call(b))}}class xe extends V{async _call(b){return new an(await super._call(b))}}class Qe extends V{async _call(b){return new cn(await super._call(b))}}class ft extends se{}class gt extends ft{}class kt extends ft{async _call(b){return new dn(await super._call(b))}}class _t extends ft{async _call(b){return new pr(await super._call(b))}}class Bt extends ft{async _call(b){return new an(await super._call(b))}}class Nt extends ft{async _call(b){return new cn(await super._call(b))}}class Dt extends se{}class qt extends Dt{}class ye extends Dt{async _call(b){return new pr(await super._call(b))}}class rt extends Dt{async _call(b){return new an(await super._call(b))}}class ut extends Dt{async _call(b){return new cn(await super._call(b))}}class Ht extends Dt{async _call(b){return new dn(await super._call(b))}}class _r extends se{}class Nr extends _r{}class Xr extends _r{async _call(b){return new dn(await super._call(b))}}class or extends _r{async _call(b){return new pr(await super._call(b))}}class Gr extends _r{async _call(b){return new an(await super._call(b))}}class jr extends se{}class zn extends jr{}class Vr extends jr{async _call(b){return new dn(await super._call(b))}}class cs extends jr{async _call(b){return new pr(await super._call(b))}}class vs extends jr{async _call(b){return new cn(await super._call(b))}}class Hn extends se{}class xs extends Hn{}class Ts extends Hn{async _call(b){return new dn(await super._call(b))}}class Cs extends Hn{async _call(b){return new pr(await super._call(b))}}class $s extends Hn{async _call(b){return new an(await super._call(b))}}class Es extends Hn{async _call(b){return new cn(await super._call(b))}}class ts extends se{}class Kn extends ts{}class kn extends ts{async _call(b){return new dn(await super._call(b))}}class Ln extends ts{async _call(b){return new pr(await super._call(b))}}class ps extends ts{async _call(b){return new cn(await super._call(b))}}class Dn extends se{}class hs extends Dn{}class fs extends Dn{async _call(b){return new pr(await super._call(b))}}class ms extends Dn{async _call(b){return new cn(await super._call(b))}}class Yt extends Dn{async _call(b){return new dn(await super._call(b))}}class rs extends se{constructor(){super(...arguments);Me(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class ks extends rs{}class Ss extends rs{}class _s extends se{}class Ps extends _s{}class As extends _s{}class ns extends se{}class Is extends ns{}class ae extends ns{}class m extends se{}class A extends m{}class Y extends m{}class oe extends m{async _call(b){return new pr(await super._call(b))}}class _e extends se{}class Ue extends _e{}class wt extends _e{}class Ct extends _e{async _call(b){return new pr(await super._call(b))}}class xt extends _e{}class Ft extends se{}class tr extends Ft{}class $r extends Ft{}class lr extends se{}class Ur extends lr{}class tn extends lr{}class ir extends se{}class Er extends ir{}class gn extends ir{async _call(b){return new dn(await super._call(b))}}class Mn extends ir{async _call(b){return new pr(await super._call(b))}}class ke extends ir{async _call(b){return new an(await super._call(b))}}class rn extends ir{async _call(b){return new cn(await super._call(b))}}class un extends se{}class Sn extends un{}class Rn extends un{async _call(b){return new dn(await super._call(b))}}class Kt extends un{async _call(b){return new pr(await super._call(b))}}class fn extends un{async _call(b){return new an(await super._call(b))}}class Qr extends un{async _call(b){return new cn(await super._call(b))}}class fr extends se{}class Pr extends fr{}class Mt extends fr{async _call(b){return new dn(await super._call(b))}}class gr extends fr{async _call(b){return new pr(await super._call(b))}}class ss extends fr{async _call(b){return new an(await super._call(b))}}class Xn extends fr{async _call(b){return new cn(await super._call(b))}}class Nn extends se{}class Ut extends Nn{}class Zs extends Nn{}class Ye extends se{constructor(){super(...arguments);Me(this,"requires_attention_mask",!1);Me(this,"main_input_name","input_features");Me(this,"forward_params",["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class Wt extends Ye{}class Ti extends Ye{_prepare_generation_config(b,B){return super._prepare_generation_config(b,B,ee.WhisperGenerationConfig)}_retrieve_init_tokens(b){const B=[b.decoder_start_token_id];let ve=b.language;const Le=b.task;if(b.is_multilingual){ve||(console.warn("No language specified - defaulting to English (en)."),ve="en");const pt=`<|${(0,ce.whisper_language_to_code)(ve)}|>`;B.push(b.lang_to_id[pt]),B.push(b.task_to_id[Le??"transcribe"])}else if(ve||Le)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!b.return_timestamps&&b.no_timestamps_token_id&&B.at(-1)!==b.no_timestamps_token_id?B.push(b.no_timestamps_token_id):b.return_timestamps&&B.at(-1)===b.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),B.pop()),B.filter(ze=>ze!=null)}async generate({inputs:b=null,generation_config:B=null,logits_processor:ve=null,stopping_criteria:Le=null,...ze}){B=this._prepare_generation_config(B,ze);const pt=ze.decoder_input_ids??this._retrieve_init_tokens(B);if(B.return_timestamps&&(ve??(ve=new z.LogitsProcessorList),ve.push(new z.WhisperTimeStampLogitsProcessor(B,pt))),B.begin_suppress_tokens&&(ve??(ve=new z.LogitsProcessorList),ve.push(new z.SuppressTokensAtBeginLogitsProcessor(B.begin_suppress_tokens,pt.length))),B.return_token_timestamps){if(!B.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");B.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),B.output_attentions=!0,B.return_dict_in_generate=!0}const $t=await super.generate({inputs:b,generation_config:B,logits_processor:ve,decoder_input_ids:pt,...ze});return B.return_token_timestamps&&($t.token_timestamps=this._extract_token_timestamps($t,B.alignment_heads,B.num_frames)),$t}_extract_token_timestamps(b,B,ve=null,Le=.02){if(!b.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");ve==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let ze=this.config.median_filter_width;ze===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),ze=7);const pt=b.cross_attentions,$t=Array.from({length:this.config.decoder_layers},(Cr,yr)=>(0,q.cat)(pt.map(Fr=>Fr[yr]),2)),Vt=(0,q.stack)(B.map(([Cr,yr])=>{if(Cr>=$t.length)throw new Error(`Layer index ${Cr} is out of bounds for cross attentions (length ${$t.length}).`);return ve?$t[Cr].slice(null,yr,null,[0,ve]):$t[Cr].slice(null,yr)})).transpose(1,0,2,3),[nr,kr]=(0,q.std_mean)(Vt,-2,0,!0),Ir=Vt.clone();for(let Cr=0;Cr<Ir.dims[0];++Cr){const yr=Ir[Cr];for(let Fr=0;Fr<yr.dims[0];++Fr){const Tn=yr[Fr],pn=nr[Cr][Fr][0].data,qr=kr[Cr][Fr][0].data;for(let Kr=0;Kr<Tn.dims[0];++Kr){let Yr=Tn[Kr].data;for(let yn=0;yn<Yr.length;++yn)Yr[yn]=(Yr[yn]-qr[yn])/pn[yn];Yr.set((0,re.medianFilter)(Yr,ze))}}}const wr=[(0,q.mean)(Ir,1)],sr=b.sequences.dims,Sr=new q.Tensor("float32",new Float32Array(sr[0]*sr[1]),sr);for(let Cr=0;Cr<sr[0];++Cr){const yr=wr[Cr].neg().squeeze_(0),[Fr,Tn]=(0,re.dynamic_time_warping)(yr.tolist()),pn=Array.from({length:Fr.length-1},(Yr,yn)=>Fr[yn+1]-Fr[yn]),qr=(0,Ee.mergeArrays)([1],pn).map(Yr=>!!Yr),Kr=[];for(let Yr=0;Yr<qr.length;++Yr)qr[Yr]&&Kr.push(Tn[Yr]*Le);Sr[Cr].data.set(Kr,1)}return Sr}}class Ci extends se{constructor(){super(...arguments);Me(this,"main_input_name","pixel_values");Me(this,"forward_params",["pixel_values","input_ids","encoder_hidden_states","past_key_values"])}}class uo extends se{constructor(){super(...arguments);Me(this,"forward_params",["input_ids","pixel_values","attention_mask","position_ids","past_key_values"])}}class gs extends uo{_merge_input_ids_with_image_features({inputs_embeds:b,image_features:B,input_ids:ve,attention_mask:Le}){const ze=this.config.image_token_index,$t=ve.tolist().map(wr=>wr.findIndex(sr=>sr==ze)),Vt=$t.every(wr=>wr===-1),nr=$t.every(wr=>wr!==-1);if(!Vt&&!nr)throw new Error("Every input should contain either 0 or 1 image token.");if(Vt)return{inputs_embeds:b,attention_mask:Le};const kr=[],Ir=[];for(let wr=0;wr<$t.length;++wr){const sr=$t[wr],Sr=b[wr],Cr=B[wr],yr=Le[wr];kr.push((0,q.cat)([Sr.slice([0,sr]),Cr,Sr.slice([sr+1,Sr.dims[0]])],0)),Ir.push((0,q.cat)([yr.slice([0,sr]),(0,q.ones)([Cr.dims[0]]),yr.slice([sr+1,yr.dims[0]])],0))}return{inputs_embeds:(0,q.stack)(kr,0),attention_mask:(0,q.stack)(Ir,0)}}}class cr extends gs{}class co extends se{constructor(){super(...arguments);Me(this,"forward_params",["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"]);Me(this,"main_input_name","inputs_embeds")}}class $i extends co{_merge_input_ids_with_image_features({inputs_embeds:b,image_features:B,input_ids:ve,attention_mask:Le}){return{inputs_embeds:(0,q.cat)([B,b],1),attention_mask:(0,q.cat)([(0,q.ones)(B.dims.slice(0,2)),Le],1)}}async _prepare_inputs_embeds({input_ids:b,pixel_values:B,inputs_embeds:ve,attention_mask:Le}){if(!b&&!B)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let ze,pt;return b&&(ze=await this.encode_text({input_ids:b})),B&&(pt=await this.encode_image({pixel_values:B})),ze&&pt?{inputs_embeds:ve,attention_mask:Le}=this._merge_input_ids_with_image_features({inputs_embeds:ze,image_features:pt,input_ids:b,attention_mask:Le}):ve=ze||pt,{inputs_embeds:ve,attention_mask:Le}}async forward({input_ids:b,pixel_values:B,attention_mask:ve,decoder_input_ids:Le,decoder_attention_mask:ze,encoder_outputs:pt,past_key_values:$t,inputs_embeds:Vt,decoder_inputs_embeds:nr}){if(Vt||({inputs_embeds:Vt,attention_mask:ve}=await this._prepare_inputs_embeds({input_ids:b,pixel_values:B,inputs_embeds:Vt,attention_mask:ve})),!pt){let{last_hidden_state:wr}=await lt(this,{inputs_embeds:Vt,attention_mask:ve});pt=wr}if(!nr){if(!Le)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");nr=await this.encode_text({input_ids:Le})}return await me(this,{inputs_embeds:nr,attention_mask:ze,encoder_attention_mask:ve,encoder_hidden_states:pt,past_key_values:$t},!0)}}class is extends se{}class po extends is{}class wd extends is{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="text_model"),super.from_pretrained(b,B)}}class xn extends is{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="text_model"),super.from_pretrained(b,B)}}class yd extends is{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="vision_model"),super.from_pretrained(b,B)}}class ho extends is{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="vision_model"),super.from_pretrained(b,B)}}class jn extends se{}class fo extends jn{}class mo extends jn{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="text_model"),super.from_pretrained(b,B)}}class _o extends is{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="vision_model"),super.from_pretrained(b,B)}}class go extends se{}class wo extends go{}class Ei extends se{}class yo extends Ei{}class bo extends Ei{}class ki extends se{}class Mo extends ki{}class Pn extends ki{}class Si extends se{}class vo extends Si{}class xo extends Si{}class Pi extends se{}class To extends Pi{}class Co extends Pi{}class Ai extends se{}class $o extends Ai{}class Eo extends Ai{}class Ii extends se{}class bd extends Ii{}class An extends Ii{}class Fi extends se{}class Js extends Fi{}class Oi extends Fi{}class Cn extends se{}class ko extends Cn{}class So extends Cn{}class zi extends se{}class Po extends zi{}class Ao extends zi{}class Di extends se{}class Io extends Di{}class Fo extends Di{}class Bi extends se{}class Oo extends Bi{}class In extends Bi{}class Li extends se{}class zo extends Li{}class Do extends Li{}class Ri extends se{}class Bo extends Ri{}class Lo extends Ri{}class Ni extends se{}class Ro extends Ni{}class No extends Ni{}class ji extends se{}class Vi extends ji{}class Ui extends ji{}class Wi extends se{}class jo extends Wi{}class Gi extends Wi{}class Vo extends se{}class Uo extends Vo{}class Wo extends Vo{}class qi extends se{}class Go extends qi{}class Fs extends qi{}class Hi extends se{}class qo extends Hi{}class Ki extends Hi{}class Xi extends se{}class Ho extends Xi{}class Ko extends Xi{}class Qi extends se{}class Md extends Qi{}class Xo extends Qi{async _call(b){return new pr(await super._call(b))}}class Yi extends se{}class Qo extends Yi{}class vd extends Yi{async _call(b){return new pr(await super._call(b))}}class Yo extends se{}class Mr extends Yo{}class Zi extends se{}class Zo extends Zi{}class Jo extends Zi{async _call(b){return new pr(await super._call(b))}}class el extends se{}class tl extends el{}class Ji extends se{}class rl extends Ji{}class nl extends Ji{async _call(b){return new pr(await super._call(b))}}class sl extends se{}class il extends sl{async _call(b){return new dd(await super._call(b))}}class ea extends se{}class al extends ea{}class ol extends ea{async _call(b){return new pr(await super._call(b))}}class ta extends se{}class Os extends ta{}class ll extends ta{async _call(b){return new pr(await super._call(b))}}class zs extends se{}class ul extends zs{}class dl extends zs{}class ra extends se{}class cl extends ra{}class pl extends ra{}class na extends se{}class hl extends na{}class fl extends na{async _call(b){return new pr(await super._call(b))}}class ei extends se{}class ml extends ei{}class _l extends ei{async _call(b){return new ia(await super._call(b))}}class sa extends ei{async _call(b){return new gl(await super._call(b))}}class ia extends Ke{constructor({logits:b,pred_boxes:B}){super(),this.logits=b,this.pred_boxes=B}}class gl extends Ke{constructor({logits:b,pred_boxes:B,pred_masks:ve}){super(),this.logits=b,this.pred_boxes=B,this.pred_masks=ve}}class aa extends se{}class wl extends aa{}class oa extends aa{async _call(b){return new yl(await super._call(b))}}class yl extends Ke{constructor({logits:b,pred_boxes:B}){super(),this.logits=b,this.pred_boxes=B}}class ti extends se{}class la extends ti{}class bl extends ti{async _call(b){return new Ml(await super._call(b))}}class Ml extends ia{}class ua extends se{}class vl extends ua{}class xl extends ua{async _call(b){return new pr(await super._call(b))}}class da extends se{}class ca extends da{}class Tl extends da{async _call(b){return new pr(await super._call(b))}}class pa extends se{}class Cl extends pa{}class xd extends pa{async _call(b){return new pr(await super._call(b))}}class ha extends se{}class $l extends ha{}class Fn extends ha{async _call(b){return new pr(await super._call(b))}}class fa extends se{}class El extends fa{}class kl extends fa{}class ma extends se{}class Sl extends ma{}class Pl extends ma{}class Al extends se{}class Il extends Al{}class ri extends se{}class Fl extends ri{}class Td extends ri{}class Ol extends ri{}class zl extends se{}class Dl extends zl{}class _a extends se{}class Bl extends _a{}class Ll extends _a{}class Rl extends se{}class Qn extends Rl{}class Yn extends Rl{}class Zn extends se{}class ga extends Zn{}class Vn extends se{}class mn extends Vn{}class wa extends Vn{async _call(b){return new pr(await super._call(b))}}class Ds extends se{}class ya extends Ds{}class Nl extends Ds{async _call(b){return new pr(await super._call(b))}}class ba extends se{}class jl extends ba{}class ni extends ba{async _call(b){return new pr(await super._call(b))}}class si extends se{}class Vl extends si{}class ii extends si{async _call(b){return new Ul(await super._call(b))}}class Ul extends Ke{constructor({logits:b,pred_boxes:B}){super(),this.logits=b,this.pred_boxes=B}}class Ma extends se{}class ai extends Ma{async get_image_embeddings({pixel_values:b}){return await lt(this,{pixel_values:b})}async forward(b){if((!b.image_embeddings||!b.image_positional_embeddings)&&(b={...b,...await this.get_image_embeddings(b)}),!b.input_labels&&b.input_points){const ve=b.input_points.dims.slice(0,-1),Le=ve.reduce((ze,pt)=>ze*pt,1);b.input_labels=new q.Tensor("int64",new BigInt64Array(Le).fill(1n),ve)}const B={image_embeddings:b.image_embeddings,image_positional_embeddings:b.image_positional_embeddings};return b.input_points&&(B.input_points=b.input_points),b.input_labels&&(B.input_labels=b.input_labels),b.input_boxes&&(B.input_boxes=b.input_boxes),await $e(this.sessions.prompt_encoder_mask_decoder,B)}async _call(b){return new Wl(await super._call(b))}}class Wl extends Ke{constructor({iou_scores:b,pred_masks:B}){super(),this.iou_scores=b,this.pred_masks=B}}class va extends se{}class Cd extends va{}class Gl extends va{}class oi extends se{}class Bs extends oi{}class ql extends oi{}class Un extends se{}class Hl extends Un{}class Kl extends Un{async _call(b){return new as(await super._call(b))}}class Xl extends Un{async _call(b){return new pr(await super._call(b))}}class $d extends Un{async _call(b){return new an(await super._call(b))}}class xa extends se{}class Ql extends xa{}class Ed extends xa{async _call(b){return new an(await super._call(b))}}class Ta extends se{}class Yl extends Ta{}class li extends se{}class Zl extends li{}class Jl extends li{async _call(b){return new as(await super._call(b))}}class ui extends li{async _call(b){return new pr(await super._call(b))}}class Ls extends se{}class di extends Ls{}class Ca extends Ls{async _call(b){return new as(await super._call(b))}}class $a extends Ls{async _call(b){return new pr(await super._call(b))}}class eu extends Ls{async _call(b){return new an(await super._call(b))}}class ci extends se{}class Ea extends ci{}class kd extends ci{async _call(b){return new as(await super._call(b))}}class tu extends ci{async _call(b){return new pr(await super._call(b))}}class Sd extends se{}class Pd extends Un{}class ru extends Un{async _call(b){return new as(await super._call(b))}}class ka extends Un{async _call(b){return new pr(await super._call(b))}}class Rs extends se{}class nu extends Rs{}class su extends Rs{async _call(b){return new as(await super._call(b))}}class iu extends Rs{async _call(b){return new pr(await super._call(b))}}class Sa extends Rs{async _call(b){return new to(await super._call(b))}}class au extends Rs{async _call(b){return new an(await super._call(b))}}class pi extends se{}class Ad extends pi{}class ou extends pi{}class lu extends pi{async generate_speech(b,B,{threshold:ve=.5,minlenratio:Le=0,maxlenratio:ze=20,vocoder:pt=null}={}){const $t={input_ids:b},{encoder_outputs:Vt,encoder_attention_mask:nr}=await lt(this,$t),kr=Vt.dims[1]/this.config.reduction_factor,Ir=Math.floor(kr*ze),wr=Math.floor(kr*Le),sr=this.config.num_mel_bins;let Sr=[],Cr=null,yr=null,Fr=0;for(;;){++Fr;const qr=nt(!!yr);let Kr;yr?Kr=yr.output_sequence_out:Kr=new q.Tensor("float32",new Float32Array(sr),[1,1,sr]);let Yr={use_cache_branch:qr,output_sequence:Kr,encoder_attention_mask:nr,speaker_embeddings:B,encoder_hidden_states:Vt};this.addPastKeyValues(Yr,Cr),yr=await $e(this.sessions.decoder_model_merged,Yr),Cr=this.getPastKeyValues(yr,Cr);const{prob:yn,spectrum:Jn}=yr;if(Sr.push(Jn),Fr>=wr&&(Array.from(yn.data).filter(_i=>_i>=ve).length>0||Fr>=Ir))break}const Tn=(0,q.cat)(Sr),{waveform:pn}=await $e(pt.sessions.model,{spectrogram:Tn});return{spectrogram:Tn,waveform:pn}}}class uu extends se{constructor(){super(...arguments);Me(this,"main_input_name","spectrogram")}}class Id extends se{}class du extends Id{}class Pa extends se{}class cu extends Pa{}class Fd extends Pa{}class Aa extends se{}class pu extends Aa{}class hu extends Aa{}class Ia extends se{}class fu extends Ia{}class Od extends Ia{}class ws extends se{}class Ns extends ws{}class Fa extends ws{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="text_model"),super.from_pretrained(b,B)}}class mu extends ws{static async from_pretrained(b,B={}){return B.model_file_name??(B.model_file_name="audio_model"),super.from_pretrained(b,B)}}class _u extends se{}class Oa extends _u{async _call(b){return new cd(await super._call(b))}}class hi extends se{}class gu extends hi{}class wu extends hi{}class yu extends hi{}class za extends se{}class zd extends za{}class bu extends za{}class fi extends se{}class Mu extends fi{}class vu extends fi{async _call(b){return new pr(await super._call(b))}}class Da extends se{}class vc extends Da{}class Dd extends Da{}class Ba extends se{constructor(){super(...arguments);Me(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}_apply_and_filter_by_delay_pattern_mask(B){const[ve,Le]=B.dims,ze=this.config.decoder.num_codebooks,pt=Le-ze;let $t=0;for(let kr=0;kr<B.size;++kr){if(B.data[kr]===this.config.decoder.pad_token_id)continue;const Ir=kr%Le,wr=Math.floor(kr/Le)%ze,sr=Ir-wr;sr>0&&sr<=pt&&(B.data[$t++]=B.data[kr])}const Vt=Math.floor(ve/ze),nr=$t/(Vt*ze);return new q.Tensor(B.type,B.data.slice(0,$t),[Vt,ze,nr])}prepare_inputs_for_generation(B,ve,Le){let ze=structuredClone(B);for(let $t=0;$t<ze.length;++$t)for(let Vt=0;Vt<ze[$t].length;++Vt)$t%this.config.decoder.num_codebooks>=Vt&&(ze[$t][Vt]=BigInt(this.config.decoder.pad_token_id));return Le.guidance_scale!==null&&Le.guidance_scale>1&&(ze=ze.concat(ze)),super.prepare_inputs_for_generation(ze,ve,Le)}async generate(B){const ve=await super.generate(B),Le=this._apply_and_filter_by_delay_pattern_mask(ve).unsqueeze_(0),{audio_values:ze}=await $e(this.sessions.encodec_decode,{audio_codes:Le});return ze}}class xu extends se{}class Tu extends xu{}class Cu extends xu{async _call(b){return new pr(await super._call(b))}}class La extends se{}class $u extends La{}class Bd extends La{async _call(b){return new pr(await super._call(b))}}class Ra extends se{}class Eu extends Ra{}class ku extends Ra{async _call(b){return new pr(await super._call(b))}}class Na extends se{}class Ld extends Na{}class Su extends Na{async _call(b){return new pr(await super._call(b))}}class Pu extends se{}class Au extends Pu{}class Ar{static async from_pretrained(b,{progress_callback:B=null,config:ve=null,cache_dir:Le=null,local_files_only:ze=!1,revision:pt="main",model_file_name:$t=null,subfolder:Vt="onnx",device:nr=null,dtype:kr=null,use_external_data_format:Ir=null,session_options:wr={}}={}){const sr={progress_callback:B,config:ve,cache_dir:Le,local_files_only:ze,revision:pt,model_file_name:$t,subfolder:Vt,device:nr,dtype:kr,use_external_data_format:Ir,session_options:wr};if(sr.config=await F.AutoConfig.from_pretrained(b,sr),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(const Sr of this.MODEL_CLASS_MAPPINGS){const Cr=Sr.get(sr.config.model_type);if(Cr)return await Cr[1].from_pretrained(b,sr)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${sr.config.model_type}", attempting to construct from base class.`),await se.from_pretrained(b,sr);throw Error(`Unsupported model type: ${sr.config.model_type}`)}}Me(Ar,"MODEL_CLASS_MAPPINGS",null),Me(Ar,"BASE_IF_FAIL",!1);const xc=new Map([["bert",["BertModel",mt]],["nomic_bert",["NomicBertModel",Ze]],["roformer",["RoFormerModel",Ve]],["electra",["ElectraModel",Rt]],["esm",["EsmModel",Nr]],["convbert",["ConvBertModel",H]],["camembert",["CamembertModel",Tr]],["deberta",["DebertaModel",ge]],["deberta-v2",["DebertaV2Model",gt]],["mpnet",["MPNetModel",xs]],["albert",["AlbertModel",hs]],["distilbert",["DistilBertModel",qt]],["roberta",["RobertaModel",Er]],["xlm",["XLMModel",Sn]],["xlm-roberta",["XLMRobertaModel",Pr]],["clap",["ClapModel",Ns]],["clip",["CLIPModel",po]],["clipseg",["CLIPSegModel",yo]],["chinese_clip",["ChineseCLIPModel",wo]],["siglip",["SiglipModel",fo]],["mobilebert",["MobileBertModel",zn]],["squeezebert",["SqueezeBertModel",Kn]],["wav2vec2",["Wav2Vec2Model",Hl]],["wav2vec2-bert",["Wav2Vec2BertModel",Ea]],["unispeech",["UniSpeechModel",Zl]],["unispeech-sat",["UniSpeechSatModel",di]],["hubert",["HubertModel",Pd]],["wavlm",["WavLMModel",nu]],["audio-spectrogram-transformer",["ASTModel",Ut]],["vits",["VitsModel",Oa]],["pyannote",["PyAnnoteModel",Ql]],["wespeaker-resnet",["WeSpeakerResNetModel",Yl]],["detr",["DetrModel",ml]],["rt_detr",["RTDetrModel",wl]],["table-transformer",["TableTransformerModel",la]],["vit",["ViTModel",Md]],["pvt",["PvtModel",Qo]],["vit_msn",["ViTMSNModel",Zo]],["vit_mae",["ViTMAEModel",Mr]],["groupvit",["GroupViTModel",tl]],["fastvit",["FastViTModel",rl]],["mobilevit",["MobileViTModel",al]],["mobilevitv2",["MobileViTV2Model",Os]],["owlvit",["OwlViTModel",ul]],["owlv2",["Owlv2Model",cl]],["beit",["BeitModel",hl]],["deit",["DeiTModel",vl]],["hiera",["HieraModel",ca]],["convnext",["ConvNextModel",mn]],["convnextv2",["ConvNextV2Model",ya]],["dinov2",["Dinov2Model",jl]],["resnet",["ResNetModel",Cl]],["swin",["SwinModel",$l]],["swin2sr",["Swin2SRModel",El]],["donut-swin",["DonutSwinModel",ga]],["yolos",["YolosModel",Vl]],["dpt",["DPTModel",Sl]],["glpn",["GLPNModel",Qn]],["hifigan",["SpeechT5HifiGan",uu]],["efficientnet",["EfficientNetModel",Mu]],["decision_transformer",["DecisionTransformerModel",Au]],["mobilenet_v1",["MobileNetV1Model",Tu]],["mobilenet_v2",["MobileNetV2Model",$u]],["mobilenet_v3",["MobileNetV3Model",Eu]],["mobilenet_v4",["MobileNetV4Model",Ld]],["maskformer",["MaskFormerModel",Bl]]]),Rd=new Map([["t5",["T5Model",ks]],["longt5",["LongT5Model",Ps]],["mt5",["MT5Model",Is]],["bart",["BartModel",A]],["mbart",["MBartModel",Ue]],["marian",["MarianModel",Cd]],["whisper",["WhisperModel",Wt]],["m2m_100",["M2M100Model",Bs]],["blenderbot",["BlenderbotModel",tr]],["blenderbot-small",["BlenderbotSmallModel",Ur]]]),Nd=new Map([["bloom",["BloomModel",Go]],["jais",["JAISModel",vo]],["gpt2",["GPT2Model",Mo]],["gptj",["GPTJModel",bd]],["gpt_bigcode",["GPTBigCodeModel",Js]],["gpt_neo",["GPTNeoModel",To]],["gpt_neox",["GPTNeoXModel",$o]],["codegen",["CodeGenModel",ko]],["llama",["LlamaModel",Po]],["granite",["GraniteModel",Io]],["cohere",["CohereModel",Oo]],["gemma",["GemmaModel",zo]],["gemma2",["Gemma2Model",Bo]],["openelm",["OpenELMModel",Ro]],["qwen2",["Qwen2Model",Vi]],["phi",["PhiModel",jo]],["phi3",["Phi3Model",Uo]],["mpt",["MptModel",qo]],["opt",["OPTModel",Ho]],["mistral",["MistralModel",cu]],["starcoder2",["Starcoder2Model",pu]],["falcon",["FalconModel",fu]],["stablelm",["StableLmModel",zd]]]),ja=new Map([["speecht5",["SpeechT5ForSpeechToText",ou]],["whisper",["WhisperForConditionalGeneration",Ti]]]),Iu=new Map([["speecht5",["SpeechT5ForTextToSpeech",lu]]]),jd=new Map([["vits",["VitsModel",Oa]],["musicgen",["MusicgenForConditionalGeneration",Ba]]]),wn=new Map([["bert",["BertForSequenceClassification",He]],["roformer",["RoFormerForSequenceClassification",yt]],["electra",["ElectraForSequenceClassification",Tt]],["esm",["EsmForSequenceClassification",or]],["convbert",["ConvBertForSequenceClassification",Z]],["camembert",["CamembertForSequenceClassification",Dr]],["deberta",["DebertaForSequenceClassification",tt]],["deberta-v2",["DebertaV2ForSequenceClassification",_t]],["mpnet",["MPNetForSequenceClassification",Cs]],["albert",["AlbertForSequenceClassification",fs]],["distilbert",["DistilBertForSequenceClassification",ye]],["roberta",["RobertaForSequenceClassification",Mn]],["xlm",["XLMForSequenceClassification",Kt]],["xlm-roberta",["XLMRobertaForSequenceClassification",gr]],["bart",["BartForSequenceClassification",oe]],["mbart",["MBartForSequenceClassification",Ct]],["mobilebert",["MobileBertForSequenceClassification",cs]],["squeezebert",["SqueezeBertForSequenceClassification",Ln]]]),Fu=new Map([["bert",["BertForTokenClassification",J]],["roformer",["RoFormerForTokenClassification",Pt]],["electra",["ElectraForTokenClassification",zt]],["esm",["EsmForTokenClassification",Gr]],["convbert",["ConvBertForTokenClassification",pe]],["camembert",["CamembertForTokenClassification",en]],["deberta",["DebertaForTokenClassification",xe]],["deberta-v2",["DebertaV2ForTokenClassification",Bt]],["mpnet",["MPNetForTokenClassification",$s]],["distilbert",["DistilBertForTokenClassification",rt]],["roberta",["RobertaForTokenClassification",ke]],["xlm",["XLMForTokenClassification",fn]],["xlm-roberta",["XLMRobertaForTokenClassification",ss]]]),Va=new Map([["t5",["T5ForConditionalGeneration",Ss]],["longt5",["LongT5ForConditionalGeneration",As]],["mt5",["MT5ForConditionalGeneration",ae]],["bart",["BartForConditionalGeneration",Y]],["mbart",["MBartForConditionalGeneration",wt]],["marian",["MarianMTModel",Gl]],["m2m_100",["M2M100ForConditionalGeneration",ql]],["blenderbot",["BlenderbotForConditionalGeneration",$r]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",tn]]]),mi=new Map([["bloom",["BloomForCausalLM",Fs]],["gpt2",["GPT2LMHeadModel",Pn]],["jais",["JAISLMHeadModel",xo]],["gptj",["GPTJForCausalLM",An]],["gpt_bigcode",["GPTBigCodeForCausalLM",Oi]],["gpt_neo",["GPTNeoForCausalLM",Co]],["gpt_neox",["GPTNeoXForCausalLM",Eo]],["codegen",["CodeGenForCausalLM",So]],["llama",["LlamaForCausalLM",Ao]],["granite",["GraniteForCausalLM",Fo]],["cohere",["CohereForCausalLM",In]],["gemma",["GemmaForCausalLM",Do]],["gemma2",["Gemma2ForCausalLM",Lo]],["openelm",["OpenELMForCausalLM",No]],["qwen2",["Qwen2ForCausalLM",Ui]],["phi",["PhiForCausalLM",Gi]],["phi3",["Phi3ForCausalLM",Wo]],["mpt",["MptForCausalLM",Ki]],["opt",["OPTForCausalLM",Ko]],["mbart",["MBartForCausalLM",xt]],["mistral",["MistralForCausalLM",Fd]],["starcoder2",["Starcoder2ForCausalLM",hu]],["falcon",["FalconForCausalLM",Od]],["trocr",["TrOCRForCausalLM",du]],["stablelm",["StableLmForCausalLM",bu]]]),Ou=new Map([["bert",["BertForMaskedLM",bt]],["roformer",["RoFormerForMaskedLM",dt]],["electra",["ElectraForMaskedLM",ht]],["esm",["EsmForMaskedLM",Xr]],["convbert",["ConvBertForMaskedLM",$]],["camembert",["CamembertForMaskedLM",Zr]],["deberta",["DebertaForMaskedLM",Ie]],["deberta-v2",["DebertaV2ForMaskedLM",kt]],["mpnet",["MPNetForMaskedLM",Ts]],["albert",["AlbertForMaskedLM",Yt]],["distilbert",["DistilBertForMaskedLM",Ht]],["roberta",["RobertaForMaskedLM",gn]],["xlm",["XLMWithLMHeadModel",Rn]],["xlm-roberta",["XLMRobertaForMaskedLM",Mt]],["mobilebert",["MobileBertForMaskedLM",Vr]],["squeezebert",["SqueezeBertForMaskedLM",kn]]]),js=new Map([["bert",["BertForQuestionAnswering",Ae]],["roformer",["RoFormerForQuestionAnswering",Et]],["electra",["ElectraForQuestionAnswering",St]],["convbert",["ConvBertForQuestionAnswering",et]],["camembert",["CamembertForQuestionAnswering",ot]],["deberta",["DebertaForQuestionAnswering",Qe]],["deberta-v2",["DebertaV2ForQuestionAnswering",Nt]],["mpnet",["MPNetForQuestionAnswering",Es]],["albert",["AlbertForQuestionAnswering",ms]],["distilbert",["DistilBertForQuestionAnswering",ut]],["roberta",["RobertaForQuestionAnswering",rn]],["xlm",["XLMForQuestionAnswering",Qr]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Xn]],["mobilebert",["MobileBertForQuestionAnswering",vs]],["squeezebert",["SqueezeBertForQuestionAnswering",ps]]]),Ua=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Ci]]]),Vd=new Map([["llava",["LlavaForConditionalGeneration",gs]],["moondream1",["Moondream1ForConditionalGeneration",cr]],["florence2",["Florence2ForConditionalGeneration",$i]]]),zu=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",Ci]]]),Du=new Map([["vit",["ViTForImageClassification",Xo]],["pvt",["PvtForImageClassification",vd]],["vit_msn",["ViTMSNForImageClassification",Jo]],["fastvit",["FastViTForImageClassification",nl]],["mobilevit",["MobileViTForImageClassification",ol]],["mobilevitv2",["MobileViTV2ForImageClassification",ll]],["beit",["BeitForImageClassification",fl]],["deit",["DeiTForImageClassification",xl]],["hiera",["HieraForImageClassification",Tl]],["convnext",["ConvNextForImageClassification",wa]],["convnextv2",["ConvNextV2ForImageClassification",Nl]],["dinov2",["Dinov2ForImageClassification",ni]],["resnet",["ResNetForImageClassification",xd]],["swin",["SwinForImageClassification",Fn]],["segformer",["SegformerForImageClassification",wu]],["efficientnet",["EfficientNetForImageClassification",vu]],["mobilenet_v1",["MobileNetV1ForImageClassification",Cu]],["mobilenet_v2",["MobileNetV2ForImageClassification",Bd]],["mobilenet_v3",["MobileNetV3ForImageClassification",ku]],["mobilenet_v4",["MobileNetV4ForImageClassification",Su]]]),Bu=new Map([["detr",["DetrForObjectDetection",_l]],["rt_detr",["RTDetrForObjectDetection",oa]],["table-transformer",["TableTransformerForObjectDetection",bl]],["yolos",["YolosForObjectDetection",ii]]]),Wa=new Map([["owlvit",["OwlViTForObjectDetection",dl]],["owlv2",["Owlv2ForObjectDetection",pl]]]),Lu=new Map([["detr",["DetrForSegmentation",sa]],["clipseg",["CLIPSegForImageSegmentation",bo]]]),Ru=new Map([["segformer",["SegformerForSemanticSegmentation",yu]],["sapiens",["SapiensForSemanticSegmentation",Fl]]]),Nu=new Map([["detr",["DetrForSegmentation",sa]],["maskformer",["MaskFormerForInstanceSegmentation",Ll]]]),Ga=new Map([["sam",["SamModel",ai]]]),ju=new Map([["wav2vec2",["Wav2Vec2ForCTC",Kl]],["wav2vec2-bert",["Wav2Vec2BertForCTC",kd]],["unispeech",["UniSpeechForCTC",Jl]],["unispeech-sat",["UniSpeechSatForCTC",Ca]],["wavlm",["WavLMForCTC",su]],["hubert",["HubertForCTC",ru]]]),Vu=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Xl]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",tu]],["unispeech",["UniSpeechForSequenceClassification",ui]],["unispeech-sat",["UniSpeechSatForSequenceClassification",$a]],["wavlm",["WavLMForSequenceClassification",iu]],["hubert",["HubertForSequenceClassification",ka]],["audio-spectrogram-transformer",["ASTForAudioClassification",Zs]]]),qa=new Map([["wavlm",["WavLMForXVector",Sa]]]),Uu=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",eu]],["wavlm",["WavLMForAudioFrameClassification",au]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",$d]],["pyannote",["PyAnnoteForAudioFrameClassification",Ed]]]),Ud=new Map([["vitmatte",["VitMatteForImageMatting",il]]]),Ha=new Map([["swin2sr",["Swin2SRForImageSuperResolution",kl]]]),Wu=new Map([["dpt",["DPTForDepthEstimation",Pl]],["depth_anything",["DepthAnythingForDepthEstimation",Il]],["glpn",["GLPNForDepthEstimation",Yn]],["sapiens",["SapiensForDepthEstimation",Td]],["depth_pro",["DepthProForDepthEstimation",Dl]]]),Gu=new Map([["sapiens",["SapiensForNormalEstimation",Ol]]]),qu=new Map([["clip",["CLIPVisionModelWithProjection",ho]],["siglip",["SiglipVisionModel",_o]]]),Wd=[[xc,X.EncoderOnly],[Rd,X.EncoderDecoder],[Nd,X.DecoderOnly],[wn,X.EncoderOnly],[Fu,X.EncoderOnly],[Va,X.Seq2Seq],[ja,X.Seq2Seq],[mi,X.DecoderOnly],[Ou,X.EncoderOnly],[js,X.EncoderOnly],[Ua,X.Vision2Seq],[Vd,X.ImageTextToText],[Du,X.EncoderOnly],[Lu,X.EncoderOnly],[Nu,X.EncoderOnly],[Ru,X.EncoderOnly],[Ud,X.EncoderOnly],[Ha,X.EncoderOnly],[Wu,X.EncoderOnly],[Gu,X.EncoderOnly],[Bu,X.EncoderOnly],[Wa,X.EncoderOnly],[Ga,X.MaskGeneration],[ju,X.EncoderOnly],[Vu,X.EncoderOnly],[Iu,X.Seq2Seq],[jd,X.EncoderOnly],[qa,X.EncoderOnly],[Uu,X.EncoderOnly],[qu,X.EncoderOnly]];for(const[f,b]of Wd)for(const[B,ve]of f.values())K.set(B,b),k.set(ve,B),N.set(B,ve);const Gd=[["MusicgenForConditionalGeneration",Ba,X.Musicgen],["CLIPTextModelWithProjection",xn,X.EncoderOnly],["SiglipTextModel",mo,X.EncoderOnly],["ClapTextModelWithProjection",Fa,X.EncoderOnly],["ClapAudioModelWithProjection",mu,X.EncoderOnly]];for(const[f,b,B]of Gd)K.set(f,B),k.set(b,f),N.set(f,b);class Ka extends Ar{}Me(Ka,"MODEL_CLASS_MAPPINGS",Wd.map(b=>b[0])),Me(Ka,"BASE_IF_FAIL",!0);class Hu extends Ar{}Me(Hu,"MODEL_CLASS_MAPPINGS",[wn]);class qd extends Ar{}Me(qd,"MODEL_CLASS_MAPPINGS",[Fu]);class Ku extends Ar{}Me(Ku,"MODEL_CLASS_MAPPINGS",[Va]);class Xu extends Ar{}Me(Xu,"MODEL_CLASS_MAPPINGS",[ja]);class Qu extends Ar{}Me(Qu,"MODEL_CLASS_MAPPINGS",[Iu]);class Yu extends Ar{}Me(Yu,"MODEL_CLASS_MAPPINGS",[jd]);class Zu extends Ar{}Me(Zu,"MODEL_CLASS_MAPPINGS",[mi]);class Hd extends Ar{}Me(Hd,"MODEL_CLASS_MAPPINGS",[Ou]);class Ju extends Ar{}Me(Ju,"MODEL_CLASS_MAPPINGS",[js]);class ed extends Ar{}Me(ed,"MODEL_CLASS_MAPPINGS",[Ua]);class td extends Ar{}Me(td,"MODEL_CLASS_MAPPINGS",[Du]);class rd extends Ar{}Me(rd,"MODEL_CLASS_MAPPINGS",[Lu]);class nd extends Ar{}Me(nd,"MODEL_CLASS_MAPPINGS",[Ru]);class sd extends Ar{}Me(sd,"MODEL_CLASS_MAPPINGS",[Nu]);class id extends Ar{}Me(id,"MODEL_CLASS_MAPPINGS",[Bu]);class ad extends Ar{}Me(ad,"MODEL_CLASS_MAPPINGS",[Wa]);class od extends Ar{}Me(od,"MODEL_CLASS_MAPPINGS",[Ga]);class Kd extends Ar{}Me(Kd,"MODEL_CLASS_MAPPINGS",[ju]);class Vs extends Ar{}Me(Vs,"MODEL_CLASS_MAPPINGS",[Vu]);class Xa extends Ar{}Me(Xa,"MODEL_CLASS_MAPPINGS",[qa]);class Qa extends Ar{}Me(Qa,"MODEL_CLASS_MAPPINGS",[Uu]);class Ya extends Ar{}Me(Ya,"MODEL_CLASS_MAPPINGS",[zu]);class Za extends Ar{}Me(Za,"MODEL_CLASS_MAPPINGS",[Ud]);class ld extends Ar{}Me(ld,"MODEL_CLASS_MAPPINGS",[Ha]);class ud extends Ar{}Me(ud,"MODEL_CLASS_MAPPINGS",[Wu]);class Ja extends Ar{}Me(Ja,"MODEL_CLASS_MAPPINGS",[Gu]);class eo extends Ar{}Me(eo,"MODEL_CLASS_MAPPINGS",[qu]);class Xd extends Ke{constructor({logits:b,past_key_values:B,encoder_outputs:ve,decoder_attentions:Le=null,cross_attentions:ze=null}){super(),this.logits=b,this.past_key_values=B,this.encoder_outputs=ve,this.decoder_attentions=Le,this.cross_attentions=ze}}class pr extends Ke{constructor({logits:b}){super(),this.logits=b}}class to extends Ke{constructor({logits:b,embeddings:B}){super(),this.logits=b,this.embeddings=B}}class an extends Ke{constructor({logits:b}){super(),this.logits=b}}class dn extends Ke{constructor({logits:b}){super(),this.logits=b}}class cn extends Ke{constructor({start_logits:b,end_logits:B}){super(),this.start_logits=b,this.end_logits=B}}class as extends Ke{constructor({logits:b}){super(),this.logits=b}}class Qd extends Ke{constructor({logits:b,past_key_values:B}){super(),this.logits=b,this.past_key_values=B}}class dd extends Ke{constructor({alphas:b}){super(),this.alphas=b}}class cd extends Ke{constructor({waveform:b,spectrogram:B}){super(),this.waveform=b,this.spectrogram=B}}},"./src/models/whisper/common_whisper.js":(It,Se,j)=>{j.r(Se),j.d(Se,{WHISPER_LANGUAGE_MAPPING:()=>he,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>be,whisper_language_to_code:()=>Ce});const F=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],he=new Map(F),be=new Map([...F.map(([Ee,U])=>[U,Ee]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function Ce(Ee){Ee=Ee.toLowerCase();let U=be.get(Ee);if(U===void 0)if(he.has(Ee))U=Ee;else{const z=Ee.length===2?he.keys():he.values();throw new Error(`Language "${Ee}" is not supported. Must be one of: ${JSON.stringify(z)}`)}return U}},"./src/models/whisper/generation_whisper.js":(It,Se,j)=>{j.r(Se),j.d(Se,{WhisperGenerationConfig:()=>he});var F=j("./src/generation/configuration_utils.js");class he extends F.GenerationConfig{constructor(){super(...arguments);Me(this,"return_timestamps",null);Me(this,"return_token_timestamps",null);Me(this,"num_frames",null);Me(this,"alignment_heads",null);Me(this,"task",null);Me(this,"language",null);Me(this,"no_timestamps_token_id",null);Me(this,"prompt_ids",null);Me(this,"is_multilingual",null);Me(this,"lang_to_id",null);Me(this,"task_to_id",null);Me(this,"max_initial_timestamp_index",1)}}},"./src/ops/registry.js":(It,Se,j)=>{j.r(Se),j.d(Se,{TensorOpRegistry:()=>Ce});var F=j("./src/backends/onnx.js"),he=j("./src/utils/tensor.js");const be=async(Ee,U,P)=>{const z=await(0,F.createInferenceSession)(new Uint8Array(Ee),U);return async D=>{const q=Object.fromEntries(Object.entries(D).map(([fe,le])=>[fe,le.ort_tensor])),re=await z.run(q);return Array.isArray(P)?P.map(fe=>new he.Tensor(re[fe])):new he.Tensor(re[P])}};class Ce{static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=be([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=be([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=be([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=be([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=be([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=be([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}}Me(Ce,"session_options",{})},"./src/pipelines.js":(It,Se,j)=>{j.r(Se),j.d(Se,{AudioClassificationPipeline:()=>Oe,AutomaticSpeechRecognitionPipeline:()=>nt,DepthEstimationPipeline:()=>Ke,DocumentQuestionAnsweringPipeline:()=>Ne,FeatureExtractionPipeline:()=>we,FillMaskPipeline:()=>X,ImageClassificationPipeline:()=>lt,ImageFeatureExtractionPipeline:()=>$e,ImageSegmentationPipeline:()=>me,ImageToImagePipeline:()=>se,ImageToTextPipeline:()=>Je,ObjectDetectionPipeline:()=>ue,Pipeline:()=>le,QuestionAnsweringPipeline:()=>ce,SummarizationPipeline:()=>N,Text2TextGenerationPipeline:()=>K,TextClassificationPipeline:()=>O,TextGenerationPipeline:()=>E,TextToAudioPipeline:()=>at,TokenClassificationPipeline:()=>ee,TranslationPipeline:()=>k,ZeroShotAudioClassificationPipeline:()=>Fe,ZeroShotClassificationPipeline:()=>de,ZeroShotImageClassificationPipeline:()=>W,ZeroShotObjectDetectionPipeline:()=>Te,pipeline:()=>mt});var F=j("./src/tokenizers.js"),he=j("./src/models.js"),be=j("./src/processors.js"),Ce=j("./src/utils/generic.js"),Ee=j("./src/utils/core.js"),U=j("./src/utils/maths.js"),P=j("./src/utils/audio.js"),z=j("./src/utils/tensor.js"),D=j("./src/utils/image.js");async function q(He){return Array.isArray(He)||(He=[He]),await Promise.all(He.map(J=>D.RawImage.read(J)))}async function re(He,J){return Array.isArray(He)||(He=[He]),await Promise.all(He.map(Ae=>typeof Ae=="string"||Ae instanceof URL?(0,P.read_audio)(Ae,J):Ae instanceof Float64Array?new Float32Array(Ae):Ae))}function fe(He,J){J&&(He=He.map(Ve=>Ve|0));const[Ae,Ge,Ze,je]=He;return{xmin:Ae,ymin:Ge,xmax:Ze,ymax:je}}class le extends Ce.Callable{constructor({task:J,model:Ae,tokenizer:Ge=null,processor:Ze=null}){super(),this.task=J,this.model=Ae,this.tokenizer=Ge,this.processor=Ze}async dispose(){await this.model.dispose()}}class O extends le{constructor(J){super(J)}async _call(J,{top_k:Ae=1}={}){const Ge=this.tokenizer(J,{padding:!0,truncation:!0}),Ze=await this.model(Ge),je=this.model.config.problem_type==="multi_label_classification"?yt=>yt.sigmoid():yt=>new z.Tensor("float32",(0,U.softmax)(yt.data),yt.dims),Ve=this.model.config.id2label,dt=[];for(const yt of Ze.logits){const Pt=je(yt),Et=await(0,z.topk)(Pt,Ae),M=Et[0].tolist(),$=Et[1].tolist().map((Z,pe)=>({label:Ve?Ve[Z]:`LABEL_${Z}`,score:M[pe]}));Ae===1?dt.push(...$):dt.push($)}return Array.isArray(J)||Ae===1?dt:dt[0]}}class ee extends le{constructor(J){super(J)}async _call(J,{ignore_labels:Ae=["O"]}={}){const Ge=Array.isArray(J),Ze=this.tokenizer(Ge?J:[J],{padding:!0,truncation:!0}),Ve=(await this.model(Ze)).logits,dt=this.model.config.id2label,yt=[];for(let Pt=0;Pt<Ve.dims[0];++Pt){const Et=Ze.input_ids[Pt],M=Ve[Pt],H=[];for(let $=0;$<M.dims[0];++$){const Z=M[$],pe=(0,U.max)(Z.data)[1],et=dt?dt[pe]:`LABEL_${pe}`;if(Ae.includes(et))continue;const Xe=this.tokenizer.decode([Et[$].item()],{skip_special_tokens:!0});if(Xe==="")continue;const Rt=(0,U.softmax)(Z.data);H.push({entity:et,score:Rt[pe],index:$,word:Xe})}yt.push(H)}return Ge?yt:yt[0]}}class ce extends le{constructor(J){super(J)}async _call(J,Ae,{top_k:Ge=1}={}){const Ze=this.tokenizer(J,{text_pair:Ae,padding:!0,truncation:!0}),{start_logits:je,end_logits:Ve}=await this.model(Ze),dt=Ze.input_ids.tolist(),yt=Ze.attention_mask.tolist(),Pt=this.tokenizer.all_special_ids,Et=[];for(let M=0;M<je.dims[0];++M){const H=dt[M],$=H.findIndex(ht=>ht==this.tokenizer.sep_token_id);yt[M].map((ht,Tt)=>ht==1&&(Tt===0||Tt>$&&Pt.findIndex(zt=>zt==H[Tt])===-1));const Z=je[M].tolist(),pe=Ve[M].tolist();for(let ht=1;ht<Z.length;++ht)(yt[M]==0||ht<=$||Pt.findIndex(Tt=>Tt==H[ht])!==-1)&&(Z[ht]=-1/0,pe[ht]=-1/0);const et=(0,U.softmax)(Z).map((ht,Tt)=>[ht,Tt]),Xe=(0,U.softmax)(pe).map((ht,Tt)=>[ht,Tt]);et[0][0]=0,Xe[0][0]=0;const Rt=(0,Ee.product)(et,Xe).filter(ht=>ht[0][1]<=ht[1][1]).map(ht=>[ht[0][1],ht[1][1],ht[0][0]*ht[1][0]]).sort((ht,Tt)=>Tt[2]-ht[2]);for(let ht=0;ht<Math.min(Rt.length,Ge);++ht){const[Tt,zt,St]=Rt[ht],dr=H.slice(Tt,zt+1),Tr=this.tokenizer.decode(dr,{skip_special_tokens:!0});Et.push({answer:Tr,score:St})}}return Ge===1?Et[0]:Et}}class X extends le{constructor(J){super(J)}async _call(J,{top_k:Ae=5}={}){const Ge=this.tokenizer(J,{padding:!0,truncation:!0}),{logits:Ze}=await this.model(Ge),je=[],Ve=Ge.input_ids.tolist();for(let dt=0;dt<Ve.length;++dt){const yt=Ve[dt],Pt=yt.findIndex(Z=>Z==this.tokenizer.mask_token_id);if(Pt===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Et=Ze[dt][Pt],M=await(0,z.topk)(new z.Tensor("float32",(0,U.softmax)(Et.data),Et.dims),Ae),H=M[0].tolist(),$=M[1].tolist();je.push($.map((Z,pe)=>{const et=yt.slice();return et[Pt]=Z,{score:H[pe],token:Number(Z),token_str:this.tokenizer.model.vocab[Z],sequence:this.tokenizer.decode(et,{skip_special_tokens:!0})}}))}return Array.isArray(J)?je:je[0]}}class K extends le{constructor(Ae){super(Ae);Me(this,"_key","generated_text")}async _call(Ae,Ge={}){Array.isArray(Ae)||(Ae=[Ae]),this.model.config.prefix&&(Ae=Ae.map(Pt=>this.model.config.prefix+Pt));const Ze=this.model.config.task_specific_params;Ze&&Ze[this.task]&&Ze[this.task].prefix&&(Ae=Ae.map(Pt=>Ze[this.task].prefix+Pt));const je=this.tokenizer,Ve={padding:!0,truncation:!0};let dt;this instanceof k&&"_build_translation_inputs"in je?dt=je._build_translation_inputs(Ae,Ve,Ge):dt=je(Ae,Ve);const yt=await this.model.generate({...dt,...Ge});return je.batch_decode(yt,{skip_special_tokens:!0}).map(Pt=>({[this._key]:Pt}))}}class N extends K{constructor(Ae){super(Ae);Me(this,"_key","summary_text")}}class k extends K{constructor(Ae){super(Ae);Me(this,"_key","translation_text")}}function R(He){return Array.isArray(He)&&He.every(J=>"role"in J&&"content"in J)}class E extends le{constructor(J){super(J)}async _call(J,Ae={}){let Ge=!1,Ze=!1,je;if(typeof J=="string")je=J=[J];else if(Array.isArray(J)&&J.every($=>typeof $=="string"))Ge=!0,je=J;else{if(R(J))J=[J];else if(Array.isArray(J)&&J.every(R))Ge=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Ze=!0,je=J.map($=>this.tokenizer.apply_chat_template($,{tokenize:!1,add_generation_prompt:!0}))}const Ve=Ae.add_special_tokens??!1,dt=Ze?!1:Ae.return_full_text??!0;this.tokenizer.padding_side="left";const yt=this.tokenizer(je,{add_special_tokens:Ve,padding:!0,truncation:!0}),Pt=await this.model.generate({...yt,...Ae}),Et=this.tokenizer.batch_decode(Pt,{skip_special_tokens:!0});let M;!dt&&yt.input_ids.dims.at(-1)>0&&(M=this.tokenizer.batch_decode(yt.input_ids,{skip_special_tokens:!0}).map($=>$.length));const H=Array.from({length:J.length},$=>[]);for(let $=0;$<Et.length;++$){const Z=Math.floor($/Pt.dims[0]*J.length);M&&(Et[$]=Et[$].slice(M[Z])),H[Z].push({generated_text:Ze?[...J[Z],{role:"assistant",content:Et[$]}]:Et[$]})}return!Ge&&H.length===1?H[0]:H}}class de extends le{constructor(J){super(J),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([Ae,Ge])=>[Ae.toLowerCase(),Ge])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(J,Ae,{hypothesis_template:Ge="This example is {}.",multi_label:Ze=!1}={}){const je=Array.isArray(J);je||(J=[J]),Array.isArray(Ae)||(Ae=[Ae]);const Ve=Ae.map(Pt=>Ge.replace("{}",Pt)),dt=Ze||Ae.length===1,yt=[];for(const Pt of J){const Et=[];for(const $ of Ve){const Z=this.tokenizer(Pt,{text_pair:$,padding:!0,truncation:!0}),pe=await this.model(Z);dt?Et.push([pe.logits.data[this.contradiction_id],pe.logits.data[this.entailment_id]]):Et.push(pe.logits.data[this.entailment_id])}const H=(dt?Et.map($=>(0,U.softmax)($)[1]):(0,U.softmax)(Et)).map(($,Z)=>[$,Z]).sort(($,Z)=>Z[0]-$[0]);yt.push({sequence:Pt,labels:H.map($=>Ae[$[1]]),scores:H.map($=>$[0])})}return je?yt:yt[0]}}class we extends le{constructor(J){super(J)}async _call(J,{pooling:Ae="none",normalize:Ge=!1,quantize:Ze=!1,precision:je="binary"}={}){const Ve=this.tokenizer(J,{padding:!0,truncation:!0}),dt=await this.model(Ve);let yt=dt.last_hidden_state??dt.logits??dt.token_embeddings;if(Ae!=="none")if(Ae==="mean")yt=(0,z.mean_pooling)(yt,Ve.attention_mask);else if(Ae==="cls")yt=yt.slice(null,0);else throw Error(`Pooling method '${Ae}' not supported.`);return Ge&&(yt=yt.normalize(2,-1)),Ze&&(yt=(0,z.quantize_embeddings)(yt,je)),yt}}class $e extends le{constructor(J){super(J)}async _call(J,{pool:Ae=null}={}){const Ge=await q(J),{pixel_values:Ze}=await this.processor(Ge),je=await this.model({pixel_values:Ze});let Ve;if(Ae){if(!("pooler_output"in je))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");Ve=je.pooler_output}else Ve=je.last_hidden_state??je.logits??je.image_embeds;return Ve}}class Oe extends le{constructor(J){super(J)}async _call(J,{top_k:Ae=5}={}){const Ge=this.processor.feature_extractor.config.sampling_rate,Ze=await re(J,Ge),je=this.model.config.id2label,Ve=[];for(const dt of Ze){const yt=await this.processor(dt),Et=(await this.model(yt)).logits[0],M=await(0,z.topk)(new z.Tensor("float32",(0,U.softmax)(Et.data),Et.dims),Ae),H=M[0].tolist(),Z=M[1].tolist().map((pe,et)=>({label:je?je[pe]:`LABEL_${pe}`,score:H[et]}));Ve.push(Z)}return Array.isArray(J)?Ve:Ve[0]}}class Fe extends le{constructor(J){super(J)}async _call(J,Ae,{hypothesis_template:Ge="This is a sound of {}."}={}){const Ze=!Array.isArray(J);Ze&&(J=[J]);const je=Ae.map(Et=>Ge.replace("{}",Et)),Ve=this.tokenizer(je,{padding:!0,truncation:!0}),dt=this.processor.feature_extractor.config.sampling_rate,yt=await re(J,dt),Pt=[];for(const Et of yt){const M=await this.processor(Et),H=await this.model({...Ve,...M}),$=(0,U.softmax)(H.logits_per_audio.data);Pt.push([...$].map((Z,pe)=>({score:Z,label:Ae[pe]})))}return Ze?Pt[0]:Pt}}class nt extends le{constructor(J){super(J)}async _call(J,Ae={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(J,Ae);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(J,Ae);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(J,Ae){Ae.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),Ae.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const Ge=!Array.isArray(J);Ge&&(J=[J]);const Ze=this.processor.feature_extractor.config.sampling_rate,je=await re(J,Ze),Ve=[];for(const dt of je){const yt=await this.processor(dt),Et=(await this.model(yt)).logits[0],M=[];for(const $ of Et)M.push((0,U.max)($.data)[1]);const H=this.tokenizer.decode(M);Ve.push({text:H})}return Ge?Ve[0]:Ve}async _call_whisper(J,Ae){const Ge=Ae.return_timestamps??!1,Ze=Ae.chunk_length_s??0,je=Ae.force_full_sequences??!1;let Ve=Ae.stride_length_s??null;const dt={...Ae};Ge==="word"&&(dt.return_token_timestamps=!0,dt.return_timestamps=!1);const yt=!Array.isArray(J);yt&&(J=[J]);const Pt=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Et=this.processor.feature_extractor.config.hop_length,M=this.processor.feature_extractor.config.sampling_rate,H=await re(J,M),$=[];for(const Z of H){let pe=[];if(Ze>0){if(Ve===null)Ve=Ze/6;else if(Ze<=Ve)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const Rt=M*Ze,ht=M*Ve,Tt=Rt-2*ht;let zt=0;for(;;){const St=zt+Rt,dr=Z.subarray(zt,St),Tr=await this.processor(dr),Zr=zt===0,Dr=St>=Z.length;if(pe.push({stride:[dr.length,Zr?0:ht,Dr?0:ht],input_features:Tr.input_features,is_last:Dr}),Dr)break;zt+=Tt}}else pe=[{stride:[Z.length,0,0],input_features:(await this.processor(Z)).input_features,is_last:!0}];for(const Rt of pe){dt.num_frames=Math.floor(Rt.stride[0]/Et);const ht=await this.model.generate({inputs:Rt.input_features,...dt});Ge==="word"?(Rt.tokens=ht.sequences.tolist()[0],Rt.token_timestamps=ht.token_timestamps.tolist()[0].map(Tt=>(0,U.round)(Tt,2))):Rt.tokens=ht[0].tolist(),Rt.stride=Rt.stride.map(Tt=>Tt/M)}const[et,Xe]=this.tokenizer._decode_asr(pe,{time_precision:Pt,return_timestamps:Ge,force_full_sequences:je});$.push({text:et,...Xe})}return yt?$[0]:$}}class Je extends le{constructor(J){super(J)}async _call(J,Ae={}){const Ge=Array.isArray(J),Ze=await q(J),{pixel_values:je}=await this.processor(Ze),Ve=[];for(const dt of je){dt.dims=[1,...dt.dims];const yt=await this.model.generate({inputs:dt,...Ae}),Pt=this.tokenizer.batch_decode(yt,{skip_special_tokens:!0}).map(Et=>({generated_text:Et.trim()}));Ve.push(Pt)}return Ge?Ve:Ve[0]}}class lt extends le{constructor(J){super(J)}async _call(J,{top_k:Ae=5}={}){const Ge=await q(J),{pixel_values:Ze}=await this.processor(Ge),je=await this.model({pixel_values:Ze}),Ve=this.model.config.id2label,dt=[];for(const yt of je.logits){const Pt=await(0,z.topk)(new z.Tensor("float32",(0,U.softmax)(yt.data),yt.dims),Ae),Et=Pt[0].tolist(),H=Pt[1].tolist().map(($,Z)=>({label:Ve?Ve[$]:`LABEL_${$}`,score:Et[Z]}));dt.push(H)}return Array.isArray(J)?dt:dt[0]}}class me extends le{constructor(J){super(J),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(J,{threshold:Ae=.5,mask_threshold:Ge=.5,overlap_mask_area_threshold:Ze=.8,label_ids_to_fuse:je=null,target_sizes:Ve=null,subtask:dt=null}={}){if(Array.isArray(J)&&J.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const Pt=await q(J),Et=Pt.map(Xe=>[Xe.height,Xe.width]),{pixel_values:M,pixel_mask:H}=await this.processor(Pt),$=await this.model({pixel_values:M,pixel_mask:H});let Z=null;if(dt!==null)Z=this.subtasks_mapping[dt];else for(let[Xe,Rt]of Object.entries(this.subtasks_mapping))if(Rt in this.processor.feature_extractor){Z=this.processor.feature_extractor[Rt].bind(this.processor.feature_extractor),dt=Xe;break}const pe=this.model.config.id2label,et=[];if(dt==="panoptic"||dt==="instance"){const Xe=Z($,Ae,Ge,Ze,je,Ve??Et)[0],Rt=Xe.segmentation;for(const ht of Xe.segments_info){const Tt=new Uint8ClampedArray(Rt.data.length);for(let St=0;St<Rt.data.length;++St)Rt.data[St]===ht.id&&(Tt[St]=255);const zt=new D.RawImage(Tt,Rt.dims[1],Rt.dims[0],1);et.push({score:ht.score,label:pe[ht.label_id],mask:zt})}}else if(dt==="semantic"){const{segmentation:Xe,labels:Rt}=Z($,Ve??Et)[0];for(const ht of Rt){const Tt=new Uint8ClampedArray(Xe.data.length);for(let St=0;St<Xe.data.length;++St)Xe.data[St]===ht&&(Tt[St]=255);const zt=new D.RawImage(Tt,Xe.dims[1],Xe.dims[0],1);et.push({score:null,label:pe[ht],mask:zt})}}else throw Error(`Subtask ${dt} not supported.`);return et}}class W extends le{constructor(J){super(J)}async _call(J,Ae,{hypothesis_template:Ge="This is a photo of {}"}={}){const Ze=Array.isArray(J),je=await q(J),Ve=Ae.map(H=>Ge.replace("{}",H)),dt=this.tokenizer(Ve,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:yt}=await this.processor(je),Pt=await this.model({...dt,pixel_values:yt}),Et=this.model.config.model_type==="siglip"?H=>H.sigmoid().data:H=>(0,U.softmax)(H.data),M=[];for(const H of Pt.logits_per_image){const Z=[...Et(H)].map((pe,et)=>({score:pe,label:Ae[et]}));Z.sort((pe,et)=>et.score-pe.score),M.push(Z)}return Ze?M:M[0]}}class ue extends le{constructor(J){super(J)}async _call(J,{threshold:Ae=.9,percentage:Ge=!1}={}){const Ze=Array.isArray(J);if(Ze&&J.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const je=await q(J),Ve=Ge?null:je.map($=>[$.height,$.width]),{pixel_values:dt,pixel_mask:yt}=await this.processor(je),Pt=await this.model({pixel_values:dt,pixel_mask:yt}),Et=this.processor.feature_extractor.post_process_object_detection(Pt,Ae,Ve),M=this.model.config.id2label,H=Et.map($=>$.boxes.map((Z,pe)=>({score:$.scores[pe],label:M[$.classes[pe]],box:fe(Z,!Ge)})));return Ze?H:H[0]}}class Te extends le{constructor(J){super(J)}async _call(J,Ae,{threshold:Ge=.1,top_k:Ze=null,percentage:je=!1}={}){const Ve=Array.isArray(J),dt=await q(J),yt=this.tokenizer(Ae,{padding:!0,truncation:!0}),Pt=await this.processor(dt),Et=[];for(let M=0;M<dt.length;++M){const H=dt[M],$=je?null:[[H.height,H.width]],Z=Pt.pixel_values[M].unsqueeze_(0),pe=await this.model({...yt,pixel_values:Z}),et=this.processor.feature_extractor.post_process_object_detection(pe,Ge,$,!0)[0];let Xe=et.boxes.map((Rt,ht)=>({score:et.scores[ht],label:Ae[et.classes[ht]],box:fe(Rt,!je)})).sort((Rt,ht)=>ht.score-Rt.score);Ze!==null&&(Xe=Xe.slice(0,Ze)),Et.push(Xe)}return Ve?Et:Et[0]}}class Ne extends le{constructor(J){super(J)}async _call(J,Ae,Ge={}){throw new Error("This pipeline is not yet supported in Transformers.js v3.")}}class at extends le{constructor(Ae){super(Ae);Me(this,"DEFAULT_VOCODER_ID","Xenova/speecht5_hifigan");this.vocoder=Ae.vocoder??null}async _call(Ae,{speaker_embeddings:Ge=null}={}){return this.processor?this._call_text_to_spectrogram(Ae,{speaker_embeddings:Ge}):this._call_text_to_waveform(Ae)}async _call_text_to_waveform(Ae){const Ge=this.tokenizer(Ae,{padding:!0,truncation:!0}),{waveform:Ze}=await this.model(Ge),je=this.model.config.sampling_rate;return{audio:Ze.data,sampling_rate:je}}async _call_text_to_spectrogram(Ae,{speaker_embeddings:Ge}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await he.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof Ge=="string"||Ge instanceof URL)&&(Ge=new Float32Array(await(await fetch(Ge)).arrayBuffer())),Ge instanceof Float32Array)Ge=new z.Tensor("float32",Ge,[1,Ge.length]);else if(!(Ge instanceof z.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:Ze}=this.tokenizer(Ae,{padding:!0,truncation:!0}),{waveform:je}=await this.model.generate_speech(Ze,Ge,{vocoder:this.vocoder}),Ve=this.processor.feature_extractor.config.sampling_rate;return{audio:je.data,sampling_rate:Ve}}}class se extends le{constructor(J){super(J)}async _call(J){const Ae=await q(J),Ge=await this.processor(Ae),Ze=await this.model(Ge),je=[];for(const Ve of Ze.reconstruction){const dt=Ve.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");je.push(D.RawImage.fromTensor(dt))}return je.length>1?je:je[0]}}class Ke extends le{constructor(J){super(J)}async _call(J){const Ae=await q(J),Ge=await this.processor(Ae),{predicted_depth:Ze}=await this.model(Ge),je=[];for(let Ve=0;Ve<Ae.length;++Ve){const dt=(0,z.interpolate)(Ze[Ve],Ae[Ve].size.reverse(),"bilinear",!1),yt=dt.mul_(255/(0,U.max)(dt.data)[0]).to("uint8");je.push({predicted_depth:Ze[Ve],depth:D.RawImage.fromTensor(yt)})}return je.length>1?je:je[0]}}const ct=Object.freeze({"text-classification":{tokenizer:F.AutoTokenizer,pipeline:O,model:he.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:F.AutoTokenizer,pipeline:ee,model:he.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:F.AutoTokenizer,pipeline:ce,model:he.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:F.AutoTokenizer,pipeline:X,model:he.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:F.AutoTokenizer,pipeline:N,model:he.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:F.AutoTokenizer,pipeline:k,model:he.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:F.AutoTokenizer,pipeline:K,model:he.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:F.AutoTokenizer,pipeline:E,model:he.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:F.AutoTokenizer,pipeline:de,model:he.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:Oe,model:he.AutoModelForAudioClassification,processor:be.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:F.AutoTokenizer,pipeline:Fe,model:he.AutoModel,processor:be.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:F.AutoTokenizer,pipeline:nt,model:[he.AutoModelForSpeechSeq2Seq,he.AutoModelForCTC],processor:be.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:F.AutoTokenizer,pipeline:at,model:[he.AutoModelForTextToWaveform,he.AutoModelForTextToSpectrogram],processor:[be.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:F.AutoTokenizer,pipeline:Je,model:he.AutoModelForVision2Seq,processor:be.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:lt,model:he.AutoModelForImageClassification,processor:be.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:me,model:[he.AutoModelForImageSegmentation,he.AutoModelForSemanticSegmentation,he.AutoModelForUniversalSegmentation],processor:be.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:F.AutoTokenizer,pipeline:W,model:he.AutoModel,processor:be.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ue,model:he.AutoModelForObjectDetection,processor:be.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:F.AutoTokenizer,pipeline:Te,model:he.AutoModelForZeroShotObjectDetection,processor:be.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:F.AutoTokenizer,pipeline:Ne,model:he.AutoModelForDocumentQuestionAnswering,processor:be.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:se,model:he.AutoModelForImageToImage,processor:be.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:Ke,model:he.AutoModelForDepthEstimation,processor:be.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:F.AutoTokenizer,pipeline:we,model:he.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:be.AutoProcessor,pipeline:$e,model:[he.AutoModelForImageFeatureExtraction,he.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Be=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function mt(He,J=null,{progress_callback:Ae=null,config:Ge=null,cache_dir:Ze=null,local_files_only:je=!1,revision:Ve="main",device:dt=null,dtype:yt=null,model_file_name:Pt=null,session_options:Et={}}={}){He=Be[He]??He;const M=ct[He.split("_",1)[0]];if(!M)throw Error(`Unsupported pipeline: ${He}. Must be one of [${Object.keys(ct)}]`);J||(J=M.default.model,console.log(`No model specified. Using default model: "${J}".`));const H={progress_callback:Ae,config:Ge,cache_dir:Ze,local_files_only:je,revision:Ve,device:dt,dtype:yt,model_file_name:Pt,session_options:Et},$=new Map([["tokenizer",M.tokenizer],["model",M.model],["processor",M.processor]]),Z=await bt($,J,H);Z.task=He,(0,Ee.dispatchCallback)(Ae,{status:"ready",task:He,model:J});const pe=M.pipeline;return new pe(Z)}async function bt(He,J,Ae){const Ge=Object.create(null),Ze=[];for(const[je,Ve]of He.entries()){if(!Ve)continue;let dt;Array.isArray(Ve)?dt=new Promise(async(yt,Pt)=>{var M,H;let Et;for(const $ of Ve){if($===null){yt(null);return}try{yt(await $.from_pretrained(J,Ae));return}catch(Z){if((M=Z.message)!=null&&M.includes("Unsupported model type"))Et=Z;else if((H=Z.message)!=null&&H.includes("Could not locate file"))Et=Z;else{Pt(Z);return}}}Pt(Et)}):dt=Ve.from_pretrained(J,Ae),Ge[je]=dt,Ze.push(dt)}await Promise.all(Ze);for(const[je,Ve]of Object.entries(Ge))Ge[je]=await Ve;return Ge}},"./src/processors.js":(It,Se,j)=>{j.r(Se),j.d(Se,{ASTFeatureExtractor:()=>Z,AutoProcessor:()=>en,BeitFeatureExtractor:()=>Ae,BitImageProcessor:()=>we,CLIPFeatureExtractor:()=>Oe,CLIPImageProcessor:()=>Fe,ChineseCLIPFeatureExtractor:()=>nt,ClapFeatureExtractor:()=>pe,ConvNextFeatureExtractor:()=>lt,ConvNextImageProcessor:()=>me,DPTFeatureExtractor:()=>E,DPTImageProcessor:()=>de,DeiTFeatureExtractor:()=>J,DetrFeatureExtractor:()=>je,DonutFeatureExtractor:()=>Ge,EfficientNetImageProcessor:()=>Te,FeatureExtractor:()=>X,Florence2Processor:()=>Dr,GLPNFeatureExtractor:()=>$e,ImageFeatureExtractor:()=>K,MaskFormerFeatureExtractor:()=>Ve,MobileNetV1FeatureExtractor:()=>Ne,MobileNetV2FeatureExtractor:()=>at,MobileNetV3FeatureExtractor:()=>se,MobileNetV4FeatureExtractor:()=>Ke,MobileViTFeatureExtractor:()=>ct,MobileViTImageProcessor:()=>Be,NougatImageProcessor:()=>Ze,OwlViTFeatureExtractor:()=>mt,OwlViTProcessor:()=>Zr,Owlv2ImageProcessor:()=>bt,Processor:()=>ht,PvtImageProcessor:()=>R,PyAnnoteFeatureExtractor:()=>et,PyAnnoteProcessor:()=>dr,RTDetrImageProcessor:()=>He,SamImageProcessor:()=>yt,SamProcessor:()=>Tt,SapiensFeatureExtractor:()=>N,SeamlessM4TFeatureExtractor:()=>$,SegformerFeatureExtractor:()=>k,SiglipImageProcessor:()=>Je,SpeechT5FeatureExtractor:()=>Rt,SpeechT5Processor:()=>Tr,Swin2SRImageProcessor:()=>Pt,ViTFeatureExtractor:()=>W,ViTImageProcessor:()=>ue,VitMatteImageProcessor:()=>Et,Wav2Vec2FeatureExtractor:()=>H,Wav2Vec2ProcessorWithLM:()=>St,WeSpeakerFeatureExtractor:()=>Xe,WhisperFeatureExtractor:()=>M,WhisperProcessor:()=>zt,YolosFeatureExtractor:()=>dt});var F=j("./src/utils/generic.js"),he=j("./src/utils/core.js"),be=j("./src/utils/hub.js"),Ce=j("./src/utils/maths.js"),Ee=j("./src/utils/tensor.js");j("./src/utils/image.js");var U=j("./src/utils/audio.js");function P([ot,V,ge,Ie]){return[ot-ge/2,V-Ie/2,ot+ge/2,V+Ie/2]}function z(ot,V=.5,ge=null,Ie=!1){const tt=ot.logits,xe=ot.pred_boxes,[Qe,ft,gt]=tt.dims;if(ge!==null&&ge.length!==Qe)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let kt=[];for(let _t=0;_t<Qe;++_t){let Bt=ge!==null?ge[_t]:null,Nt={boxes:[],classes:[],scores:[]},Dt=tt[_t],qt=xe[_t];for(let ye=0;ye<ft;++ye){let rt=Dt[ye],ut=[],Ht;if(Ie){Ht=rt.sigmoid().data;for(let _r=0;_r<Ht.length;++_r)Ht[_r]>V&&ut.push(_r)}else{let _r=(0,Ce.max)(rt.data)[1];if(_r===gt-1||(Ht=(0,Ce.softmax)(rt.data),Ht[_r]<V))continue;ut.push(_r)}for(const _r of ut){let Nr=qt[ye].data;Nr=P(Nr),Bt!==null&&(Nr=Nr.map((Xr,or)=>Xr*Bt[(or+1)%2])),Nt.boxes.push(Nr),Nt.classes.push(_r),Nt.scores.push(Ht[_r])}}kt.push(Nt)}return kt}function D(ot,V=null){const ge=ot.logits,Ie=ge.dims[0];if(V!==null&&V.length!==Ie)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const tt=[];for(let xe=0;xe<Ie;++xe){const Qe=V!==null?V[xe]:null;let ft=ge[xe];Qe!==null&&(ft=(0,Ee.interpolate)(ft,Qe,"bilinear",!1));const[gt,kt]=Qe??ft.dims.slice(-2),_t=new Ee.Tensor("int32",new Int32Array(gt*kt),[gt,kt]),Bt=ft[0].data,Nt=_t.data;for(let ye=1;ye<ft.dims[0];++ye){const rt=ft[ye].data;for(let ut=0;ut<rt.length;++ut)rt[ut]>Bt[ut]&&(Bt[ut]=rt[ut],Nt[ut]=ye)}const Dt=new Array(ft.dims[0]);for(let ye=0;ye<Nt.length;++ye){const rt=Nt[ye];Dt[rt]=rt}const qt=Dt.filter(ye=>ye!==void 0);tt.push({segmentation:_t,labels:qt})}return tt}function q(ot,V,ge,Ie){const tt=[],xe=[],Qe=[];for(let ft=0;ft<ot.dims[0];++ft){const gt=ot[ft],kt=V[ft],_t=(0,Ce.max)(gt.data)[1];if(_t===Ie)continue;const Nt=(0,Ce.softmax)(gt.data)[_t];Nt>ge&&(tt.push(kt),xe.push(Nt),Qe.push(_t))}return[tt,xe,Qe]}function re(ot,V,ge,Ie=.5,tt=.8){const xe=[];let Qe=0,ft=0;const gt=V[ge].data;for(let _t=0;_t<ot.length;++_t)ot[_t]===ge&&(xe.push(_t),++Qe),gt[_t]>=Ie&&++ft;let kt=Qe>0&&ft>0;return kt&&(kt=Qe/ft>tt),[kt,xe]}function fe(ot,V,ge,Ie,tt,xe=null,Qe=null){const[ft,gt]=Qe??ot[0].dims,kt=new Ee.Tensor("int32",new Int32Array(ft*gt),[ft,gt]),_t=[];if(Qe!==null)for(let ye=0;ye<ot.length;++ye)ot[ye]=(0,Ee.interpolate)(ot[ye],Qe,"bilinear",!1);const Bt=new Int32Array(ot[0].data.length),Nt=new Float32Array(ot[0].data.length);for(let ye=0;ye<ot.length;++ye){let rt=V[ye];const ut=ot[ye].data;for(let Ht=0;Ht<ut.length;++Ht)ut[Ht]*=rt,ut[Ht]>Nt[Ht]&&(Bt[Ht]=ye,Nt[Ht]=ut[Ht])}let Dt=0;const qt=kt.data;for(let ye=0;ye<ge.length;++ye){const rt=ge[ye],[ut,Ht]=re(Bt,ot,ye,Ie,tt);if(ut){++Dt;for(const _r of Ht)qt[_r]=Dt;_t.push({id:Dt,label_id:rt,score:V[ye]})}}return[kt,_t]}function le(ot,V=.5,ge=.5,Ie=.8,tt=null,xe=null){tt===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),tt=new Set);const Qe=ot.class_queries_logits??ot.logits,gt=(ot.masks_queries_logits??ot.pred_masks).sigmoid();let[kt,_t,Bt]=Qe.dims;if(Bt-=1,xe!==null&&xe.length!==kt)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Nt=[];for(let Dt=0;Dt<kt;++Dt){let qt=xe!==null?xe[Dt]:null,ye=Qe[Dt],rt=gt[Dt],[ut,Ht,_r]=q(ye,rt,V,Bt);if(_r.length===0){let[or,Gr]=qt??rt.dims.slice(-2),jr=new Ee.Tensor("int32",new Int32Array(or*Gr).fill(-1),[or,Gr]);Nt.push({segmentation:jr,segments_info:[]});continue}let[Nr,Xr]=fe(ut,Ht,_r,ge,Ie,tt,qt);Nt.push({segmentation:Nr,segments_info:Xr})}return Nt}function O(ot,V){var ge;if(!(ot instanceof Float32Array||ot instanceof Float64Array))throw new Error(`${V} expects input to be a Float32Array or a Float64Array, but got ${((ge=ot==null?void 0:ot.constructor)==null?void 0:ge.name)??typeof ot} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function ee(ot,V,ge=0,Ie=null){const tt=ot/V;let xe=(0,Ce.bankers_round)(tt)*V;return Ie!==null&&xe>Ie&&(xe=Math.floor(tt)*V),xe<ge&&(xe=Math.ceil(tt)*V),xe}function ce([ot,V],ge){return[Math.max(Math.floor(ot/ge),1)*ge,Math.max(Math.floor(V/ge),1)*ge]}class X extends F.Callable{constructor(V){super(),this.config=V}}class K extends X{constructor(V){super(V),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??.00392156862745098,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=this.config.do_flip_channel_order??!1}async thumbnail(V,ge,Ie=2){const tt=V.height,xe=V.width,Qe=ge.height,ft=ge.width;let gt=Math.min(tt,Qe),kt=Math.min(xe,ft);return gt===tt&&kt===xe?V:(tt>xe?kt=Math.floor(xe*gt/tt):xe>tt&&(gt=Math.floor(tt*kt/xe)),await V.resize(kt,gt,{resample:Ie}))}async crop_margin(V,ge=200){const Ie=V.clone().grayscale(),tt=(0,Ce.min)(Ie.data)[0],Qe=(0,Ce.max)(Ie.data)[0]-tt;if(Qe===0)return V;const ft=ge/255;let gt=Ie.width,kt=Ie.height,_t=0,Bt=0;const Nt=Ie.data;for(let Dt=0;Dt<Ie.height;++Dt){const qt=Dt*Ie.width;for(let ye=0;ye<Ie.width;++ye)(Nt[qt+ye]-tt)/Qe<ft&&(gt=Math.min(gt,ye),kt=Math.min(kt,Dt),_t=Math.max(_t,ye),Bt=Math.max(Bt,Dt))}return V=await V.crop([gt,kt,_t,Bt]),V}pad_image(V,ge,Ie,{mode:tt="constant",center:xe=!1,constant_values:Qe=0}={}){const[ft,gt,kt]=ge;let _t,Bt;if(typeof Ie=="number"?(_t=Ie,Bt=Ie):(_t=Ie.width,Bt=Ie.height),_t!==gt||Bt!==ft){const Nt=new Float32Array(_t*Bt*kt);if(Array.isArray(Qe))for(let ye=0;ye<Nt.length;++ye)Nt[ye]=Qe[ye%kt];else Qe!==0&&Nt.fill(Qe);const[Dt,qt]=xe?[Math.floor((_t-gt)/2),Math.floor((Bt-ft)/2)]:[0,0];for(let ye=0;ye<ft;++ye){const rt=(ye+qt)*_t,ut=ye*gt;for(let Ht=0;Ht<gt;++Ht){const _r=(rt+Ht+Dt)*kt,Nr=(ut+Ht)*kt;for(let Xr=0;Xr<kt;++Xr)Nt[_r+Xr]=V[Nr+Xr]}}if(tt==="symmetric"){if(xe)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const ye=ft-1,rt=gt-1;for(let ut=0;ut<Bt;++ut){const Ht=ut*_t,_r=(0,he.calculateReflectOffset)(ut,ye)*gt;for(let Nr=0;Nr<_t;++Nr){if(ut<ft&&Nr<gt)continue;const Xr=(Ht+Nr)*kt,or=(_r+(0,he.calculateReflectOffset)(Nr,rt))*kt;for(let Gr=0;Gr<kt;++Gr)Nt[Xr+Gr]=V[or+Gr]}}}V=Nt,ge=[Bt,_t,kt]}return[V,ge]}rescale(V){for(let ge=0;ge<V.length;++ge)V[ge]=this.rescale_factor*V[ge]}get_resize_output_image_size(V,ge){const[Ie,tt]=V.size;let xe,Qe;if(this.do_thumbnail){const{height:ft,width:gt}=ge;xe=Math.min(ft,gt)}else Number.isInteger(ge)?(xe=ge,Qe=this.config.max_size??xe):ge!==void 0&&(xe=ge.shortest_edge,Qe=ge.longest_edge);if(xe!==void 0||Qe!==void 0){const ft=xe===void 0?1:Math.max(xe/Ie,xe/tt),gt=Ie*ft,kt=tt*ft,_t=Qe===void 0?1:Math.min(Qe/gt,Qe/kt);let Bt=Math.floor(Number((gt*_t).toFixed(2))),Nt=Math.floor(Number((kt*_t).toFixed(2)));return this.size_divisibility!==void 0&&([Bt,Nt]=ce([Bt,Nt],this.size_divisibility)),[Bt,Nt]}else if(ge!==void 0&&ge.width!==void 0&&ge.height!==void 0){let ft=ge.width,gt=ge.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let kt=gt/tt,_t=ft/Ie;Math.abs(1-_t)<Math.abs(1-kt)?kt=_t:_t=kt,gt=ee(kt*tt,this.config.ensure_multiple_of),ft=ee(_t*Ie,this.config.ensure_multiple_of)}return[ft,gt]}else{if(this.size_divisibility!==void 0)return ce([Ie,tt],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(ge)}`)}}async resize(V){const[ge,Ie]=this.get_resize_output_image_size(V,this.size);return await V.resize(ge,Ie,{resample:this.resample})}async preprocess(V,{do_normalize:ge=null,do_pad:Ie=null,do_convert_rgb:tt=null,do_convert_grayscale:xe=null,do_flip_channel_order:Qe=null}={}){this.do_crop_margin&&(V=await this.crop_margin(V));const[ft,gt]=V.size;if(tt??this.do_convert_rgb?V=V.rgb():xe&&(V=V.grayscale()),this.do_resize&&(V=await this.resize(V)),this.do_thumbnail&&(V=await this.thumbnail(V,this.size,this.resample)),this.do_center_crop){let Dt,qt;Number.isInteger(this.crop_size)?(Dt=this.crop_size,qt=this.crop_size):(Dt=this.crop_size.width,qt=this.crop_size.height),V=await V.center_crop(Dt,qt)}const kt=[V.height,V.width];let _t=Float32Array.from(V.data),Bt=[V.height,V.width,V.channels];if(this.do_rescale&&this.rescale(_t),ge??this.do_normalize){let Dt=this.image_mean;Array.isArray(this.image_mean)||(Dt=new Array(V.channels).fill(Dt));let qt=this.image_std;if(Array.isArray(this.image_std)||(qt=new Array(V.channels).fill(Dt)),Dt.length!==V.channels||qt.length!==V.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${Dt.length}) and \`image_std\` (${qt.length}) must match the number of channels in the image (${V.channels}).`);for(let ye=0;ye<_t.length;ye+=V.channels)for(let rt=0;rt<V.channels;++rt)_t[ye+rt]=(_t[ye+rt]-Dt[rt])/qt[rt]}if(Ie??this.do_pad){if(this.pad_size)[_t,Bt]=this.pad_image(_t,[V.height,V.width,V.channels],this.pad_size);else if(this.size_divisibility){const[Dt,qt]=ce([Bt[1],Bt[0]],this.size_divisibility);[_t,Bt]=this.pad_image(_t,Bt,{width:Dt,height:qt})}}if(Qe??this.do_flip_channel_order){if(Bt[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let Dt=0;Dt<_t.length;Dt+=3){const qt=_t[Dt];_t[Dt]=_t[Dt+2],_t[Dt+2]=qt}}const Nt=new Ee.Tensor("float32",_t,Bt).permute(2,0,1);return{original_size:[gt,ft],reshaped_input_size:kt,pixel_values:Nt}}async _call(V,...ge){Array.isArray(V)||(V=[V]);const Ie=await Promise.all(V.map(xe=>this.preprocess(xe)));return{pixel_values:(0,Ee.stack)(Ie.map(xe=>xe.pixel_values),0),original_sizes:Ie.map(xe=>xe.original_size),reshaped_input_sizes:Ie.map(xe=>xe.reshaped_input_size)}}}class N extends K{post_process_semantic_segmentation(...V){return D(...V)}}class k extends K{post_process_semantic_segmentation(...V){return D(...V)}}class R extends K{}class E extends K{}class de extends E{}class we extends K{}class $e extends K{}class Oe extends K{}class Fe extends Oe{}class nt extends K{}class Je extends K{}class lt extends K{constructor(V){super(V),this.crop_pct=this.config.crop_pct??.875}async resize(V){var Ie;const ge=(Ie=this.size)==null?void 0:Ie.shortest_edge;if(ge===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(ge<384){const tt=Math.floor(ge/this.crop_pct),[xe,Qe]=this.get_resize_output_image_size(V,{shortest_edge:tt});V=await V.resize(xe,Qe,{resample:this.resample}),V=await V.center_crop(ge,ge)}else V=await V.resize(ge,ge,{resample:this.resample});return V}}class me extends lt{}class W extends K{}class ue extends K{}class Te extends K{constructor(V){super(V),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(ge=>ge*ge))}}class Ne extends K{}class at extends K{}class se extends K{}class Ke extends K{}class ct extends K{}class Be extends ct{}class mt extends K{post_process_object_detection(...V){return z(...V)}}class bt extends mt{}class He extends K{post_process_object_detection(...V){return z(...V)}}class J extends K{}class Ae extends K{}class Ge extends K{pad_image(V,ge,Ie,tt={}){const[xe,Qe,ft]=ge;let gt=this.image_mean;Array.isArray(this.image_mean)||(gt=new Array(ft).fill(gt));let kt=this.image_std;Array.isArray(kt)||(kt=new Array(ft).fill(gt));const _t=gt.map((Bt,Nt)=>-Bt/kt[Nt]);return super.pad_image(V,ge,Ie,{center:!0,constant_values:_t,...tt})}}class Ze extends Ge{}class je extends K{async _call(V){const ge=await super._call(V),Ie=[ge.pixel_values.dims[0],64,64],tt=(0,Ee.full)(Ie,1n);return{...ge,pixel_mask:tt}}post_process_object_detection(...V){return z(...V)}post_process_panoptic_segmentation(...V){return le(...V)}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class Ve extends K{post_process_panoptic_segmentation(...V){return le(...V)}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class dt extends K{post_process_object_detection(...V){return z(...V)}}class yt extends K{reshape_input_points(V,ge,Ie,tt=!1){V=structuredClone(V);let xe=(0,he.calculateDimensions)(V);if(xe.length===3)tt||(xe=[1,...xe]),V=[V];else if(xe.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let Qe=0;Qe<V.length;++Qe){let ft=ge[Qe],gt=Ie[Qe],kt=[gt[0]/ft[0],gt[1]/ft[1]];for(let _t=0;_t<V[Qe].length;++_t)for(let Bt=0;Bt<V[Qe][_t].length;++Bt)for(let Nt=0;Nt<V[Qe][_t][Bt].length;++Nt)V[Qe][_t][Bt][Nt]*=kt[Nt%2]}return new Ee.Tensor("float32",Float32Array.from(V.flat(1/0)),xe)}add_input_labels(V,ge){let Ie=(0,he.calculateDimensions)(V);if(Ie.length===2)Ie=[1,...Ie],V=[V];else if(Ie.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(Ie.some((tt,xe)=>tt!==ge.dims[xe]))throw Error(`The first ${Ie.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new Ee.Tensor("int64",V.flat(1/0).map(BigInt),Ie)}async _call(V,{input_points:ge=null,input_labels:Ie=null,input_boxes:tt=null}={}){const xe=await super._call(V);if(ge&&(xe.input_points=this.reshape_input_points(ge,xe.original_sizes,xe.reshaped_input_sizes)),Ie){if(!xe.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");xe.input_labels=this.add_input_labels(Ie,xe.input_points)}return tt&&(xe.input_boxes=this.reshape_input_points(tt,xe.original_sizes,xe.reshaped_input_sizes,!0)),xe}async post_process_masks(V,ge,Ie,{mask_threshold:tt=0,binarize:xe=!0,pad_size:Qe=null}={}){const ft=[];Qe=Qe??this.pad_size;const gt=[Qe.height,Qe.width];for(let kt=0;kt<ge.length;++kt){const _t=ge[kt],Bt=Ie[kt];let Nt=await(0,Ee.interpolate_4d)(V[kt],{mode:"bilinear",size:gt});if(Nt=Nt.slice(null,null,[0,Bt[0]],[0,Bt[1]]),Nt=await(0,Ee.interpolate_4d)(Nt,{mode:"bilinear",size:_t}),xe){const Dt=Nt.data,qt=new Uint8Array(Dt.length);for(let ye=0;ye<Dt.length;++ye)Dt[ye]>tt&&(qt[ye]=1);Nt=new Ee.Tensor("bool",qt,Nt.dims)}ft.push(Nt)}return ft}generate_crop_boxes(V,ge,{crop_n_layers:Ie=0,overlap_ratio:tt=.3413333333333333,points_per_crop:xe=32,crop_n_points_downscale_factor:Qe=1}={}){}}class Pt extends K{pad_image(V,ge,Ie,tt={}){const[xe,Qe,ft]=ge;return super.pad_image(V,ge,{width:Qe+(Ie-Qe%Ie)%Ie,height:xe+(Ie-xe%Ie)%Ie},{mode:"symmetric",center:!1,constant_values:-1,...tt})}}class Et extends K{async _call(V,ge){Array.isArray(V)||(V=[V]),Array.isArray(ge)||(ge=[ge]);const Ie=await Promise.all(V.map(Qe=>this.preprocess(Qe))),tt=await Promise.all(ge.map(Qe=>this.preprocess(Qe,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,Ee.stack)(Ie.map((Qe,ft)=>(0,Ee.cat)([Qe.pixel_values,tt[ft].pixel_values],0)),0),original_sizes:Ie.map(Qe=>Qe.original_size),reshaped_input_sizes:Ie.map(Qe=>Qe.reshaped_input_size)}}}class M extends X{constructor(V){var ge;super(V),(ge=this.config).mel_filters??(ge.mel_filters=(0,U.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney")),this.window=(0,U.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(V){const ge=await(0,U.spectrogram)(V,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),Ie=ge.data,tt=(0,Ce.max)(Ie)[0];for(let xe=0;xe<Ie.length;++xe)Ie[xe]=(Math.max(Ie[xe],tt-8)+4)/4;return ge}async _call(V){O(V,"WhisperFeatureExtractor");let ge;return V.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),ge=V.slice(0,this.config.n_samples)):(ge=new Float32Array(this.config.n_samples),ge.set(V)),{input_features:(await this._extract_fbank_features(ge)).unsqueeze_(0)}}}class H extends X{_zero_mean_unit_var_norm(V){const Ie=V.reduce((xe,Qe)=>xe+Qe,0)/V.length,tt=V.reduce((xe,Qe)=>xe+(Qe-Ie)**2,0)/V.length;return V.map(xe=>(xe-Ie)/Math.sqrt(tt+1e-7))}async _call(V){O(V,"Wav2Vec2FeatureExtractor"),V instanceof Float64Array&&(V=new Float32Array(V));let ge=V;this.config.do_normalize&&(ge=this._zero_mean_unit_var_norm(ge));const Ie=[1,ge.length];return{input_values:new Ee.Tensor("float32",ge,Ie),attention_mask:new Ee.Tensor("int64",new BigInt64Array(ge.length).fill(1n),Ie)}}}class $ extends X{constructor(V){super(V);const ge=this.config.sampling_rate,Ie=(0,U.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let tt=0;tt<Ie.length;++tt)Ie[tt].push(0);this.mel_filters=Ie,this.window=(0,U.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(V,ge){return V=V.map(Ie=>Ie*32768),(0,U.spectrogram)(V,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ge,transpose:!0})}async _call(V,{padding:ge=!0,pad_to_multiple_of:Ie=2,do_normalize_per_mel_bins:tt=!0,return_attention_mask:xe=!0}={}){O(V,"SeamlessM4TFeatureExtractor");let Qe=await this._extract_fbank_features(V,this.config.max_length);if(tt){const[qt,ye]=Qe.dims,rt=Qe.data;for(let ut=0;ut<ye;++ut){let Ht=0;for(let or=0;or<qt;++or)Ht+=rt[or*ye+ut];const _r=Ht/qt;let Nr=0;for(let or=0;or<qt;++or)Nr+=(rt[or*ye+ut]-_r)**2;Nr/=qt-1;const Xr=Math.sqrt(Nr+1e-7);for(let or=0;or<qt;++or){const Gr=or*ye+ut;rt[Gr]=(rt[Gr]-_r)/Xr}}}let ft;if(ge){const[qt,ye]=Qe.dims,rt=Qe.data,ut=qt%Ie;if(ut>0){const Ht=new Float32Array(ye*(qt+ut));Ht.set(rt),Ht.fill(this.config.padding_value,rt.length);const _r=qt+ut;Qe=new Ee.Tensor(Qe.type,Ht,[_r,ye]),xe&&(ft=new Ee.Tensor("int64",new BigInt64Array(_r),[1,_r]),ft.data.fill(1n,0,qt))}}const[gt,kt]=Qe.dims,_t=this.config.stride;if(gt%_t!==0)throw new Error(`The number of frames (${gt}) must be a multiple of the stride (${_t}).`);const Nt=Qe.view(1,Math.floor(gt/_t),kt*_t),Dt={input_features:Nt};if(xe){const qt=Nt.dims[1],ye=new BigInt64Array(qt);if(ft){const rt=ft.data;for(let ut=1,Ht=0;ut<gt;ut+=_t,++Ht)ye[Ht]=rt[ut]}else ye.fill(1n);Dt.attention_mask=new Ee.Tensor("int64",ye,[1,qt])}return Dt}}class Z extends X{constructor(V){super(V);const ge=this.config.sampling_rate,Ie=(0,U.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let tt=0;tt<Ie.length;++tt)Ie[tt].push(0);this.mel_filters=Ie,this.window=(0,U.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(V,ge){return(0,U.spectrogram)(V,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:ge,transpose:!0})}async _call(V){O(V,"ASTFeatureExtractor");const ge=await this._extract_fbank_features(V,this.config.max_length);if(this.config.do_normalize){const Ie=this.std*2,tt=ge.data;for(let xe=0;xe<tt.length;++xe)tt[xe]=(tt[xe]-this.mean)/Ie}return{input_values:ge.unsqueeze_(0)}}}class pe extends X{constructor(V){super(V),this.mel_filters=(0,U.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,U.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,U.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(V,ge,Ie,tt){let xe;const Qe=V.length-ge;if(Qe>0)if(Ie==="rand_trunc"){const ft=Math.floor(Math.random()*(Qe+1));V=V.subarray(ft,ft+ge),xe=await this._extract_fbank_features(V,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${Ie}" not implemented`);else{if(Qe<0){let ft=new Float64Array(ge);if(ft.set(V),tt==="repeat")for(let gt=V.length;gt<ge;gt+=V.length)ft.set(V.subarray(0,Math.min(V.length,ge-gt)),gt);else if(tt==="repeatpad")for(let gt=V.length;gt<-Qe;gt+=V.length)ft.set(V,gt);V=ft}if(Ie==="fusion")throw new Error(`Truncation strategy "${Ie}" not implemented`);xe=await this._extract_fbank_features(V,this.mel_filters_slaney,this.config.nb_max_samples)}return xe.unsqueeze_(0)}async _extract_fbank_features(V,ge,Ie=null){return(0,U.spectrogram)(V,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:ge,log_mel:"dB",max_num_frames:Ie,do_pad:!1,transpose:!0})}async _call(V,{max_length:ge=null}={}){return O(V,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(V,ge??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}class et extends X{async _call(V){O(V,"PyAnnoteFeatureExtractor"),V instanceof Float64Array&&(V=new Float32Array(V));const ge=[1,1,V.length];return{input_values:new Ee.Tensor("float32",V,ge)}}samples_to_frames(V){return(V-this.config.offset)/this.config.step}post_process_speaker_diarization(V,ge){const Ie=ge/this.samples_to_frames(ge)/this.config.sampling_rate,tt=[];for(const xe of V.tolist()){const Qe=[];let ft=-1;for(let gt=0;gt<xe.length;++gt){const kt=(0,Ce.softmax)(xe[gt]),[_t,Bt]=(0,Ce.max)(kt),[Nt,Dt]=[gt,gt+1];Bt!==ft?(ft=Bt,Qe.push({id:Bt,start:Nt,end:Dt,score:_t})):(Qe.at(-1).end=Dt,Qe.at(-1).score+=_t)}tt.push(Qe.map(({id:gt,start:kt,end:_t,score:Bt})=>({id:gt,start:kt*Ie,end:_t*Ie,confidence:Bt/(_t-kt)})))}return tt}}class Xe extends X{constructor(V){super(V);const ge=this.config.sampling_rate,Ie=(0,U.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(ge/2),ge,null,"kaldi",!0);for(let tt=0;tt<Ie.length;++tt)Ie[tt].push(0);this.mel_filters=Ie,this.window=(0,U.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(V){return V=V.map(ge=>ge*32768),(0,U.spectrogram)(V,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(V){O(V,"WeSpeakerFeatureExtractor");const ge=(await this._extract_fbank_features(V)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const Ie=ge.mean(1).data,tt=ge.data,[xe,Qe,ft]=ge.dims;for(let gt=0;gt<xe;++gt){const kt=gt*Qe*ft,_t=gt*ft;for(let Bt=0;Bt<Qe;++Bt){const Nt=kt+Bt*ft;for(let Dt=0;Dt<ft;++Dt)tt[Nt+Dt]-=Ie[_t+Dt]}}}return{input_features:ge}}}class Rt extends X{}class ht extends F.Callable{constructor(V){super(),this.feature_extractor=V}async _call(V,...ge){return await this.feature_extractor(V,...ge)}}class Tt extends ht{async _call(...V){return await this.feature_extractor(...V)}post_process_masks(...V){return this.feature_extractor.post_process_masks(...V)}reshape_input_points(...V){return this.feature_extractor.reshape_input_points(...V)}}class zt extends ht{async _call(V){return await this.feature_extractor(V)}}class St extends ht{async _call(V){return await this.feature_extractor(V)}}class dr extends ht{async _call(V){return await this.feature_extractor(V)}post_process_speaker_diarization(...V){return this.feature_extractor.post_process_speaker_diarization(...V)}}class Tr extends ht{async _call(V){return await this.feature_extractor(V)}}class Zr extends ht{}class Dr extends ht{constructor(V){super(V);const{tasks_answer_post_processing_type:ge,task_prompts_without_inputs:Ie,task_prompts_with_input:tt}=V.config;this.tasks_answer_post_processing_type=new Map(Object.entries(ge??{})),this.task_prompts_without_inputs=new Map(Object.entries(Ie??{})),this.task_prompts_with_input=new Map(Object.entries(tt??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(V){typeof V=="string"&&(V=[V]);const ge=[];for(const Ie of V)if(this.task_prompts_without_inputs.has(Ie))ge.push(this.task_prompts_without_inputs.get(Ie));else{for(const[tt,xe]of this.task_prompts_with_input)if(Ie.includes(tt)){ge.push(xe.replaceAll("{input}",Ie).replaceAll(tt,""));break}ge.length!==V.length&&ge.push(Ie)}return ge}post_process_generation(V,ge,Ie){const tt=this.tasks_answer_post_processing_type.get(ge)??"pure_text";V=V.replaceAll("<s>","").replaceAll("</s>","");let xe;switch(tt){case"pure_text":xe=V;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const Qe=tt==="ocr"?"quad_boxes":"bboxes",ft=V.matchAll(this.regexes[Qe]),gt=[],kt=[];for(const[_t,Bt,...Nt]of ft)gt.push(Bt?Bt.trim():gt.at(-1)??""),kt.push(Nt.map((Dt,qt)=>(Number(Dt)+.5)/this.size_per_bin*Ie[qt%2]));xe={labels:gt,[Qe]:kt};break;default:throw new Error(`Task "${ge}" (of type "${tt}") not yet implemented.`)}return{[ge]:xe}}}class en{static async from_pretrained(V,{progress_callback:ge=null,config:Ie=null,cache_dir:tt=null,local_files_only:xe=!1,revision:Qe="main"}={}){let ft=Ie??await(0,be.getModelJSON)(V,"preprocessor_config.json",!0,{progress_callback:ge,config:Ie,cache_dir:tt,local_files_only:xe,revision:Qe}),gt=ft.feature_extractor_type??ft.image_processor_type,kt=this.FEATURE_EXTRACTOR_CLASS_MAPPING[gt];if(!kt)if(ft.size!==void 0)console.warn(`Feature extractor type "${gt}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),kt=K;else throw new Error(`Unknown Feature Extractor type: ${gt}`);let _t=this.PROCESSOR_CLASS_MAPPING[ft.processor_class]??ht,Bt=new kt(ft);return new _t(Bt)}}Me(en,"FEATURE_EXTRACTOR_CLASS_MAPPING",{ImageFeatureExtractor:K,WhisperFeatureExtractor:M,ViTFeatureExtractor:W,MobileViTFeatureExtractor:ct,MobileViTImageProcessor:Be,MobileNetV1FeatureExtractor:Ne,MobileNetV2FeatureExtractor:at,MobileNetV3FeatureExtractor:se,MobileNetV4FeatureExtractor:Ke,OwlViTFeatureExtractor:mt,Owlv2ImageProcessor:bt,CLIPFeatureExtractor:Oe,CLIPImageProcessor:Fe,Florence2Processor:Dr,ChineseCLIPFeatureExtractor:nt,SiglipImageProcessor:Je,ConvNextFeatureExtractor:lt,ConvNextImageProcessor:me,SegformerFeatureExtractor:k,SapiensFeatureExtractor:N,BitImageProcessor:we,DPTImageProcessor:de,DPTFeatureExtractor:E,PvtImageProcessor:R,GLPNFeatureExtractor:$e,BeitFeatureExtractor:Ae,DeiTFeatureExtractor:J,DetrFeatureExtractor:je,RTDetrImageProcessor:He,MaskFormerFeatureExtractor:Ve,YolosFeatureExtractor:dt,DonutFeatureExtractor:Ge,NougatImageProcessor:Ze,EfficientNetImageProcessor:Te,ViTImageProcessor:ue,VitMatteImageProcessor:Et,SamImageProcessor:yt,Swin2SRImageProcessor:Pt,Wav2Vec2FeatureExtractor:H,SeamlessM4TFeatureExtractor:$,SpeechT5FeatureExtractor:Rt,ASTFeatureExtractor:Z,ClapFeatureExtractor:pe,PyAnnoteFeatureExtractor:et,WeSpeakerFeatureExtractor:Xe}),Me(en,"PROCESSOR_CLASS_MAPPING",{WhisperProcessor:zt,Wav2Vec2ProcessorWithLM:St,PyAnnoteProcessor:dr,SamProcessor:Tt,SpeechT5Processor:Tr,OwlViTProcessor:Zr,Florence2Processor:Dr})},"./src/tokenizers.js":(It,Se,j)=>{j.r(Se),j.d(Se,{AlbertTokenizer:()=>ft,AutoTokenizer:()=>Is,BartTokenizer:()=>Xr,BertTokenizer:()=>Qe,BlenderbotSmallTokenizer:()=>Ss,BlenderbotTokenizer:()=>ks,BloomTokenizer:()=>zn,CLIPTokenizer:()=>fs,CamembertTokenizer:()=>rt,CodeGenTokenizer:()=>hs,CodeLlamaTokenizer:()=>vs,CohereTokenizer:()=>ns,ConvBertTokenizer:()=>Dt,DebertaTokenizer:()=>_t,DebertaV2Tokenizer:()=>Bt,DistilBertTokenizer:()=>ye,ElectraTokenizer:()=>Ht,EsmTokenizer:()=>$s,FalconTokenizer:()=>Ts,GPT2Tokenizer:()=>Nr,GPTNeoXTokenizer:()=>Cs,GemmaTokenizer:()=>ts,Grok1Tokenizer:()=>Kn,HerbertTokenizer:()=>Nt,LlamaTokenizer:()=>cs,M2M100Tokenizer:()=>ps,MBart50Tokenizer:()=>Gr,MBartTokenizer:()=>or,MPNetTokenizer:()=>xs,MarianTokenizer:()=>Yt,MobileBertTokenizer:()=>gt,NllbTokenizer:()=>Ln,NougatTokenizer:()=>Ps,PreTrainedTokenizer:()=>xe,Qwen2Tokenizer:()=>Es,RoFormerTokenizer:()=>qt,RobertaTokenizer:()=>jr,SiglipTokenizer:()=>ms,SpeechT5Tokenizer:()=>_s,SqueezeBertTokenizer:()=>kt,T5Tokenizer:()=>_r,TokenizerModel:()=>$e,VitsTokenizer:()=>As,Wav2Vec2CTCTokenizer:()=>rs,WhisperTokenizer:()=>Dn,XLMRobertaTokenizer:()=>Hn,XLMTokenizer:()=>ut,is_chinese_char:()=>X});var F=j("./src/utils/generic.js"),he=j("./src/utils/core.js"),be=j("./src/utils/hub.js"),Ce=j("./src/utils/maths.js"),Ee=j("./src/utils/tensor.js"),U=j("./src/utils/data-structures.js"),P=j("./node_modules/@huggingface/jinja/dist/index.js"),z=j("./src/models/whisper/common_whisper.js");j("./src/utils/constants.js");async function D(ae,m){const A=await Promise.all([(0,be.getModelJSON)(ae,"tokenizer.json",!0,m),(0,be.getModelJSON)(ae,"tokenizer_config.json",!0,m)]);return m.legacy!==null&&(A[1].legacy=m.legacy),A}function q(ae,m){const A=[];let Y=0;for(const oe of ae.matchAll(m)){const _e=oe[0];Y<oe.index&&A.push(ae.slice(Y,oe.index)),_e.length>0&&A.push(_e),Y=oe.index+_e.length}return Y<ae.length&&A.push(ae.slice(Y)),A}function re(ae,m=!0){if(ae.Regex!==void 0){let A=ae.Regex.replace(/\\([#&~])/g,"$1");for(const[Y,oe]of de)A=A.replaceAll(Y,oe);return new RegExp(A,"gu")}else if(ae.String!==void 0){const A=(0,he.escapeRegExp)(ae.String);return new RegExp(m?A:`(${A})`,"gu")}else return console.warn("Unknown pattern type:",ae),null}function fe(ae){return new Map(Object.entries(ae))}function le(ae){const m=ae.dims;switch(m.length){case 1:return ae.tolist();case 2:if(m[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ae.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${m.length}.`)}}function O(ae){return ae.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function ee(ae){return ae.replace(new RegExp("\\p{M}","gu"),"")}function ce(ae){return ee(ae.toLowerCase())}function X(ae){return ae>=19968&&ae<=40959||ae>=13312&&ae<=19903||ae>=131072&&ae<=173791||ae>=173824&&ae<=177983||ae>=177984&&ae<=178207||ae>=178208&&ae<=183983||ae>=63744&&ae<=64255||ae>=194560&&ae<=195103}function K(ae,m,A){const Y=[];let oe=0;for(;oe<ae.length;){if(Y.push(ae[oe]),(m.get(ae[oe])??A)!==A){++oe;continue}for(;++oe<ae.length&&(m.get(ae[oe])??A)===A;)m.get(Y.at(-1))!==A&&(Y[Y.length-1]+=ae[oe])}return Y}function N(ae){return ae.match(/\S+/g)||[]}const k="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",R=new RegExp(`^[${k}]+$`,"gu"),E=".,!?…。，、।۔،",de=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${E}])]+`,` ?[^\\s${E}]+`]]);class we{constructor(m){this.content=m.content,this.id=m.id,this.single_word=m.single_word??!1,this.lstrip=m.lstrip??!1,this.rstrip=m.rstrip??!1,this.special=m.special??!1,this.normalized=m.normalized??null}}class $e extends F.Callable{constructor(m){super(),this.config=m,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(m,...A){switch(m.type){case"WordPiece":return new Oe(m);case"Unigram":return new Fe(m,...A);case"BPE":return new lt(m);default:if(m.vocab)return Array.isArray(m.vocab)?new Fe(m,...A):new me(m,...A);throw new Error(`Unknown TokenizerModel type: ${m.type}`)}}_call(m){return m=this.encode(m),this.fuse_unk&&(m=K(m,this.tokens_to_ids,this.unk_token_id)),m}encode(m){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(m){return m.map(A=>this.tokens_to_ids.get(A)??this.unk_token_id)}convert_ids_to_tokens(m){return m.map(A=>this.vocab[A]??this.unk_token)}}class Oe extends $e{constructor(m){super(m),this.tokens_to_ids=fe(m.vocab),this.unk_token_id=this.tokens_to_ids.get(m.unk_token),this.unk_token=m.unk_token,this.max_input_chars_per_word=m.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[A,Y]of this.tokens_to_ids)this.vocab[Y]=A}encode(m){const A=[];for(const Y of m){const oe=[...Y];if(oe.length>this.max_input_chars_per_word){A.push(this.unk_token);continue}let _e=!1,Ue=0;const wt=[];for(;Ue<oe.length;){let Ct=oe.length,xt=null;for(;Ue<Ct;){let Ft=oe.slice(Ue,Ct).join("");if(Ue>0&&(Ft=this.config.continuing_subword_prefix+Ft),this.tokens_to_ids.has(Ft)){xt=Ft;break}--Ct}if(xt===null){_e=!0;break}wt.push(xt),Ue=Ct}_e?A.push(this.unk_token):A.push(...wt)}return A}}class Fe extends $e{constructor(m,A){super(m);const Y=m.vocab.length;this.vocab=new Array(Y),this.scores=new Array(Y);for(let oe=0;oe<Y;++oe){const _e=m.vocab[oe];this.vocab[oe]=_e[0],this.scores[oe]=_e[1]}this.unk_token_id=m.unk_id,this.unk_token=this.vocab[m.unk_id],this.tokens_to_ids=new Map(this.vocab.map((oe,_e)=>[oe,_e])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=A.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,Ce.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new U.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(m){const A=m.chars,Y=1;let oe=0;for(;oe<A.length;){let _e=!1;const Ue=A.slice(oe).join(""),wt=this.trie.commonPrefixSearch(Ue);for(const Ct of wt){const xt=this.tokens_to_ids.get(Ct),Ft=this.scores[xt],tr=(0,he.len)(Ct);m.insert(oe,tr,Ft,xt),!_e&&tr===Y&&(_e=!0)}_e||m.insert(oe,Y,this.unk_score,this.unk_token_id),oe+=Y}}tokenize(m){const A=new U.TokenLattice(m,this.bos_token_id,this.eos_token_id);return this.populateNodes(A),A.tokens()}encode(m){const A=[];for(const Y of m){const oe=this.tokenize(Y);A.push(...oe)}return A}}const nt=(()=>{const ae=[...Array.from({length:94},(oe,_e)=>_e+33),...Array.from({length:12},(oe,_e)=>_e+161),...Array.from({length:82},(oe,_e)=>_e+174)],m=ae.slice();let A=0;for(let oe=0;oe<256;++oe)ae.includes(oe)||(ae.push(oe),m.push(256+A),A+=1);const Y=m.map(oe=>String.fromCharCode(oe));return Object.fromEntries(ae.map((oe,_e)=>[oe,Y[_e]]))})(),Je=(0,he.reverseDictionary)(nt);class lt extends $e{constructor(m){super(m),this.tokens_to_ids=fe(m.vocab),this.unk_token_id=this.tokens_to_ids.get(m.unk_token),this.unk_token=m.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[Y,oe]of this.tokens_to_ids)this.vocab[oe]=Y;const A=Array.isArray(m.merges[0]);this.merges=A?m.merges:m.merges.map(Y=>Y.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((Y,oe)=>[JSON.stringify(Y),oe])),this.end_of_word_suffix=m.end_of_word_suffix,this.continuing_subword_suffix=m.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(m){if(m.length===0)return[];const A=this.cache.get(m);if(A!==void 0)return A;const Y=Array.from(m);this.end_of_word_suffix&&(Y[Y.length-1]+=this.end_of_word_suffix);let oe=[];if(Y.length>1){const _e=new U.PriorityQueue((Ct,xt)=>Ct.score<xt.score);let Ue={token:Y[0],bias:0,prev:null,next:null},wt=Ue;for(let Ct=1;Ct<Y.length;++Ct){const xt={bias:Ct/Y.length,token:Y[Ct],prev:wt,next:null};wt.next=xt,this._add_node(_e,wt),wt=xt}for(;!_e.isEmpty();){const Ct=_e.pop();if(Ct.deleted||!Ct.next||Ct.next.deleted)continue;if(Ct.deleted=!0,Ct.next.deleted=!0,Ct.prev){const Ft={...Ct.prev};Ct.prev.deleted=!0,Ct.prev=Ft,Ft.prev?Ft.prev.next=Ft:Ue=Ft}const xt={token:Ct.token+Ct.next.token,bias:Ct.bias,prev:Ct.prev,next:Ct.next.next};xt.prev?(xt.prev.next=xt,this._add_node(_e,xt.prev)):Ue=xt,xt.next&&(xt.next.prev=xt,this._add_node(_e,xt))}for(let Ct=Ue;Ct!==null;Ct=Ct.next)oe.push(Ct.token)}else oe=Y;if(this.continuing_subword_suffix)for(let _e=0;_e<oe.length-1;++_e)oe[_e]+=this.continuing_subword_suffix;return this.cache.set(m,oe),oe}_add_node(m,A){const Y=this.bpe_ranks.get(JSON.stringify([A.token,A.next.token]));Y!==void 0&&(A.score=Y+A.bias,m.push(A))}encode(m){const A=[];for(const Y of m){if(this.ignore_merges&&this.tokens_to_ids.has(Y)){A.push(Y);continue}const oe=this.bpe(Y);for(const _e of oe)if(this.tokens_to_ids.has(_e))A.push(_e);else if(this.byte_fallback){const Ue=Array.from(this.text_encoder.encode(_e)).map(wt=>`<0x${wt.toString(16).toUpperCase().padStart(2,"0")}>`);Ue.every(wt=>this.tokens_to_ids.has(wt))?A.push(...Ue):A.push(this.unk_token)}else A.push(this.unk_token)}return A}}class me extends $e{constructor(m,A){super(m),this.tokens_to_ids=fe(A.target_lang?m.vocab[A.target_lang]:m.vocab),this.bos_token=A.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=A.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=A.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=A.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[Y,oe]of this.tokens_to_ids)this.vocab[oe]=Y}encode(m){return m}}class W extends F.Callable{constructor(m){super(),this.config=m}static fromConfig(m){if(m===null)return null;switch(m.type){case"BertNormalizer":return new bt(m);case"Precompiled":return new Zr(m);case"Sequence":return new mt(m);case"Replace":return new ue(m);case"NFC":return new Te(m);case"NFKC":return new Ne(m);case"NFKD":return new at(m);case"Strip":return new se(m);case"StripAccents":return new Ke(m);case"Lowercase":return new ct(m);case"Prepend":return new Be(m);default:throw new Error(`Unknown Normalizer type: ${m.type}`)}}normalize(m){throw Error("normalize should be implemented in subclass.")}_call(m){return this.normalize(m)}}class ue extends W{normalize(m){const A=re(this.config.pattern);return A===null?m:m.replaceAll(A,this.config.content)}}class Te extends W{normalize(m){return m=m.normalize("NFC"),m}}class Ne extends W{normalize(m){return m=m.normalize("NFKC"),m}}class at extends W{normalize(m){return m=m.normalize("NFKD"),m}}class se extends W{normalize(m){return this.config.strip_left&&this.config.strip_right?m=m.trim():(this.config.strip_left&&(m=m.trimStart()),this.config.strip_right&&(m=m.trimEnd())),m}}class Ke extends W{normalize(m){return m=ee(m),m}}class ct extends W{normalize(m){return m=m.toLowerCase(),m}}class Be extends W{normalize(m){return m=this.config.prepend+m,m}}class mt extends W{constructor(m){super(m),this.normalizers=m.normalizers.map(A=>W.fromConfig(A))}normalize(m){return this.normalizers.reduce((A,Y)=>Y.normalize(A),m)}}class bt extends W{_tokenize_chinese_chars(m){const A=[];for(let Y=0;Y<m.length;++Y){const oe=m[Y],_e=oe.charCodeAt(0);X(_e)?(A.push(" "),A.push(oe),A.push(" ")):A.push(oe)}return A.join("")}stripAccents(m){return m.normalize("NFD").replace(new RegExp("\\p{Mn}","gu"),"")}_is_control(m){switch(m){case"	":case`
`:case"\r":return!1;default:return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$","u").test(m)}}_clean_text(m){const A=[];for(const Y of m){const oe=Y.charCodeAt(0);oe===0||oe===65533||this._is_control(Y)||(/^\s$/.test(Y)?A.push(" "):A.push(Y))}return A.join("")}normalize(m){return this.config.clean_text&&(m=this._clean_text(m)),this.config.handle_chinese_chars&&(m=this._tokenize_chinese_chars(m)),this.config.lowercase?(m=m.toLowerCase(),this.config.strip_accents!==!1&&(m=this.stripAccents(m))):this.config.strip_accents&&(m=this.stripAccents(m)),m}}class He extends F.Callable{static fromConfig(m){if(m===null)return null;switch(m.type){case"BertPreTokenizer":return new J(m);case"Sequence":return new Dr(m);case"Whitespace":return new en(m);case"WhitespaceSplit":return new ot(m);case"Metaspace":return new dr(m);case"ByteLevel":return new Ae(m);case"Split":return new Ge(m);case"Punctuation":return new Ze(m);case"Digits":return new je(m);case"Replace":return new V(m);default:throw new Error(`Unknown PreTokenizer type: ${m.type}`)}}pre_tokenize_text(m,A){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(m,A){return(Array.isArray(m)?m.map(Y=>this.pre_tokenize_text(Y,A)):this.pre_tokenize_text(m,A)).flat()}_call(m,A){return this.pre_tokenize(m,A)}}class J extends He{constructor(m){super(),this.pattern=new RegExp(`[^\\s${k}]+|[${k}]`,"gu")}pre_tokenize_text(m,A){return m.trim().match(this.pattern)||[]}}class Ae extends He{constructor(m){super(),this.config=m,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+","gu"),this.byte_encoder=nt,this.text_encoder=new TextEncoder}pre_tokenize_text(m,A){return this.add_prefix_space&&!m.startsWith(" ")&&(m=" "+m),(this.use_regex?m.match(this.pattern)||[]:[m]).map(oe=>Array.from(this.text_encoder.encode(oe),_e=>this.byte_encoder[_e]).join(""))}}class Ge extends He{constructor(m){super(),this.config=m,this.pattern=re(this.config.pattern,this.config.invert)}pre_tokenize_text(m,A){return this.pattern===null?[]:this.config.invert?m.match(this.pattern)||[]:q(m,this.pattern)}}class Ze extends He{constructor(m){super(),this.config=m,this.pattern=new RegExp(`[^${k}]+|[${k}]+`,"gu")}pre_tokenize_text(m,A){return m.match(this.pattern)||[]}}class je extends He{constructor(m){super(),this.config=m;const A=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(A,"gu")}pre_tokenize_text(m,A){return m.match(this.pattern)||[]}}class Ve extends F.Callable{constructor(m){super(),this.config=m}static fromConfig(m){if(m===null)return null;switch(m.type){case"TemplateProcessing":return new Pt(m);case"ByteLevel":return new Et(m);case"RobertaProcessing":return new yt(m);case"BertProcessing":return new dt(m);case"Sequence":return new M(m);default:throw new Error(`Unknown PostProcessor type: ${m.type}`)}}post_process(m,...A){throw Error("post_process should be implemented in subclass.")}_call(m,...A){return this.post_process(m,...A)}}class dt extends Ve{constructor(m){super(m),this.cls=m.cls[0],this.sep=m.sep[0]}post_process(m,A=null,{add_special_tokens:Y=!0}={}){Y&&(m=(0,he.mergeArrays)([this.cls],m,[this.sep]));let oe=new Array(m.length).fill(0);if(A!==null){const _e=Y&&this instanceof yt?[this.sep]:[],Ue=Y?[this.sep]:[];m=(0,he.mergeArrays)(m,_e,A,Ue),oe=(0,he.mergeArrays)(oe,new Array(A.length+_e.length+Ue.length).fill(1))}return{tokens:m,token_type_ids:oe}}}class yt extends dt{}class Pt extends Ve{constructor(m){super(m),this.single=m.single,this.pair=m.pair}post_process(m,A=null,{add_special_tokens:Y=!0}={}){const oe=A===null?this.single:this.pair;let _e=[],Ue=[];for(const wt of oe)"SpecialToken"in wt?Y&&(_e.push(wt.SpecialToken.id),Ue.push(wt.SpecialToken.type_id)):"Sequence"in wt&&(wt.Sequence.id==="A"?(_e=(0,he.mergeArrays)(_e,m),Ue=(0,he.mergeArrays)(Ue,new Array(m.length).fill(wt.Sequence.type_id))):wt.Sequence.id==="B"&&(_e=(0,he.mergeArrays)(_e,A),Ue=(0,he.mergeArrays)(Ue,new Array(A.length).fill(wt.Sequence.type_id))));return{tokens:_e,token_type_ids:Ue}}}class Et extends Ve{post_process(m,A=null){return A&&(m=(0,he.mergeArrays)(m,A)),{tokens:m}}}class M extends Ve{constructor(m){super(m),this.processors=m.processors.map(A=>Ve.fromConfig(A))}post_process(m,A=null,Y={}){let oe;for(const _e of this.processors)if(_e instanceof Et)m=_e.post_process(m).tokens,A&&(A=_e.post_process(A).tokens);else{const Ue=_e.post_process(m,A,Y);m=Ue.tokens,oe=Ue.token_type_ids}return{tokens:m,token_type_ids:oe}}}class H extends F.Callable{constructor(m){super(),this.config=m,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=m.trim_offsets}static fromConfig(m){if(m===null)return null;switch(m.type){case"WordPiece":return new Xe(m);case"Metaspace":return new Tr(m);case"ByteLevel":return new Rt(m);case"Replace":return new $(m);case"ByteFallback":return new Z(m);case"Fuse":return new pe(m);case"Strip":return new et(m);case"Sequence":return new Tt(m);case"CTC":return new ht(m);case"BPEDecoder":return new zt(m);default:throw new Error(`Unknown Decoder type: ${m.type}`)}}_call(m){return this.decode(m)}decode(m){return this.decode_chain(m).join("")}decode_chain(m){throw Error("`decode_chain` should be implemented in subclass.")}}class $ extends H{decode_chain(m){const A=re(this.config.pattern);return A===null?m:m.map(Y=>Y.replaceAll(A,this.config.content))}}class Z extends H{constructor(m){super(m),this.text_decoder=new TextDecoder}decode_chain(m){const A=[];let Y=[];for(const oe of m){let _e=null;if(oe.length===6&&oe.startsWith("<0x")&&oe.endsWith(">")){const Ue=parseInt(oe.slice(3,5),16);isNaN(Ue)||(_e=Ue)}if(_e!==null)Y.push(_e);else{if(Y.length>0){const Ue=this.text_decoder.decode(Uint8Array.from(Y));A.push(Ue),Y=[]}A.push(oe)}}if(Y.length>0){const oe=this.text_decoder.decode(Uint8Array.from(Y));A.push(oe),Y=[]}return A}}class pe extends H{decode_chain(m){return[m.join("")]}}class et extends H{constructor(m){super(m),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(m){return m.map(A=>{let Y=0;for(let _e=0;_e<this.start&&A[_e]===this.content;++_e){Y=_e+1;continue}let oe=A.length;for(let _e=0;_e<this.stop;++_e){const Ue=A.length-_e-1;if(A[Ue]===this.content){oe=Ue;continue}else break}return A.slice(Y,oe)})}}class Xe extends H{constructor(m){super(m),this.cleanup=m.cleanup}decode_chain(m){return m.map((A,Y)=>(Y!==0&&(A.startsWith(this.config.prefix)?A=A.replace(this.config.prefix,""):A=" "+A),this.cleanup&&(A=O(A)),A))}}class Rt extends H{constructor(m){super(m),this.byte_decoder=Je,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(m){const A=m.join(""),Y=new Uint8Array([...A].map(_e=>this.byte_decoder[_e]));return this.text_decoder.decode(Y)}decode_chain(m){const A=[];let Y=[];for(const oe of m)this.added_tokens.find(_e=>_e.content===oe)!==void 0?(Y.length>0&&(A.push(this.convert_tokens_to_string(Y)),Y=[]),A.push(oe)):Y.push(oe);return Y.length>0&&A.push(this.convert_tokens_to_string(Y)),A}}class ht extends H{constructor(m){super(m),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(m){if(m.length===0)return"";const A=[m[0]];for(let _e=1;_e<m.length;++_e)m[_e]!==A.at(-1)&&A.push(m[_e]);let oe=A.filter(_e=>_e!==this.pad_token).join("");return this.cleanup&&(oe=O(oe).replaceAll(this.word_delimiter_token," ").trim()),oe}decode_chain(m){return[this.convert_tokens_to_string(m)]}}class Tt extends H{constructor(m){super(m),this.decoders=m.decoders.map(A=>H.fromConfig(A))}decode_chain(m){return this.decoders.reduce((A,Y)=>Y.decode_chain(A),m)}}class zt extends H{constructor(m){super(m),this.suffix=this.config.suffix}decode_chain(m){return m.map((A,Y)=>A.replaceAll(this.suffix,Y===m.length-1?"":" "))}}class St extends H{decode_chain(m){let A="";for(let Y=1;Y<m.length;Y+=2)A+=m[Y];return[A]}}class dr extends He{constructor(m){super(),this.addPrefixSpace=m.add_prefix_space,this.replacement=m.replacement,this.strRep=m.str_rep||this.replacement,this.prepend_scheme=m.prepend_scheme??"always"}pre_tokenize_text(m,{section_index:A=void 0}={}){let Y=m.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!Y.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&A===0)&&(Y=this.strRep+Y),[Y]}}class Tr extends H{constructor(m){super(m),this.addPrefixSpace=m.add_prefix_space,this.replacement=m.replacement}decode_chain(m){const A=[];for(let Y=0;Y<m.length;++Y){let oe=m[Y].replaceAll(this.replacement," ");this.addPrefixSpace&&Y==0&&oe.startsWith(" ")&&(oe=oe.substring(1)),A.push(oe)}return A}}class Zr extends W{constructor(m){super(m),this.charsmap=m.precompiled_charsmap}normalize(m){return m=m.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),m=m.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),m.includes("～")?m=m.split("～").map(Y=>Y.normalize("NFKC")).join("～"):m=m.normalize("NFKC"),m}}class Dr extends He{constructor(m){super(),this.tokenizers=m.pretokenizers.map(A=>He.fromConfig(A))}pre_tokenize_text(m,A){return this.tokenizers.reduce((Y,oe)=>oe.pre_tokenize(Y,A),[m])}}class en extends He{constructor(m){super()}pre_tokenize_text(m,A){return m.match(/\w+|[^\w\s]+/g)||[]}}class ot extends He{constructor(m){super()}pre_tokenize_text(m,A){return N(m)}}class V extends He{constructor(m){super(),this.config=m,this.pattern=re(this.config.pattern),this.content=this.config.content}pre_tokenize_text(m,A){return this.pattern===null?[m]:[m.replaceAll(this.pattern,this.config.content)]}}const ge=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Ie(ae,m,A,Y){for(const oe of Object.keys(ae)){const _e=m-ae[oe].length,Ue=A(oe),wt=new Array(_e).fill(Ue);ae[oe]=Y==="right"?(0,he.mergeArrays)(ae[oe],wt):(0,he.mergeArrays)(wt,ae[oe])}}function tt(ae,m){for(const A of Object.keys(ae))ae[A].length=m}class xe extends F.Callable{constructor(A,Y){super();Me(this,"return_token_type_ids",!1);Me(this,"padding_side","right");this._tokenizer_config=Y,this.normalizer=W.fromConfig(A.normalizer),this.pre_tokenizer=He.fromConfig(A.pre_tokenizer),this.model=$e.fromConfig(A.model,Y),this.post_processor=Ve.fromConfig(A.post_processor),this.decoder=H.fromConfig(A.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const oe of A.added_tokens){const _e=new we(oe);this.added_tokens.push(_e),this.model.tokens_to_ids.set(_e.content,_e.id),this.model.vocab[_e.id]=_e.content,_e.special&&(this.special_tokens.push(_e.content),this.all_special_ids.push(_e.id))}if(this.additional_special_tokens=Y.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.slice().sort((oe,_e)=>_e.content.length-oe.content.length).map(oe=>`${oe.lstrip?"\\s*":""}(${(0,he.escapeRegExp)(oe.content)})${oe.rstrip?"\\s*":""}`).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=Y.model_max_length,this.remove_space=Y.remove_space,this.clean_up_tokenization_spaces=Y.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=Y.do_lowercase_and_remove_accent??!1,Y.padding_side&&(this.padding_side=Y.padding_side),this.legacy=!1,this.chat_template=Y.chat_template??null,Array.isArray(this.chat_template)){const oe=Object.create(null);for(const{name:_e,template:Ue}of this.chat_template){if(typeof _e!="string"||typeof Ue!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');oe[_e]=Ue}this.chat_template=oe}this._compiled_template_cache=new Map}getToken(...A){for(const Y of A){const oe=this._tokenizer_config[Y];if(oe)if(typeof oe=="object"){if(oe.__type==="AddedToken")return oe.content;throw Error(`Unknown token: ${oe}`)}else return oe}return null}static async from_pretrained(A,{progress_callback:Y=null,config:oe=null,cache_dir:_e=null,local_files_only:Ue=!1,revision:wt="main",legacy:Ct=null}={}){const xt=await D(A,{progress_callback:Y,config:oe,cache_dir:_e,local_files_only:Ue,revision:wt,legacy:Ct});return new this(...xt)}_call(A,{text_pair:Y=null,add_special_tokens:oe=!0,padding:_e=!1,truncation:Ue=null,max_length:wt=null,return_tensor:Ct=!0,return_token_type_ids:xt=null}={}){const Ft=Array.isArray(A);let tr;if(Ft){if(A.length===0)throw Error("text array must be non-empty");if(Y!==null){if(Array.isArray(Y)){if(A.length!==Y.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");tr=A.map((lr,Ur)=>this._encode_plus(lr,{text_pair:Y[Ur],add_special_tokens:oe,return_token_type_ids:xt}))}else tr=A.map(lr=>this._encode_plus(lr,{add_special_tokens:oe,return_token_type_ids:xt}))}else{if(A==null)throw Error("text may not be null or undefined");if(Array.isArray(Y))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");tr=[this._encode_plus(A,{text_pair:Y,add_special_tokens:oe,return_token_type_ids:xt})]}if(wt===null?_e==="max_length"?wt=this.model_max_length:wt=(0,Ce.max)(tr.map(lr=>lr.input_ids.length))[0]:Ue||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),wt=Math.min(wt,this.model_max_length??1/0),_e||Ue)for(let lr=0;lr<tr.length;++lr)tr[lr].input_ids.length!==wt&&(tr[lr].input_ids.length>wt?Ue&&tt(tr[lr],wt):_e&&Ie(tr[lr],wt,Ur=>Ur==="input_ids"?this.pad_token_id:0,this.padding_side));const $r={};if(Ct){if(!(_e&&Ue)&&tr.some(Ur=>{var tn;for(const ir of Object.keys(Ur))if(Ur[ir].length!==((tn=tr[0][ir])==null?void 0:tn.length))return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const lr=[tr.length,tr[0].input_ids.length];for(const Ur of Object.keys(tr[0]))$r[Ur]=new Ee.Tensor("int64",BigInt64Array.from(tr.flatMap(tn=>tn[Ur]).map(BigInt)),lr)}else{for(const lr of Object.keys(tr[0]))$r[lr]=tr.map(Ur=>Ur[lr]);if(!Ft)for(const lr of Object.keys($r))$r[lr]=$r[lr][0]}return $r}_encode_text(A){return A===null?null:(this.added_tokens_regex?A.split(this.added_tokens_regex).filter(_e=>_e):[A]).map((_e,Ue)=>{if(this.added_tokens.find(Ct=>Ct.content===_e)!==void 0)return _e;{if(this.remove_space===!0&&(_e=_e.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(_e=ce(_e)),this.normalizer!==null&&(_e=this.normalizer(_e)),_e.length===0)return[];const Ct=this.pre_tokenizer!==null?this.pre_tokenizer(_e,{section_index:Ue}):[_e];return this.model(Ct)}}).flat()}_encode_plus(A,{text_pair:Y=null,add_special_tokens:oe=!0,return_token_type_ids:_e=null}={}){const{tokens:Ue,token_type_ids:wt}=this._tokenize_helper(A,{pair:Y,add_special_tokens:oe}),Ct=this.model.convert_tokens_to_ids(Ue),xt={input_ids:Ct,attention_mask:new Array(Ct.length).fill(1)};return(_e??this.return_token_type_ids)&&wt&&(xt.token_type_ids=wt),xt}_tokenize_helper(A,{pair:Y=null,add_special_tokens:oe=!1}={}){const _e=this._encode_text(A),Ue=this._encode_text(Y);return this.post_processor?this.post_processor(_e,Ue,{add_special_tokens:oe}):{tokens:(0,he.mergeArrays)(_e??[],Ue??[])}}tokenize(A,{pair:Y=null,add_special_tokens:oe=!1}={}){return this._tokenize_helper(A,{pair:Y,add_special_tokens:oe}).tokens}encode(A,{text_pair:Y=null,add_special_tokens:oe=!0,return_token_type_ids:_e=null}={}){return this._encode_plus(A,{text_pair:Y,add_special_tokens:oe,return_token_type_ids:_e}).input_ids}batch_decode(A,Y={}){return A instanceof Ee.Tensor&&(A=A.tolist()),A.map(oe=>this.decode(oe,Y))}decode(A,Y={}){if(A instanceof Ee.Tensor&&(A=le(A)),!Array.isArray(A)||A.length===0||!(0,he.isIntegralNumber)(A[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(A,Y)}decode_single(A,{skip_special_tokens:Y=!1,clean_up_tokenization_spaces:oe=null}){let _e=this.model.convert_ids_to_tokens(A);Y&&(_e=_e.filter(wt=>!this.special_tokens.includes(wt)));let Ue=this.decoder?this.decoder(_e):_e.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(Ue=Ue.replaceAll(this.decoder.end_of_word_suffix," "),Y&&(Ue=Ue.trim())),(oe??this.clean_up_tokenization_spaces)&&(Ue=O(Ue)),Ue}get_chat_template({chat_template:A=null,tools:Y=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const oe=this.chat_template;if(A!==null&&Object.hasOwn(oe,A))A=oe[A];else if(A===null)if(Y!==null&&"tool_use"in oe)A=oe.tool_use;else if("default"in oe)A=oe.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(oe).sort()}.`)}else if(A===null)if(this.chat_template)A=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return A}apply_chat_template(A,{tools:Y=null,documents:oe=null,chat_template:_e=null,add_generation_prompt:Ue=!1,tokenize:wt=!0,padding:Ct=!1,truncation:xt=!1,max_length:Ft=null,return_tensor:tr=!0,return_dict:$r=!1,tokenizer_kwargs:lr={},...Ur}={}){if(_e=this.get_chat_template({chat_template:_e,tools:Y}),typeof _e!="string")throw Error(`chat_template must be a string, but got ${typeof _e}`);let tn=this._compiled_template_cache.get(_e);tn===void 0&&(tn=new P.Template(_e),this._compiled_template_cache.set(_e,tn));const ir=Object.create(null);for(const gn of ge){const Mn=this.getToken(gn);Mn&&(ir[gn]=Mn)}const Er=tn.render({messages:A,add_generation_prompt:Ue,tools:Y,documents:oe,...ir,...Ur});if(wt){const gn=this._call(Er,{add_special_tokens:!1,padding:Ct,truncation:xt,max_length:Ft,return_tensor:tr,...lr});return $r?gn:gn.input_ids}return Er}}class Qe extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class ft extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class gt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class kt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class _t extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class Bt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class Nt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class Dt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class qt extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class ye extends xe{}class rt extends xe{}class ut extends xe{constructor(A,Y){super(A,Y);Me(this,"return_token_type_ids",!0);console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Ht extends xe{constructor(){super(...arguments);Me(this,"return_token_type_ids",!0)}}class _r extends xe{}class Nr extends xe{}class Xr extends xe{}class or extends xe{constructor(m,A){super(m,A),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)),this.lang_to_token=Y=>Y}_build_translation_inputs(m,A,Y){return kn(this,m,A,Y)}}class Gr extends or{}class jr extends xe{}class zn extends xe{}const Vr="▁";class cs extends xe{constructor(A,Y){super(A,Y);Me(this,"padding_side","left");this.legacy=Y.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new dr({replacement:Vr,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(A){if(A===null)return null;if(this.legacy||A.length===0)return super._encode_text(A);let Y=super._encode_text(Vr+A.replaceAll(Vr," "));return Y.length>1&&Y[0]===Vr&&this.special_tokens.includes(Y[1])&&(Y=Y.slice(1)),Y}}class vs extends xe{}class Hn extends xe{}class xs extends xe{}class Ts extends xe{}class Cs extends xe{}class $s extends xe{}class Es extends xe{}class ts extends xe{}class Kn extends xe{}function kn(ae,m,A,Y){if(!("language_codes"in ae)||!Array.isArray(ae.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ae)||!(ae.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ae)||typeof ae.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const oe=Y.src_lang,_e=Y.tgt_lang;if(!ae.language_codes.includes(_e))throw new Error(`Target language code "${_e}" is not valid. Must be one of: {${ae.language_codes.join(", ")}}`);if(oe!==void 0){if(!ae.language_codes.includes(oe))throw new Error(`Source language code "${oe}" is not valid. Must be one of: {${ae.language_codes.join(", ")}}`);for(const Ue of ae.post_processor.config.single)if("SpecialToken"in Ue&&ae.languageRegex.test(Ue.SpecialToken.id)){Ue.SpecialToken.id=ae.lang_to_token(oe);break}}return Y.forced_bos_token_id=ae.model.convert_tokens_to_ids([ae.lang_to_token(_e)])[0],ae._call(m,A)}class Ln extends xe{constructor(m,A){super(m,A),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)),this.lang_to_token=Y=>Y}_build_translation_inputs(m,A,Y){return kn(this,m,A,Y)}}class ps extends xe{constructor(m,A){super(m,A),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(Y=>this.languageRegex.test(Y)).map(Y=>Y.slice(2,-2)),this.lang_to_token=Y=>`__${Y}__`}_build_translation_inputs(m,A,Y){return kn(this,m,A,Y)}}class Dn extends xe{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(m,{return_timestamps:A=!1,return_language:Y=!1,time_precision:oe=null,force_full_sequences:_e=!0}={}){if(oe===null)throw Error("Must specify time_precision");let Ue=null;const wt=A==="word";function Ct(){return{language:Ue,timestamp:[null,null],text:""}}const xt=[];let Ft=Ct(),tr=0;const $r=this.timestamp_begin;let lr=[],Ur=[],tn=!1,ir=null;const Er=new Set(this.all_special_ids);for(const ke of m){const rn=ke.tokens,un=wt?ke.token_timestamps:null;let Sn=null,Rn=$r;if("stride"in ke){const[Qr,fr,Pr]=ke.stride;if(tr-=fr,ir=Qr-Pr,fr&&(Rn=fr/oe+$r),Pr)for(let Mt=rn.length-1;Mt>=0;--Mt){const gr=Number(rn[Mt]);if(gr>=$r){if(Sn!==null&&(gr-$r)*oe<ir)break;Sn=gr}}}let Kt=[],fn=[];for(let Qr=0;Qr<rn.length;++Qr){const fr=Number(rn[Qr]);if(Er.has(fr)){const Pr=this.decode([fr]),Mt=z.WHISPER_LANGUAGE_MAPPING.get(Pr.slice(2,-2));if(Mt!==void 0){if(Ue!==null&&Mt!==Ue&&!A){lr.push(Kt);const gr=this.findLongestCommonSequence(lr)[0],ss=this.decode(gr);Ft.text=ss,xt.push(Ft),lr=[],Kt=[],Ft=Ct()}Ue=Ft.language=Mt}}else if(fr>=$r){const Pr=(fr-$r)*oe+tr,Mt=(0,Ce.round)(Pr,2);if(Sn!==null&&fr>=Sn)tn=!0;else if(tn||lr.length>0&&fr<Rn)tn=!1;else if(Ft.timestamp[0]===null)Ft.timestamp[0]=Mt;else if(Mt!==Ft.timestamp[0]){Ft.timestamp[1]=Mt,lr.push(Kt),wt&&Ur.push(fn);const[gr,ss]=this.findLongestCommonSequence(lr,Ur),Xn=this.decode(gr);Ft.text=Xn,wt&&(Ft.words=this.collateWordTimestamps(gr,ss,Ue)),xt.push(Ft),lr=[],Kt=[],Ur=[],fn=[],Ft=Ct()}}else if(Kt.push(fr),wt){let Pr=(0,Ce.round)(un[Qr]+tr,2),Mt;if(Qr+1<un.length){Mt=(0,Ce.round)(un[Qr+1]+tr,2);const gr=this.decode([fr]);R.test(gr)&&(Mt=(0,Ce.round)(Math.min(Pr+oe,Mt),2))}else Mt=null;fn.push([Pr,Mt])}}if("stride"in ke){const[Qr,fr,Pr]=ke.stride;tr+=Qr-Pr}Kt.length>0?(lr.push(Kt),wt&&Ur.push(fn)):lr.every(Qr=>Qr.length===0)&&(Ft=Ct(),lr=[],Kt=[],Ur=[],fn=[])}if(lr.length>0){if(_e&&A)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[ke,rn]=this.findLongestCommonSequence(lr,Ur),un=this.decode(ke);Ft.text=un,wt&&(Ft.words=this.collateWordTimestamps(ke,rn,Ue)),xt.push(Ft)}let gn=Object.create(null);const Mn=xt.map(ke=>ke.text).join("");if(A||Y){for(let ke=0;ke<xt.length;++ke){const rn=xt[ke];A||delete rn.timestamp,Y||delete rn.language}if(wt){const ke=[];for(const rn of xt)for(const un of rn.words)ke.push(un);gn={chunks:ke}}else gn={chunks:xt}}return[Mn,gn]}findLongestCommonSequence(m,A=null){let Y=m[0],oe=Y.length,_e=[];const Ue=Array.isArray(A)&&A.length>0;let wt=Ue?[]:null,Ct=Ue?A[0]:null;for(let xt=1;xt<m.length;++xt){const Ft=m[xt];let tr=0,$r=[oe,oe,0,0];const lr=Ft.length;for(let ke=1;ke<oe+lr;++ke){const rn=Math.max(0,oe-ke),un=Math.min(oe,oe+lr-ke),Sn=Y.slice(rn,un),Rn=Math.max(0,ke-oe),Kt=Math.min(lr,ke),fn=Ft.slice(Rn,Kt);if(Sn.length!==fn.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Qr;Ue?Qr=Sn.filter((Mt,gr)=>Mt===fn[gr]&&Ct[rn+gr]<=A[xt][Rn+gr]).length:Qr=Sn.filter((Mt,gr)=>Mt===fn[gr]).length;const fr=ke/1e4,Pr=Qr/ke+fr;Qr>1&&Pr>tr&&(tr=Pr,$r=[rn,un,Rn,Kt])}const[Ur,tn,ir,Er]=$r,gn=Math.floor((tn+Ur)/2),Mn=Math.floor((Er+ir)/2);_e.push(...Y.slice(0,gn)),Y=Ft.slice(Mn),oe=Y.length,Ue&&(wt.push(...Ct.slice(0,gn)),Ct=A[xt].slice(Mn))}return _e.push(...Y),Ue?(wt.push(...Ct),[_e,wt]):[_e,[]]}collateWordTimestamps(m,A,Y){const[oe,_e,Ue]=this.combineTokensIntoWords(m,Y),wt=[];for(let Ct=0;Ct<oe.length;++Ct){const xt=Ue[Ct];wt.push({text:oe[Ct],timestamp:[A[xt.at(0)][0],A[xt.at(-1)][1]]})}return wt}combineTokensIntoWords(m,A,Y=`"'“¡¿([{-`,oe=`"'.。,，!！?？:：”)]}、`){A=A??"english";let _e,Ue,wt;return["chinese","japanese","thai","lao","myanmar"].includes(A)?[_e,Ue,wt]=this.splitTokensOnUnicode(m):[_e,Ue,wt]=this.splitTokensOnSpaces(m),this.mergePunctuations(_e,Ue,wt,Y,oe)}decode(m,A){let Y;return A!=null&&A.decode_with_timestamps?(m instanceof Ee.Tensor&&(m=le(m)),Y=this.decodeWithTimestamps(m,A)):Y=super.decode(m,A),Y}decodeWithTimestamps(m,A){const Y=(A==null?void 0:A.time_precision)??.02,oe=Array.from(this.all_special_ids).at(-1)+1;let _e=[[]];for(let Ue of m)if(Ue=Number(Ue),Ue>=oe){const wt=((Ue-oe)*Y).toFixed(2);_e.push(`<|${wt}|>`),_e.push([])}else _e[_e.length-1].push(Ue);return _e=_e.map(Ue=>typeof Ue=="string"?Ue:super.decode(Ue,A)),_e.join("")}splitTokensOnUnicode(m){const A=this.decode(m,{decode_with_timestamps:!0}),Y="�",oe=[],_e=[],Ue=[];let wt=[],Ct=[],xt=0;for(let Ft=0;Ft<m.length;++Ft){const tr=m[Ft];wt.push(tr),Ct.push(Ft);const $r=this.decode(wt,{decode_with_timestamps:!0});(!$r.includes(Y)||A[xt+$r.indexOf(Y)]===Y)&&(oe.push($r),_e.push(wt),Ue.push(Ct),wt=[],Ct=[],xt+=$r.length)}return[oe,_e,Ue]}splitTokensOnSpaces(m){const[A,Y,oe]=this.splitTokensOnUnicode(m),_e=[],Ue=[],wt=[],Ct=new RegExp(`^[${k}]$`,"gu");for(let xt=0;xt<A.length;++xt){const Ft=A[xt],tr=Y[xt],$r=oe[xt],lr=tr[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Ur=Ft.startsWith(" "),tn=Ft.trim(),ir=Ct.test(tn);if(lr||Ur||ir||_e.length===0)_e.push(Ft),Ue.push(tr),wt.push($r);else{const Er=_e.length-1;_e[Er]+=Ft,Ue[Er].push(...tr),wt[Er].push(...$r)}}return[_e,Ue,wt]}mergePunctuations(m,A,Y,oe,_e){const Ue=structuredClone(m),wt=structuredClone(A),Ct=structuredClone(Y);let xt=Ue.length-2,Ft=Ue.length-1;for(;xt>=0;)Ue[xt].startsWith(" ")&&oe.includes(Ue[xt].trim())?(Ue[Ft]=Ue[xt]+Ue[Ft],wt[Ft]=(0,he.mergeArrays)(wt[xt],wt[Ft]),Ct[Ft]=(0,he.mergeArrays)(Ct[xt],Ct[Ft]),Ue[xt]="",wt[xt]=[],Ct[xt]=[]):Ft=xt,--xt;for(xt=0,Ft=1;Ft<Ue.length;)!Ue[xt].endsWith(" ")&&_e.includes(Ue[Ft])?(Ue[xt]+=Ue[Ft],wt[xt]=(0,he.mergeArrays)(wt[xt],wt[Ft]),Ct[xt]=(0,he.mergeArrays)(Ct[xt],Ct[Ft]),Ue[Ft]="",wt[Ft]=[],Ct[Ft]=[]):xt=Ft,++Ft;return[Ue.filter(tr=>tr),wt.filter(tr=>tr.length>0),Ct.filter(tr=>tr.length>0)]}}class hs extends xe{}class fs extends xe{}class ms extends xe{}class Yt extends xe{constructor(m,A){super(m,A),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(Y=>this.languageRegex.test(Y)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(m){if(m===null)return null;const[A,...Y]=m.trim().split(this.languageRegex);if(Y.length===0)return super._encode_text(A);if(Y.length===2){const[oe,_e]=Y;return this.supported_language_codes.includes(oe)||console.warn(`Unsupported language code "${oe}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,he.mergeArrays)([oe],super._encode_text(_e))}}}class rs extends xe{}class ks extends xe{}class Ss extends xe{}class _s extends xe{}class Ps extends xe{}class As extends xe{constructor(m,A){super(m,A),this.decoder=new St({})}}class ns extends xe{}class Is{static async from_pretrained(m,{progress_callback:A=null,config:Y=null,cache_dir:oe=null,local_files_only:_e=!1,revision:Ue="main",legacy:wt=null}={}){var $r;const[Ct,xt]=await D(m,{progress_callback:A,config:Y,cache_dir:oe,local_files_only:_e,revision:Ue,legacy:wt}),Ft=(($r=xt.tokenizer_class)==null?void 0:$r.replace(/Fast$/,""))??"PreTrainedTokenizer";let tr=this.TOKENIZER_CLASS_MAPPING[Ft];return tr||(console.warn(`Unknown tokenizer class "${Ft}", attempting to construct from base class.`),tr=xe),new tr(Ct,xt)}}Me(Is,"TOKENIZER_CLASS_MAPPING",{T5Tokenizer:_r,DistilBertTokenizer:ye,CamembertTokenizer:rt,DebertaTokenizer:_t,DebertaV2Tokenizer:Bt,BertTokenizer:Qe,HerbertTokenizer:Nt,ConvBertTokenizer:Dt,RoFormerTokenizer:qt,XLMTokenizer:ut,ElectraTokenizer:Ht,MobileBertTokenizer:gt,SqueezeBertTokenizer:kt,AlbertTokenizer:ft,GPT2Tokenizer:Nr,BartTokenizer:Xr,MBartTokenizer:or,MBart50Tokenizer:Gr,RobertaTokenizer:jr,WhisperTokenizer:Dn,CodeGenTokenizer:hs,CLIPTokenizer:fs,SiglipTokenizer:ms,MarianTokenizer:Yt,BloomTokenizer:zn,NllbTokenizer:Ln,M2M100Tokenizer:ps,LlamaTokenizer:cs,CodeLlamaTokenizer:vs,XLMRobertaTokenizer:Hn,MPNetTokenizer:xs,FalconTokenizer:Ts,GPTNeoXTokenizer:Cs,EsmTokenizer:$s,Wav2Vec2CTCTokenizer:rs,BlenderbotTokenizer:ks,BlenderbotSmallTokenizer:Ss,SpeechT5Tokenizer:_s,NougatTokenizer:Ps,VitsTokenizer:As,Qwen2Tokenizer:Es,GemmaTokenizer:ts,Grok1Tokenizer:Kn,CohereTokenizer:ns,PreTrainedTokenizer:xe})},"./src/utils/audio.js":(It,Se,j)=>{j.r(Se),j.d(Se,{hamming:()=>z,hanning:()=>P,mel_filter_bank:()=>ee,read_audio:()=>Ee,spectrogram:()=>k,window_function:()=>R});var F=j("./src/utils/hub.js"),he=j("./src/utils/maths.js"),be=j("./src/utils/core.js"),Ce=j("./src/utils/tensor.js");async function Ee(E,de){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const we=await(await(0,F.getFile)(E)).arrayBuffer(),$e=new AudioContext({sampleRate:de});typeof de>"u"&&console.warn(`No sampling rate provided, using default of ${$e.sampleRate}Hz.`);const Oe=await $e.decodeAudioData(we);let Fe;if(Oe.numberOfChannels===2){const nt=Math.sqrt(2),Je=Oe.getChannelData(0),lt=Oe.getChannelData(1);Fe=new Float32Array(Je.length);for(let me=0;me<Oe.length;++me)Fe[me]=nt*(Je[me]+lt[me])/2}else Fe=Oe.getChannelData(0);return Fe}function U(E,de){if(E<1)return new Float64Array;if(E===1)return new Float64Array([1]);const we=1-de,$e=2*Math.PI/(E-1),Oe=new Float64Array(E);for(let Fe=0;Fe<E;++Fe)Oe[Fe]=de-we*Math.cos(Fe*$e);return Oe}function P(E){return U(E,.5)}function z(E){return U(E,.54)}const D={htk:E=>2595*Math.log10(1+E/700),kaldi:E=>1127*Math.log(1+E/700),slaney:(E,de=1e3,we=15,$e=27/Math.log(6.4))=>E>=de?we+Math.log(E/de)*$e:3*E/200};function q(E,de="htk"){const we=D[de];if(!we)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof E=="number"?we(E):E.map($e=>we($e))}const re={htk:E=>700*(10**(E/2595)-1),kaldi:E=>700*(Math.exp(E/1127)-1),slaney:(E,de=1e3,we=15,$e=Math.log(6.4)/27)=>E>=we?de*Math.exp($e*(E-we)):200*E/3};function fe(E,de="htk"){const we=re[de];if(!we)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof E=="number"?we(E):E.map($e=>we($e))}function le(E,de){const we=Float64Array.from({length:de.length-1},(nt,Je)=>de[Je+1]-de[Je]),$e=Array.from({length:E.length},()=>new Array(de.length));for(let nt=0;nt<E.length;++nt){const Je=$e[nt];for(let lt=0;lt<de.length;++lt)Je[lt]=de[lt]-E[nt]}const Oe=de.length-2,Fe=Array.from({length:Oe},()=>new Array(E.length));for(let nt=0;nt<E.length;++nt){const Je=$e[nt];for(let lt=0;lt<Oe;++lt){const me=-Je[lt]/we[lt],W=Je[lt+2]/we[lt+1];Fe[lt][nt]=Math.max(0,Math.min(me,W))}}return Fe}function O(E,de,we){const $e=(de-E)/(we-1);return Float64Array.from({length:we},(Oe,Fe)=>E+$e*Fe)}function ee(E,de,we,$e,Oe,Fe=null,nt="htk",Je=!1){if(Fe!==null&&Fe!=="slaney")throw new Error('norm must be one of null or "slaney"');const lt=q(we,nt),me=q($e,nt),W=O(lt,me,de+2);let ue=fe(W,nt),Te;if(Je){const at=Oe/(E*2);Te=q(Float64Array.from({length:E},(se,Ke)=>Ke*at),nt),ue=W}else Te=O(0,Math.floor(Oe/2),E);const Ne=le(Te,ue);if(Fe!==null&&Fe==="slaney")for(let at=0;at<de;++at){const se=Ne[at],Ke=2/(ue[at+2]-ue[at]);for(let ct=0;ct<E;++ct)se[ct]*=Ke}return Ne}function ce(E,de,we){const $e=new E.constructor(E.length+de+we),Oe=E.length-1;for(let Fe=0;Fe<E.length;++Fe)$e[de+Fe]=E[Fe];for(let Fe=1;Fe<=de;++Fe)$e[de-Fe]=E[(0,be.calculateReflectOffset)(Fe,Oe)];for(let Fe=1;Fe<=we;++Fe)$e[Oe+de+Fe]=E[(0,be.calculateReflectOffset)(Oe-Fe,Oe)];return $e}function X(E,de,we,$e,Oe){if(we<=0)throw new Error("reference must be greater than zero");if($e<=0)throw new Error("min_value must be greater than zero");we=Math.max($e,we);const Fe=Math.log10(we);for(let nt=0;nt<E.length;++nt)E[nt]=de*Math.log10(Math.max($e,E[nt])-Fe);if(Oe!==null){if(Oe<=0)throw new Error("db_range must be greater than zero");const nt=(0,he.max)(E)[0]-Oe;for(let Je=0;Je<E.length;++Je)E[Je]=Math.max(E[Je],nt)}return E}function K(E,de=1,we=1e-5,$e=null){return X(E,20,de,we,$e)}function N(E,de=1,we=1e-10,$e=null){return X(E,10,de,we,$e)}async function k(E,de,we,$e,{fft_length:Oe=null,power:Fe=1,center:nt=!0,pad_mode:Je="reflect",onesided:lt=!0,preemphasis:me=null,mel_filters:W=null,mel_floor:ue=1e-10,log_mel:Te=null,reference:Ne=1,min_value:at=1e-10,db_range:se=null,remove_dc_offset:Ke=null,min_num_frames:ct=null,max_num_frames:Be=null,do_pad:mt=!0,transpose:bt=!1}={}){const He=de.length;if(Oe===null&&(Oe=we),we>Oe)throw Error(`frame_length (${we}) may not be larger than fft_length (${Oe})`);if(He!==we)throw new Error(`Length of the window (${He}) must equal frame_length (${we})`);if($e<=0)throw new Error("hop_length must be greater than zero");if(Fe===null&&W!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(nt){if(Je!=="reflect")throw new Error(`pad_mode="${Je}" not implemented yet.`);const H=Math.floor((Oe-1)/2)+1;E=ce(E,H,H)}let J=Math.floor(1+Math.floor((E.length-we)/$e));ct!==null&&J<ct&&(J=ct);const Ae=lt?Math.floor(Oe/2)+1:Oe;let Ge=J,Ze=J;Be!==null&&(Be>J?mt&&(Ze=Be):Ze=Ge=Be);const je=new he.FFT(Oe),Ve=new Float64Array(Oe),dt=new Float64Array(je.outputBufferSize),yt=new Float32Array(Ae*Ze);for(let H=0;H<Ge;++H){const $=H*$e,Z=Math.min(E.length-$,we);Z!==we&&Ve.fill(0,0,we);for(let pe=0;pe<Z;++pe)Ve[pe]=E[$+pe];if(Ke){let pe=0;for(let Xe=0;Xe<Z;++Xe)pe+=Ve[Xe];const et=pe/Z;for(let Xe=0;Xe<Z;++Xe)Ve[Xe]-=et}if(me!==null){for(let pe=Z-1;pe>=1;--pe)Ve[pe]-=me*Ve[pe-1];Ve[0]*=1-me}for(let pe=0;pe<de.length;++pe)Ve[pe]*=de[pe];je.realTransform(dt,Ve);for(let pe=0;pe<Ae;++pe){const et=pe<<1;yt[pe*Ze+H]=dt[et]**2+dt[et+1]**2}}if(Fe!==null&&Fe!==2){const H=2/Fe;for(let $=0;$<yt.length;++$)yt[$]**=H}const Pt=W.length;let Et=await(0,Ce.matmul)(new Ce.Tensor("float32",W.flat(),[Pt,Ae]),new Ce.Tensor("float32",yt,[Ae,Ze]));bt&&(Et=Et.transpose(1,0));const M=Et.data;for(let H=0;H<M.length;++H)M[H]=Math.max(ue,M[H]);if(Fe!==null&&Te!==null){const H=Math.min(M.length,Ge*Pt);switch(Te){case"log":for(let $=0;$<H;++$)M[$]=Math.log(M[$]);break;case"log10":for(let $=0;$<H;++$)M[$]=Math.log10(M[$]);break;case"dB":if(Fe===1)K(M,Ne,at,se);else if(Fe===2)N(M,Ne,at,se);else throw new Error(`Cannot use log_mel option '${Te}' with power ${Fe}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Te}'`)}}return Et}function R(E,de,{periodic:we=!0,frame_length:$e=null,center:Oe=!0}={}){const Fe=we?E+1:E;let nt;switch(de){case"boxcar":nt=new Float64Array(Fe).fill(1);break;case"hann":case"hann_window":nt=P(Fe);break;case"hamming":nt=z(Fe);break;case"povey":nt=P(Fe).map(Je=>Math.pow(Je,.85));break;default:throw new Error(`Unknown window type ${de}.`)}if(we&&(nt=nt.subarray(0,E)),$e===null)return nt;if(E>$e)throw new Error(`Length of the window (${E}) may not be larger than frame_length (${$e})`);return nt}},"./src/utils/constants.js":(It,Se,j)=>{j.r(Se),j.d(Se,{GITHUB_ISSUE_URL:()=>F});const F="https://github.com/huggingface/transformers.js/issues/new/choose"},"./src/utils/core.js":(It,Se,j)=>{j.r(Se),j.d(Se,{calculateDimensions:()=>U,calculateReflectOffset:()=>q,dispatchCallback:()=>F,escapeRegExp:()=>be,isIntegralNumber:()=>Ee,isTypedArray:()=>Ce,len:()=>fe,mergeArrays:()=>z,pick:()=>re,pop:()=>P,product:()=>D,reverseDictionary:()=>he});function F(le,O){le&&le(O)}function he(le){return Object.fromEntries(Object.entries(le).map(([O,ee])=>[ee,O]))}function be(le){return le.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function Ce(le){var O,ee,ce;return((ce=(ee=(O=le==null?void 0:le.prototype)==null?void 0:O.__proto__)==null?void 0:ee.constructor)==null?void 0:ce.name)==="TypedArray"}function Ee(le){return Number.isInteger(le)||typeof le=="bigint"}function U(le){const O=[];let ee=le;for(;Array.isArray(ee);)O.push(ee.length),ee=ee[0];return O}function P(le,O,ee=void 0){const ce=le[O];if(ce!==void 0)return delete le[O],ce;if(ee===void 0)throw Error(`Key ${O} does not exist in object.`);return ee}function z(...le){return Array.prototype.concat.apply([],le)}function D(...le){return le.reduce((O,ee)=>O.flatMap(ce=>ee.map(X=>[ce,X])))}function q(le,O){return Math.abs((le+O)%(2*O)-O)}function re(le,O){return Object.assign({},...O.map(ee=>{if(le[ee]!==void 0)return{[ee]:le[ee]}}))}function fe(le){let O=0;for(const ee of le)++O;return O}},"./src/utils/data-structures.js":(It,Se,j)=>{j.r(Se),j.d(Se,{CharTrie:()=>he,PriorityQueue:()=>F,TokenLattice:()=>Ce});class F{constructor(P=(D,q)=>D>q,z=1/0){this._heap=[],this._comparator=P,this._maxSize=z}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...P){return this.extend(P)}extend(P){for(const z of P)if(this.size<this._maxSize)this._heap.push(z),this._siftUp();else{const D=this._smallest();this._comparator(z,this._heap[D])&&(this._heap[D]=z,this._siftUpFrom(D))}return this.size}pop(){const P=this.peek(),z=this.size-1;return z>0&&this._swap(0,z),this._heap.pop(),this._siftDown(),P}replace(P){const z=this.peek();return this._heap[0]=P,this._siftDown(),z}_parent(P){return(P+1>>>1)-1}_left(P){return(P<<1)+1}_right(P){return P+1<<1}_greater(P,z){return this._comparator(this._heap[P],this._heap[z])}_swap(P,z){const D=this._heap[P];this._heap[P]=this._heap[z],this._heap[z]=D}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(P){for(;P>0&&this._greater(P,this._parent(P));)this._swap(P,this._parent(P)),P=this._parent(P)}_siftDown(){let P=0;for(;this._left(P)<this.size&&this._greater(this._left(P),P)||this._right(P)<this.size&&this._greater(this._right(P),P);){const z=this._right(P)<this.size&&this._greater(this._right(P),this._left(P))?this._right(P):this._left(P);this._swap(P,z),P=z}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class he{constructor(){this.root=be.default()}extend(P){for(const z of P)this.push(z)}push(P){let z=this.root;for(const D of P){let q=z.children.get(D);q===void 0&&(q=be.default(),z.children.set(D,q)),z=q}z.isLeaf=!0}*commonPrefixSearch(P){let z=this.root;if(z===void 0)return;let D="";for(const q of P){if(D+=q,z=z.children.get(q),z===void 0)return;z.isLeaf&&(yield D)}}}class be{constructor(P,z){this.isLeaf=P,this.children=z}static default(){return new be(!1,new Map)}}class Ce{constructor(P,z,D){this.chars=Array.from(P),this.len=this.chars.length,this.bosTokenId=z,this.eosTokenId=D,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const q=new Ee(this.bosTokenId,0,0,0,0),re=new Ee(this.eosTokenId,1,this.len,0,0);this.nodes.push(q.clone()),this.nodes.push(re.clone()),this.beginNodes[this.len].push(re),this.endNodes[0].push(q)}insert(P,z,D,q){const re=this.nodes.length,fe=new Ee(q,re,P,z,D);this.beginNodes[P].push(fe),this.endNodes[P+z].push(fe),this.nodes.push(fe)}viterbi(){const P=this.len;let z=0;for(;z<=P;){if(this.beginNodes[z].length==0)return[];for(let le of this.beginNodes[z]){le.prev=null;let O=0,ee=null;for(let ce of this.endNodes[z]){const X=ce.backtraceScore+le.score;(ee===null||X>O)&&(ee=ce.clone(),O=X)}if(ee!==null)le.prev=ee,le.backtraceScore=O;else return[]}++z}const D=[],re=this.beginNodes[P][0].prev;if(re===null)return[];let fe=re.clone();for(;fe.prev!==null;)D.push(fe.clone()),fe=fe.clone().prev.clone();return D.reverse(),D}piece(P){return this.chars.slice(P.pos,P.pos+P.length).join("")}tokens(){return this.viterbi().map(z=>this.piece(z))}tokenIds(){return this.viterbi().map(z=>z.tokenId)}}class Ee{constructor(P,z,D,q,re){this.tokenId=P,this.nodeId=z,this.pos=D,this.length=q,this.score=re,this.prev=null,this.backtraceScore=0}clone(){const P=new Ee(this.tokenId,this.nodeId,this.pos,this.length,this.score);return P.prev=this.prev,P.backtraceScore=this.backtraceScore,P}}},"./src/utils/devices.js":(It,Se,j)=>{j.r(Se),j.d(Se,{DEVICE_TYPES:()=>F});const F=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(It,Se,j)=>{j.r(Se),j.d(Se,{DATA_TYPES:()=>Ce,DEFAULT_DEVICE_DTYPE_MAPPING:()=>Ee,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>U,isWebGpuFp16Supported:()=>be});var F=j("./src/env.js"),he=j("./src/utils/devices.js");const be=function(){let P;return async function(){if(P===void 0)if(!F.apis.IS_WEBGPU_AVAILABLE)P=!1;else try{P=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{P=!1}return P}}(),Ce=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),Ee=Object.freeze({[he.DEVICE_TYPES.wasm]:Ce.q8}),U=Object.freeze({[Ce.fp32]:"",[Ce.fp16]:"_fp16",[Ce.int8]:"_int8",[Ce.uint8]:"_uint8",[Ce.q8]:"_quantized",[Ce.q4]:"_q4",[Ce.q4f16]:"_q4f16",[Ce.bnb4]:"_bnb4"})},"./src/utils/generic.js":(It,Se,j)=>{j.r(Se),j.d(Se,{Callable:()=>F});const F=class{constructor(){let he=function(...be){return he._call(...be)};return Object.setPrototypeOf(he,new.target.prototype)}_call(...he){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(It,Se,j)=>{j.r(Se),j.d(Se,{getFile:()=>z,getModelFile:()=>le,getModelJSON:()=>O});var F=j("?7a2c"),he=j("?a42a"),be=j("./src/env.js"),Ce=j("./src/utils/core.js");const Ee={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class U{constructor(K){if(this.filePath=K,this.headers=new Headers,this.exists=F.existsSync(K),this.exists){this.status=200,this.statusText="OK";let N=F.statSync(K);this.headers.set("content-length",N.size.toString()),this.updateContentType();let k=this;this.body=new ReadableStream({start(R){k.arrayBuffer().then(E=>{R.enqueue(new Uint8Array(E)),R.close()})}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const K=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",Ee[K]??"application/octet-stream")}clone(){let K=new U(this.filePath);return K.exists=this.exists,K.status=this.status,K.statusText=this.statusText,K.headers=new Headers(this.headers),K}async arrayBuffer(){return(await F.promises.readFile(this.filePath)).buffer}async blob(){const K=await F.promises.readFile(this.filePath);return new Blob([K],{type:this.headers.get("content-type")})}async text(){return await F.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function P(X,K=null,N=null){let k;try{k=new URL(X)}catch{return!1}return!(K&&!K.includes(k.protocol)||N&&!N.includes(k.hostname))}async function z(X){var K,N,k,R;if(be.env.useFS&&!P(X,["http:","https:","blob:"]))return new U(X);if(typeof process<"u"&&((K=process==null?void 0:process.release)==null?void 0:K.name)==="node"){const E=!!((N=process.env)!=null&&N.TESTING_REMOTELY),de=be.env.version,we=new Headers;if(we.set("User-Agent",`transformers.js/${de}; is_ci/${E};`),P(X,["http:","https:"],["huggingface.co","hf.co"])){const Oe=((k=process.env)==null?void 0:k.HF_TOKEN)??((R=process.env)==null?void 0:R.HF_ACCESS_TOKEN);Oe&&we.set("Authorization",`Bearer ${Oe}`)}return fetch(X,{headers:we})}else return fetch(X)}const D={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function q(X,K,N){if(!N)return null;const k=D[X]??`Error (${X}) occurred while trying to load file`;throw Error(`${k}: "${K}".`)}class re{constructor(K){this.path=K}async match(K){let N=he.join(this.path,K),k=new U(N);if(k.exists)return k}async put(K,N){const k=Buffer.from(await N.arrayBuffer());let R=he.join(this.path,K);try{await F.promises.mkdir(he.dirname(R),{recursive:!0}),await F.promises.writeFile(R,k)}catch(E){console.warn("An error occurred while writing the file to cache:",E)}}}async function fe(X,...K){for(let N of K)try{let k=await X.match(N);if(k)return k}catch{continue}}async function le(X,K,N=!0,k={}){if(!be.env.allowLocalModels){if(k.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!be.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,Ce.dispatchCallback)(k.progress_callback,{status:"initiate",name:X,file:K});let R;if(!R&&be.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{R=await caches.open("transformers-cache")}catch(Te){console.warn("An error occurred while opening the browser cache:",Te)}}if(!R&&be.env.useFSCache&&(R=new re(k.cache_dir??be.env.cacheDir)),!R&&be.env.useCustomCache){if(!be.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!be.env.customCache.match||!be.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");R=be.env.customCache}const E=k.revision??"main";let de=ce(X,K),we=ce(be.env.localModelPath,de),$e=ce(be.env.remoteHost,be.env.remotePathTemplate.replaceAll("{model}",X).replaceAll("{revision}",encodeURIComponent(E)),K),Oe=E==="main"?de:ce(X,E,K),Fe,nt=R instanceof re?Oe:$e,Je=!1,lt;R&&(lt=await fe(R,we,nt));const me=lt!==void 0;if(lt===void 0){if(be.env.allowLocalModels)if(P(de,["http:","https:"])){if(k.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${de}.`);if(!be.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${de}.`)}else try{lt=await z(we),Fe=we}catch(Ne){console.warn(`Unable to load from local path "${we}": "${Ne}"`)}if(lt===void 0||lt.status===404){if(k.local_files_only||!be.env.allowRemoteModels){if(N)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${we}".`);return null}if(lt=await z($e),lt.status!==200)return q(lt.status,$e,N);Fe=nt}Je=R&&typeof Response<"u"&&lt instanceof Response&&lt.status===200}(0,Ce.dispatchCallback)(k.progress_callback,{status:"download",name:X,file:K});const W={status:"progress",name:X,file:K};let ue;return k.progress_callback?me&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ue=new Uint8Array(await lt.arrayBuffer()),(0,Ce.dispatchCallback)(k.progress_callback,{...W,progress:100,loaded:ue.length,total:ue.length})):ue=await ee(lt,Te=>{(0,Ce.dispatchCallback)(k.progress_callback,{...W,...Te})}):ue=new Uint8Array(await lt.arrayBuffer()),Je&&Fe&&await R.match(Fe)===void 0&&await R.put(Fe,new Response(ue,{headers:lt.headers})).catch(Te=>{console.warn(`Unable to add response to browser cache: ${Te}.`)}),(0,Ce.dispatchCallback)(k.progress_callback,{status:"done",name:X,file:K}),ue}async function O(X,K,N=!0,k={}){let R=await le(X,K,N,k);if(R===null)return{};let de=new TextDecoder("utf-8").decode(R);return JSON.parse(de)}async function ee(X,K){const N=X.headers.get("Content-Length");N===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let k=parseInt(N??"0"),R=new Uint8Array(k),E=0;const de=X.body.getReader();async function we(){const{done:$e,value:Oe}=await de.read();if($e)return;let Fe=E+Oe.length;if(Fe>k){k=Fe;let Je=new Uint8Array(k);Je.set(R),R=Je}R.set(Oe,E),E=Fe;const nt=E/k*100;return K({progress:nt,loaded:E,total:k}),we()}return await we(),R}function ce(...X){return X=X.map((K,N)=>(N&&(K=K.replace(new RegExp("^/"),"")),N!==X.length-1&&(K=K.replace(new RegExp("/$"),"")),K)),X.join("/")}},"./src/utils/image.js":(It,Se,j)=>{j.r(Se),j.d(Se,{RawImage:()=>fe});var F=j("./src/utils/hub.js"),he=j("./src/env.js"),be=j("./src/utils/tensor.js"),Ce=j("?2b25");const Ee=typeof self<"u",U=Ee&&self.constructor.name==="DedicatedWorkerGlobalScope";let P,z,D;if(Ee)P=(le,O)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(le,O)},D=self.createImageBitmap,z=self.ImageData;else if(Ce)D=async le=>{const ee=(await le.metadata()).channels,{data:ce,info:X}=await le.rotate().raw().toBuffer({resolveWithObject:!0}),K=new fe(new Uint8ClampedArray(ce),X.width,X.height,X.channels);return ee!==void 0&&ee!==X.channels&&K.convert(ee),K};else throw new Error("Unable to load image processing library.");const q={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},re=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class fe{constructor(O,ee,ce,X){this.data=O,this.width=ee,this.height=ce,this.channels=X}get size(){return[this.width,this.height]}static async read(O){if(O instanceof fe)return O;if(typeof O=="string"||O instanceof URL)return await this.fromURL(O);throw new Error(`Unsupported input type: ${typeof O}`)}static fromCanvas(O){if(!Ee)throw new Error("fromCanvas() is only supported in browser environments.");const ce=O.getContext("2d").getImageData(0,0,O.width,O.height).data;return new fe(ce,O.width,O.height,4)}static async fromURL(O){const ee=await(0,F.getFile)(O);if(ee.status!==200)throw new Error(`Unable to read image from "${O}" (${ee.status} ${ee.statusText})`);const ce=await ee.blob();return this.fromBlob(ce)}static async fromBlob(O){if(Ee){const ee=await D(O),ce=P(ee.width,ee.height).getContext("2d");return ce.drawImage(ee,0,0),new this(ce.getImageData(0,0,ee.width,ee.height).data,ee.width,ee.height,4)}else{const ee=Ce(await O.arrayBuffer());return await D(ee)}}static fromTensor(O,ee="CHW"){if(O.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${O.dims.length} dimensions.`);if(ee==="CHW")O=O.transpose(1,2,0);else if(ee!=="HWC")throw new Error(`Unsupported channel format: ${ee}`);if(!(O.data instanceof Uint8ClampedArray||O.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${O.type}`);switch(O.dims[2]){case 1:case 2:case 3:case 4:return new fe(O.data,O.dims[1],O.dims[0],O.dims[2]);default:throw new Error(`Unsupported number of channels: ${O.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const O=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let ee=0,ce=0;ee<this.data.length;ee+=this.channels){const X=this.data[ee],K=this.data[ee+1],N=this.data[ee+2];O[ce++]=Math.round(.2989*X+.587*K+.114*N)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(O,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const O=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let ee=0,ce=0;ee<this.data.length;++ee)O[ce++]=this.data[ee],O[ce++]=this.data[ee],O[ce++]=this.data[ee];break;case 4:for(let ee=0,ce=0;ee<this.data.length;ee+=4)O[ce++]=this.data[ee],O[ce++]=this.data[ee+1],O[ce++]=this.data[ee+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(O,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const O=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let ee=0,ce=0;ee<this.data.length;++ee)O[ce++]=this.data[ee],O[ce++]=this.data[ee],O[ce++]=this.data[ee],O[ce++]=255;break;case 3:for(let ee=0,ce=0;ee<this.data.length;ee+=3)O[ce++]=this.data[ee],O[ce++]=this.data[ee+1],O[ce++]=this.data[ee+2],O[ce++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(O,this.width,this.height,4)}async resize(O,ee,{resample:ce=2}={}){let X=q[ce]??ce;if(Ee){const K=this.channels,N=this.toCanvas(),k=P(O,ee).getContext("2d");return k.drawImage(N,0,0,O,ee),new fe(k.getImageData(0,0,O,ee).data,O,ee,4).convert(K)}else{let K=this.toSharp();switch(X){case"box":case"hamming":(X==="box"||X==="hamming")&&(console.warn(`Resampling method ${X} is not yet supported. Using bilinear instead.`),X="bilinear");case"nearest":case"bilinear":case"bicubic":K=K.affine([O/this.width,0,0,ee/this.height],{interpolator:X});break;case"lanczos":K=K.resize({width:O,height:ee,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${X} is not supported.`)}return await D(K)}}async pad([O,ee,ce,X]){if(O=Math.max(O,0),ee=Math.max(ee,0),ce=Math.max(ce,0),X=Math.max(X,0),O===0&&ee===0&&ce===0&&X===0)return this;if(Ee){const K=this.channels,N=this.toCanvas(),k=this.width+O+ee,R=this.height+ce+X,E=P(k,R).getContext("2d");return E.drawImage(N,0,0,this.width,this.height,O,ce,k,R),new fe(E.getImageData(0,0,k,R).data,k,R,4).convert(K)}else{const K=this.toSharp().extend({left:O,right:ee,top:ce,bottom:X});return await D(K)}}async crop([O,ee,ce,X]){if(O=Math.max(O,0),ee=Math.max(ee,0),ce=Math.min(ce,this.width-1),X=Math.min(X,this.height-1),O===0&&ee===0&&ce===this.width-1&&X===this.height-1)return this;const K=ce-O+1,N=X-ee+1;if(Ee){const k=this.channels,R=this.toCanvas(),E=P(K,N).getContext("2d");return E.drawImage(R,O,ee,K,N,0,0,K,N),new fe(E.getImageData(0,0,K,N).data,K,N,4).convert(k)}else{const k=this.toSharp().extract({left:O,top:ee,width:K,height:N});return await D(k)}}async center_crop(O,ee){if(this.width===O&&this.height===ee)return this;const ce=(this.width-O)/2,X=(this.height-ee)/2;if(Ee){const K=this.channels,N=this.toCanvas(),k=P(O,ee).getContext("2d");let R=0,E=0,de=0,we=0;return ce>=0?R=ce:de=-ce,X>=0?E=X:we=-X,k.drawImage(N,R,E,O,ee,de,we,O,ee),new fe(k.getImageData(0,0,O,ee).data,O,ee,4).convert(K)}else{let K=this.toSharp();if(ce>=0&&X>=0)K=K.extract({left:Math.floor(ce),top:Math.floor(X),width:O,height:ee});else if(ce<=0&&X<=0){const N=Math.floor(-X),k=Math.floor(-ce);K=K.extend({top:N,left:k,right:O-this.width-k,bottom:ee-this.height-N})}else{let N=[0,0],k=0;X<0?(N[0]=Math.floor(-X),N[1]=ee-this.height-N[0]):k=Math.floor(X);let R=[0,0],E=0;ce<0?(R[0]=Math.floor(-ce),R[1]=O-this.width-R[0]):E=Math.floor(ce),K=K.extend({top:N[0],bottom:N[1],left:R[0],right:R[1]}).extract({left:E,top:k,width:O,height:ee})}return await D(K)}}async toBlob(O="image/png",ee=1){if(!Ee)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:O,quality:ee})}toTensor(O="CHW"){let ee=new be.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(O!=="HWC")if(O==="CHW")ee=ee.permute(2,0,1);else throw new Error(`Unsupported channel format: ${O}`);return ee}toCanvas(){if(!Ee)throw new Error("toCanvas() is only supported in browser environments.");const O=this.clone().rgba(),ee=P(O.width,O.height),ce=new z(O.data,O.width,O.height);return ee.getContext("2d").putImageData(ce,0,0),ee}_update(O,ee,ce,X=null){return this.data=O,this.width=ee,this.height=ce,X!==null&&(this.channels=X),this}clone(){return new fe(this.data.slice(),this.width,this.height,this.channels)}convert(O){if(this.channels===O)return this;switch(O){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(O){if(Ee){if(U)throw new Error("Unable to save an image from a Web Worker.");const ee=O.split(".").pop().toLowerCase(),ce=re.get(ee)??"image/png",X=await this.toBlob(ce),K=URL.createObjectURL(X),N=document.createElement("a");N.href=K,N.download=O,N.click(),N.remove()}else{if(he.env.useFS)return await this.toSharp().toFile(O);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(Ee)throw new Error("toSharp() is only supported in server-side environments.");return Ce(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}},"./src/utils/maths.js":(It,Se,j)=>{j.r(Se),j.d(Se,{FFT:()=>le,bankers_round:()=>ce,cos_sim:()=>U,dot:()=>Ee,dynamic_time_warping:()=>X,interpolate_data:()=>F,log_softmax:()=>Ce,magnitude:()=>P,max:()=>D,medianFilter:()=>O,min:()=>z,permute_data:()=>he,round:()=>ee,softmax:()=>be});function F(K,[N,k,R],[E,de],we="bilinear",$e=!1){const Oe=de/R,Fe=E/k,nt=new K.constructor(E*de*N),Je=k*R,lt=E*de;for(let me=0;me<E;++me)for(let W=0;W<de;++W){const ue=me*de+W,Te=(W+.5)/Oe-.5,Ne=(me+.5)/Fe-.5;let at=Math.floor(Te),se=Math.floor(Ne);const Ke=Math.min(at+1,R-1),ct=Math.min(se+1,k-1);at=Math.max(at,0),se=Math.max(se,0);const Be=Te-at,mt=Ne-se,bt=(1-Be)*(1-mt),He=Be*(1-mt),J=(1-Be)*mt,Ae=Be*mt,Ge=se*R,Ze=ct*R,je=Ge+at,Ve=Ge+Ke,dt=Ze+at,yt=Ze+Ke;for(let Pt=0;Pt<N;++Pt){const Et=Pt*Je;nt[Pt*lt+ue]=bt*K[Et+je]+He*K[Et+Ve]+J*K[Et+dt]+Ae*K[Et+yt]}}return nt}function he(K,N,k){const R=new Array(k.length),E=new Array(k.length);for(let $e=k.length-1,Oe=1;$e>=0;--$e)E[$e]=Oe,R[$e]=N[k[$e]],Oe*=R[$e];const de=k.map(($e,Oe)=>E[k.indexOf(Oe)]),we=new K.constructor(K.length);for(let $e=0;$e<K.length;++$e){let Oe=0;for(let Fe=N.length-1,nt=$e;Fe>=0;--Fe)Oe+=nt%N[Fe]*de[Fe],nt=Math.floor(nt/N[Fe]);we[Oe]=K[$e]}return[we,R]}function be(K){const N=D(K)[0],k=K.map(de=>Math.exp(de-N)),R=k.reduce((de,we)=>de+we,0);return k.map(de=>de/R)}function Ce(K){const N=D(K)[0];let k=0;for(let de=0;de<K.length;++de)k+=Math.exp(K[de]-N);const R=Math.log(k);return K.map(de=>de-N-R)}function Ee(K,N){let k=0;for(let R=0;R<K.length;++R)k+=K[R]*N[R];return k}function U(K,N){const k=Ee(K,N),R=P(K),E=P(N);return k/(R*E)}function P(K){return Math.sqrt(K.reduce((N,k)=>N+k*k,0))}function z(K){if(K.length===0)throw Error("Array must not be empty");let N=K[0],k=0;for(let R=1;R<K.length;++R)K[R]<N&&(N=K[R],k=R);return[N,k]}function D(K){if(K.length===0)throw Error("Array must not be empty");let N=K[0],k=0;for(let R=1;R<K.length;++R)K[R]>N&&(N=K[R],k=R);return[Number(N),k]}function q(K){return K>0&&(K&K-1)===0}class re{constructor(N){if(this.size=N|0,this.size<=1||!q(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=N<<1,this.table=new Float64Array(this.size*2);for(let R=0;R<this.table.length;R+=2){const E=Math.PI*R/this.size;this.table[R]=Math.cos(E),this.table[R+1]=-Math.sin(E)}let k=0;for(let R=1;this.size>R;R<<=1)++k;this._width=k%2===0?k-1:k,this._bitrev=new Int32Array(1<<this._width);for(let R=0;R<this._bitrev.length;++R){this._bitrev[R]=0;for(let E=0;E<this._width;E+=2){const de=this._width-E-2;this._bitrev[R]|=(R>>>E&3)<<de}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(N,k){const R=k||new Array(N.length>>>1);for(let E=0;E<N.length;E+=2)R[E>>>1]=N[E];return R}toComplexArray(N,k){const R=k||this.createComplexArray();for(let E=0;E<R.length;E+=2)R[E]=N[E>>>1],R[E+1]=0;return R}transform(N,k){if(N===k)throw new Error("Input and output buffers must be different");this._transform4(N,k,1)}realTransform(N,k){if(N===k)throw new Error("Input and output buffers must be different");this._realTransform4(N,k,1)}inverseTransform(N,k){if(N===k)throw new Error("Input and output buffers must be different");this._transform4(N,k,-1);for(let R=0;R<N.length;++R)N[R]/=this.size}_transform4(N,k,R){const E=this._csize;let we=1<<this._width,$e=E/we<<1,Oe,Fe;const nt=this._bitrev;if($e===4)for(Oe=0,Fe=0;Oe<E;Oe+=$e,++Fe){const lt=nt[Fe];this._singleTransform2(k,N,Oe,lt,we)}else for(Oe=0,Fe=0;Oe<E;Oe+=$e,++Fe){const lt=nt[Fe];this._singleTransform4(k,N,Oe,lt,we,R)}const Je=this.table;for(we>>=2;we>=2;we>>=2){$e=E/we<<1;const lt=$e>>>2;for(Oe=0;Oe<E;Oe+=$e){const me=Oe+lt-1;for(let W=Oe,ue=0;W<me;W+=2,ue+=we){const Te=W,Ne=Te+lt,at=Ne+lt,se=at+lt,Ke=N[Te],ct=N[Te+1],Be=N[Ne],mt=N[Ne+1],bt=N[at],He=N[at+1],J=N[se],Ae=N[se+1],Ge=Je[ue],Ze=R*Je[ue+1],je=Be*Ge-mt*Ze,Ve=Be*Ze+mt*Ge,dt=Je[2*ue],yt=R*Je[2*ue+1],Pt=bt*dt-He*yt,Et=bt*yt+He*dt,M=Je[3*ue],H=R*Je[3*ue+1],$=J*M-Ae*H,Z=J*H+Ae*M,pe=Ke+Pt,et=ct+Et,Xe=Ke-Pt,Rt=ct-Et,ht=je+$,Tt=Ve+Z,zt=R*(je-$),St=R*(Ve-Z);N[Te]=pe+ht,N[Te+1]=et+Tt,N[Ne]=Xe+St,N[Ne+1]=Rt-zt,N[at]=pe-ht,N[at+1]=et-Tt,N[se]=Xe-St,N[se+1]=Rt+zt}}}}_singleTransform2(N,k,R,E,de){const we=N[E],$e=N[E+1],Oe=N[E+de],Fe=N[E+de+1];k[R]=we+Oe,k[R+1]=$e+Fe,k[R+2]=we-Oe,k[R+3]=$e-Fe}_singleTransform4(N,k,R,E,de,we){const $e=de*2,Oe=de*3,Fe=N[E],nt=N[E+1],Je=N[E+de],lt=N[E+de+1],me=N[E+$e],W=N[E+$e+1],ue=N[E+Oe],Te=N[E+Oe+1],Ne=Fe+me,at=nt+W,se=Fe-me,Ke=nt-W,ct=Je+ue,Be=lt+Te,mt=we*(Je-ue),bt=we*(lt-Te);k[R]=Ne+ct,k[R+1]=at+Be,k[R+2]=se+bt,k[R+3]=Ke-mt,k[R+4]=Ne-ct,k[R+5]=at-Be,k[R+6]=se-bt,k[R+7]=Ke+mt}_realTransform4(N,k,R){const E=this._csize;let we=1<<this._width,$e=E/we<<1,Oe,Fe;const nt=this._bitrev;if($e===4)for(Oe=0,Fe=0;Oe<E;Oe+=$e,++Fe){const me=nt[Fe];this._singleRealTransform2(k,N,Oe,me>>>1,we>>>1)}else for(Oe=0,Fe=0;Oe<E;Oe+=$e,++Fe){const me=nt[Fe];this._singleRealTransform4(k,N,Oe,me>>>1,we>>>1,R)}const Je=this.table;for(we>>=2;we>=2;we>>=2){$e=E/we<<1;const me=$e>>>1,W=me>>>1,ue=W>>>1;for(Oe=0;Oe<E;Oe+=$e)for(let Te=0,Ne=0;Te<=ue;Te+=2,Ne+=we){const at=Oe+Te,se=at+W,Ke=se+W,ct=Ke+W,Be=N[at],mt=N[at+1],bt=N[se],He=N[se+1],J=N[Ke],Ae=N[Ke+1],Ge=N[ct],Ze=N[ct+1],je=Be,Ve=mt,dt=Je[Ne],yt=R*Je[Ne+1],Pt=bt*dt-He*yt,Et=bt*yt+He*dt,M=Je[2*Ne],H=R*Je[2*Ne+1],$=J*M-Ae*H,Z=J*H+Ae*M,pe=Je[3*Ne],et=R*Je[3*Ne+1],Xe=Ge*pe-Ze*et,Rt=Ge*et+Ze*pe,ht=je+$,Tt=Ve+Z,zt=je-$,St=Ve-Z,dr=Pt+Xe,Tr=Et+Rt,Zr=R*(Pt-Xe),Dr=R*(Et-Rt);if(N[at]=ht+dr,N[at+1]=Tt+Tr,N[se]=zt+Dr,N[se+1]=St-Zr,Te===0){N[Ke]=ht-dr,N[Ke+1]=Tt-Tr;continue}if(Te===ue)continue;const en=Oe+W-Te,ot=Oe+me-Te;N[en]=zt-R*Dr,N[en+1]=-St-R*Zr,N[ot]=ht-R*dr,N[ot+1]=-Tt+R*Tr}}const lt=E>>>1;for(let me=2;me<lt;me+=2)N[E-me]=N[me],N[E-me+1]=-N[me+1]}_singleRealTransform2(N,k,R,E,de){const we=N[E],$e=N[E+de];k[R]=we+$e,k[R+1]=0,k[R+2]=we-$e,k[R+3]=0}_singleRealTransform4(N,k,R,E,de,we){const $e=de*2,Oe=de*3,Fe=N[E],nt=N[E+de],Je=N[E+$e],lt=N[E+Oe],me=Fe+Je,W=Fe-Je,ue=nt+lt,Te=we*(nt-lt);k[R]=me+ue,k[R+1]=0,k[R+2]=W,k[R+3]=-Te,k[R+4]=me-ue,k[R+5]=0,k[R+6]=W,k[R+7]=Te}}class fe{constructor(N){const k=2*(N-1),R=2*(2*N-1),E=2**Math.ceil(Math.log2(R));this.bufferSize=E,this._a=k;const de=new Float64Array(R),we=new Float64Array(E);this._chirpBuffer=new Float64Array(E),this._buffer1=new Float64Array(E),this._buffer2=new Float64Array(E),this._outBuffer1=new Float64Array(E),this._outBuffer2=new Float64Array(E);const $e=-2*Math.PI/N,Oe=Math.cos($e),Fe=Math.sin($e);for(let nt=0;nt<R>>1;++nt){const Je=(nt+1-N)**2/2,lt=Math.sqrt(Oe**2+Fe**2)**Je,me=Je*Math.atan2(Fe,Oe),W=2*nt;de[W]=lt*Math.cos(me),de[W+1]=lt*Math.sin(me),we[W]=de[W],we[W+1]=-de[W+1]}this._slicedChirpBuffer=de.subarray(k,R),this._f=new re(E>>1),this._f.transform(this._chirpBuffer,we)}_transform(N,k,R){const E=this._buffer1,de=this._buffer2,we=this._outBuffer1,$e=this._outBuffer2,Oe=this._chirpBuffer,Fe=this._slicedChirpBuffer,nt=this._a;if(R)for(let Je=0;Je<Fe.length;Je+=2){const lt=Je+1,me=Je>>1,W=k[me];E[Je]=W*Fe[Je],E[lt]=W*Fe[lt]}else for(let Je=0;Je<Fe.length;Je+=2){const lt=Je+1;E[Je]=k[Je]*Fe[Je]-k[lt]*Fe[lt],E[lt]=k[Je]*Fe[lt]+k[lt]*Fe[Je]}this._f.transform(we,E);for(let Je=0;Je<Oe.length;Je+=2){const lt=Je+1;de[Je]=we[Je]*Oe[Je]-we[lt]*Oe[lt],de[lt]=we[Je]*Oe[lt]+we[lt]*Oe[Je]}this._f.inverseTransform($e,de);for(let Je=0;Je<$e.length;Je+=2){const lt=$e[Je+nt],me=$e[Je+nt+1],W=Fe[Je],ue=Fe[Je+1];N[Je]=lt*W-me*ue,N[Je+1]=lt*ue+me*W}}transform(N,k){this._transform(N,k,!1)}realTransform(N,k){this._transform(N,k,!0)}}class le{constructor(N){this.fft_length=N,this.isPowerOfTwo=q(N),this.isPowerOfTwo?(this.fft=new re(N),this.outputBufferSize=2*N):(this.fft=new fe(N),this.outputBufferSize=this.fft.bufferSize)}realTransform(N,k){this.fft.realTransform(N,k)}transform(N,k){this.fft.transform(N,k)}}function O(K,N){if(N%2===0||N<=0)throw new Error("Window size must be a positive odd number");const k=new K.constructor(K.length),R=new K.constructor(N),E=Math.floor(N/2);for(let de=0;de<K.length;++de){let we=0;for(let $e=-E;$e<=E;++$e){let Oe=de+$e;Oe<0?Oe=Math.abs(Oe):Oe>=K.length&&(Oe=2*(K.length-1)-Oe),R[we++]=K[Oe]}R.sort(),k[de]=R[E]}return k}function ee(K,N){const k=Math.pow(10,N);return Math.round(K*k)/k}function ce(K){const N=Math.round(K);return Math.abs(K)%1===.5?N%2===0?N:N-1:N}function X(K){const N=K.length,k=K[0].length,R=[N+1,k+1],E=Array.from({length:R[0]},()=>Array(R[1]).fill(1/0));E[0][0]=0;const de=Array.from({length:R[0]},()=>Array(R[1]).fill(-1));for(let nt=1;nt<R[1];++nt)for(let Je=1;Je<R[0];++Je){const lt=E[Je-1][nt-1],me=E[Je-1][nt],W=E[Je][nt-1];let ue,Te;lt<me&&lt<W?(ue=lt,Te=0):me<lt&&me<W?(ue=me,Te=1):(ue=W,Te=2),E[Je][nt]=K[Je-1][nt-1]+ue,de[Je][nt]=Te}for(let nt=0;nt<R[1];++nt)de[0][nt]=2;for(let nt=0;nt<R[0];++nt)de[nt][0]=1;let we=N,$e=k,Oe=[],Fe=[];for(;we>0||$e>0;)switch(Oe.push(we-1),Fe.push($e-1),de[we][$e]){case 0:--we,--$e;break;case 1:--we;break;case 2:--$e;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${we}, ${$e}]. Please file a bug report.`)}return Oe.reverse(),Fe.reverse(),[Oe,Fe]}},"./src/utils/tensor.js":(It,Se,j)=>{j.r(Se),j.d(Se,{Tensor:()=>Ee,cat:()=>K,full:()=>we,full_like:()=>$e,interpolate:()=>z,interpolate_4d:()=>D,layer_norm:()=>O,matmul:()=>q,mean:()=>R,mean_pooling:()=>le,ones:()=>Oe,ones_like:()=>Fe,permute:()=>P,quantize_embeddings:()=>lt,rfft:()=>re,stack:()=>N,std_mean:()=>k,topk:()=>fe,zeros:()=>nt,zeros_like:()=>Je});var F=j("./src/utils/maths.js"),he=j("./src/backends/onnx.js"),be=j("./src/ops/registry.js");const Ce=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class Ee{constructor(...W){Me(this,"ort_tensor");return(0,he.isONNXTensor)(W[0])?this.ort_tensor=W[0]:this.ort_tensor=new he.Tensor(W[0],W[1],W[2]),new Proxy(this,{get:(ue,Te)=>{if(typeof Te=="string"){let Ne=Number(Te);if(Number.isInteger(Ne))return ue._getitem(Ne)}return ue[Te]},set:(ue,Te,Ne)=>ue[Te]=Ne})}get dims(){return this.ort_tensor.dims}set dims(W){this.ort_tensor.dims=W}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[W,...ue]=this.dims;if(ue.length>0){const Te=ue.reduce((Ne,at)=>Ne*at);for(let Ne=0;Ne<W;++Ne)yield this._subarray(Ne,Te,ue)}else yield*this.data}_getitem(W){const[ue,...Te]=this.dims;if(W=X(W,ue),Te.length>0){const Ne=Te.reduce((at,se)=>at*se);return this._subarray(W,Ne,Te)}else return new Ee(this.type,[this.data[W]],Te)}indexOf(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)if(ue[Te]==W)return Te;return-1}_subarray(W,ue,Te){const Ne=W*ue,at=(W+1)*ue,se="subarray"in this.data?this.data.subarray(Ne,at):this.data.slice(Ne,at);return new Ee(this.type,se,Te)}item(){const W=this.data;if(W.length!==1)throw new Error(`a Tensor with ${W.length} elements cannot be converted to Scalar`);return W[0]}tolist(){return U(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const W=this.data;for(let ue=0;ue<W.length;++ue)W[ue]=1/(1+Math.exp(-W[ue]));return this}map(W){return this.clone().map_(W)}map_(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)ue[Te]=W(ue[Te],Te,ue);return this}mul(W){return this.clone().mul_(W)}mul_(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)ue[Te]*=W;return this}div(W){return this.clone().div_(W)}div_(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)ue[Te]/=W;return this}add(W){return this.clone().add_(W)}add_(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)ue[Te]+=W;return this}sub(W){return this.clone().sub_(W)}sub_(W){const ue=this.data;for(let Te=0;Te<ue.length;++Te)ue[Te]-=W;return this}clone(){return new Ee(this.type,this.data.slice(),this.dims.slice())}slice(...W){const ue=[],Te=[];for(let Be=0;Be<this.dims.length;++Be){let mt=W[Be];if(mt==null)Te.push([0,this.dims[Be]]),ue.push(this.dims[Be]);else if(typeof mt=="number")mt=X(mt,this.dims[Be],Be),Te.push([mt,mt+1]);else if(Array.isArray(mt)&&mt.length===2){let[bt,He]=mt;if(bt=bt===null?0:X(bt,this.dims[Be],Be,!1),He=He===null?this.dims[Be]:X(He,this.dims[Be],Be,!1),bt>He)throw new Error(`Invalid slice: ${mt}`);const J=[Math.max(bt,0),Math.min(He,this.dims[Be])];Te.push(J),ue.push(J[1]-J[0])}else throw new Error(`Invalid slice: ${mt}`)}const Ne=Te.map(([Be,mt])=>mt-Be),at=Ne.reduce((Be,mt)=>Be*mt),se=this.data,Ke=new se.constructor(at),ct=this.stride();for(let Be=0;Be<at;++Be){let mt=0;for(let bt=Ne.length-1,He=Be;bt>=0;--bt){const J=Ne[bt];mt+=(He%J+Te[bt][0])*ct[bt],He=Math.floor(He/J)}Ke[Be]=se[mt]}return new Ee(this.type,Ke,ue)}permute(...W){return P(this,W)}transpose(...W){return this.permute(...W)}sum(W=null,ue=!1){return this.norm(1,W,ue)}norm(W="fro",ue=null,Te=!1){if(W==="fro")W=2;else if(typeof W=="string")throw Error(`Unsupported norm: ${W}`);const Ne=this.data;if(ue===null){let Ke=Ne.reduce((ct,Be)=>ct+Be**W,0)**(1/W);return new Ee(this.type,[Ke],[])}ue=X(ue,this.dims.length);const at=this.dims.slice();at[ue]=1;const se=new Ne.constructor(Ne.length/this.dims[ue]);for(let Ke=0;Ke<Ne.length;++Ke){let ct=0;for(let Be=this.dims.length-1,mt=Ke,bt=1;Be>=0;--Be){const He=this.dims[Be];if(Be!==ue){const J=mt%He;ct+=J*bt,bt*=at[Be]}mt=Math.floor(mt/He)}se[ct]+=Ne[Ke]**W}if(W!==1)for(let Ke=0;Ke<se.length;++Ke)se[Ke]=se[Ke]**(1/W);return Te||at.splice(ue,1),new Ee(this.type,se,at)}normalize_(W=2,ue=1){ue=X(ue,this.dims.length);const Te=this.norm(W,ue,!0),Ne=this.data,at=Te.data;for(let se=0;se<Ne.length;++se){let Ke=0;for(let ct=this.dims.length-1,Be=se,mt=1;ct>=0;--ct){const bt=this.dims[ct];if(ct!==ue){const He=Be%bt;Ke+=He*mt,mt*=this.dims[ct]}Be=Math.floor(Be/bt)}Ne[se]/=at[Ke]}return this}normalize(W=2,ue=1){return this.clone().normalize_(W,ue)}stride(){return E(this.dims)}squeeze(W=null){return new Ee(this.type,this.data,ee(this.dims,W))}squeeze_(W=null){return this.dims=ee(this.dims,W),this}unsqueeze(W=null){return new Ee(this.type,this.data,ce(this.dims,W))}unsqueeze_(W=null){return this.dims=ce(this.dims,W),this}flatten_(W=0,ue=-1){ue=(ue+this.dims.length)%this.dims.length;let Te=this.dims.slice(0,W),Ne=this.dims.slice(W,ue+1),at=this.dims.slice(ue+1);return this.dims=[...Te,Ne.reduce((se,Ke)=>se*Ke,1),...at],this}flatten(W=0,ue=-1){return this.clone().flatten_(W,ue)}view(...W){let ue=-1;for(let Ne=0;Ne<W.length;++Ne)if(W[Ne]===-1){if(ue!==-1)throw new Error("Only one dimension can be inferred");ue=Ne}const Te=this.data;if(ue!==-1){const Ne=W.reduce((at,se,Ke)=>Ke!==ue?at*se:at,1);W[ue]=Te.length/Ne}return new Ee(this.type,Te,W)}neg_(){const W=this.data;for(let ue=0;ue<W.length;++ue)W[ue]=-W[ue];return this}neg(){return this.clone().neg_()}clamp_(W,ue){const Te=this.data;for(let Ne=0;Ne<Te.length;++Ne)Te[Ne]=Math.min(Math.max(Te[Ne],W),ue);return this}clamp(W,ue){return this.clone().clamp_(W,ue)}round_(){const W=this.data;for(let ue=0;ue<W.length;++ue)W[ue]=Math.round(W[ue]);return this}round(){return this.clone().round_()}mean(W=null,ue=!1){return R(this,W,ue)}to(W){if(this.type===W)return this;if(!Ce.hasOwnProperty(W))throw new Error(`Unsupported type: ${W}`);return new Ee(W,Ce[W].from(this.data),this.dims)}}function U(me,W){const ue=me.length,Te=W.reduce((at,se)=>at*se);if(ue!==Te)throw Error(`cannot reshape array of size ${ue} into shape (${W})`);let Ne=me;for(let at=W.length-1;at>=0;at--)Ne=Ne.reduce((se,Ke)=>{let ct=se[se.length-1];return ct.length<W[at]?ct.push(Ke):se.push([Ke]),se},[[]]);return Ne[0]}function P(me,W){const[ue,Te]=(0,F.permute_data)(me.data,me.dims,W);return new Ee(me.type,ue,Te)}function z(me,[W,ue],Te="bilinear",Ne=!1){const at=me.dims.at(-3)??1,se=me.dims.at(-2),Ke=me.dims.at(-1);let ct=(0,F.interpolate_data)(me.data,[at,se,Ke],[W,ue],Te,Ne);return new Ee(me.type,ct,[at,W,ue])}async function D(me,{size:W=null,mode:ue="bilinear"}={}){if(me.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!W)throw new Error("`interpolate_4d` requires a `size` argument.");let Te;if(W.length===2)Te=[...me.dims.slice(0,2),...W];else if(W.length===3)Te=[me.dims[0],...W];else if(W.length===4)Te=W;else throw new Error("`size` must be of length 2, 3, or 4.");let Ne;if(ue==="bilinear")Ne=await be.TensorOpRegistry.bilinear_interpolate_4d;else if(ue==="bicubic")Ne=await be.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${ue}`);const at=new Ee("int64",new BigInt64Array(Te.map(BigInt)),[Te.length]);return await Ne({x:me,s:at})}async function q(me,W){return await(await be.TensorOpRegistry.matmul)({a:me,b:W})}async function re(me,W){return await(await be.TensorOpRegistry.rfft)({x:me,a:W})}async function fe(me,W){const ue=await be.TensorOpRegistry.top_k;return W===null?W=me.dims.at(-1):W=Math.min(W,me.dims.at(-1)),await ue({x:me,k:new Ee("int64",[BigInt(W)],[1])})}function le(me,W){const ue=me.data,Te=W.data,Ne=[me.dims[0],me.dims[2]],at=new ue.constructor(Ne[0]*Ne[1]),[se,Ke,ct]=me.dims;let Be=0;for(let mt=0;mt<se;++mt){const bt=mt*ct*Ke;for(let He=0;He<ct;++He){let J=0,Ae=0;const Ge=mt*Ke,Ze=bt+He;for(let Ve=0;Ve<Ke;++Ve){const dt=Number(Te[Ge+Ve]);Ae+=dt,J+=ue[Ze+Ve*ct]*dt}const je=J/Ae;at[Be++]=je}}return new Ee(me.type,at,Ne)}function O(me,W,{eps:ue=1e-5}={}){if(me.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[Te,Ne]=me.dims;if(W.length!==1&&W[0]!==Ne)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[at,se]=k(me,1,0,!0),Ke=at.data,ct=se.data,Be=me.data,mt=new Be.constructor(Be.length);for(let bt=0;bt<Te;++bt){const He=bt*Ne;for(let J=0;J<Ne;++J){const Ae=He+J;mt[Ae]=(Be[Ae]-ct[bt])/(Ke[bt]+ue)}}return new Ee(me.type,mt,me.dims)}function ee(me,W){return me=me.slice(),W===null?me=me.filter(ue=>ue!==1):typeof W=="number"?me[W]===1&&me.splice(W,1):Array.isArray(W)&&(me=me.filter((ue,Te)=>ue!==1||!W.includes(Te))),me}function ce(me,W){return W=X(W,me.length+1),me=me.slice(),me.splice(W,0,1),me}function X(me,W,ue=null,Te=!0){if(Te&&(me<-W||me>=W))throw new Error(`IndexError: index ${me} is out of bounds for dimension${ue===null?"":" "+ue} with size ${W}`);return me<0&&(me=(me%W+W)%W),me}function K(me,W=0){W=X(W,me[0].dims.length);const ue=me[0].dims.slice();ue[W]=me.reduce((se,Ke)=>se+Ke.dims[W],0);const Te=ue.reduce((se,Ke)=>se*Ke,1),Ne=new me[0].data.constructor(Te),at=me[0].type;if(W===0){let se=0;for(const Ke of me){const ct=Ke.data;Ne.set(ct,se),se+=ct.length}}else{let se=0;for(let Ke=0;Ke<me.length;++Ke){const{data:ct,dims:Be}=me[Ke];for(let mt=0;mt<ct.length;++mt){let bt=0;for(let He=Be.length-1,J=mt,Ae=1;He>=0;--He){const Ge=Be[He];let Ze=J%Ge;He===W&&(Ze+=se),bt+=Ze*Ae,Ae*=ue[He],J=Math.floor(J/Ge)}Ne[bt]=ct[mt]}se+=Be[W]}}return new Ee(at,Ne,ue)}function N(me,W=0){return K(me.map(ue=>ue.unsqueeze(W)),W)}function k(me,W=null,ue=1,Te=!1){const Ne=me.data,at=me.dims;if(W===null){const He=Ne.reduce((Ze,je)=>Ze+je,0)/Ne.length,J=Math.sqrt(Ne.reduce((Ze,je)=>Ze+(je-He)**2,0)/(Ne.length-ue)),Ae=new Ee(me.type,[He],[]);return[new Ee(me.type,[J],[]),Ae]}W=X(W,at.length);const se=R(me,W,Te),Ke=se.data,ct=at.slice();ct[W]=1;const Be=new Ne.constructor(Ne.length/at[W]);for(let bt=0;bt<Ne.length;++bt){let He=0;for(let J=at.length-1,Ae=bt,Ge=1;J>=0;--J){const Ze=at[J];if(J!==W){const je=Ae%Ze;He+=je*Ge,Ge*=ct[J]}Ae=Math.floor(Ae/Ze)}Be[He]+=(Ne[bt]-Ke[He])**2}for(let bt=0;bt<Be.length;++bt)Be[bt]=Math.sqrt(Be[bt]/(at[W]-ue));return Te||ct.splice(W,1),[new Ee(me.type,Be,ct),se]}function R(me,W=null,ue=!1){const Te=me.data;if(W===null){const Ke=Te.reduce((ct,Be)=>ct+Be,0);return new Ee(me.type,[Ke/Te.length],[])}const Ne=me.dims;W=X(W,Ne.length);const at=Ne.slice();at[W]=1;const se=new Te.constructor(Te.length/Ne[W]);for(let Ke=0;Ke<Te.length;++Ke){let ct=0;for(let Be=Ne.length-1,mt=Ke,bt=1;Be>=0;--Be){const He=Ne[Be];if(Be!==W){const J=mt%He;ct+=J*bt,bt*=at[Be]}mt=Math.floor(mt/He)}se[ct]+=Te[Ke]}if(Ne[W]!==1)for(let Ke=0;Ke<se.length;++Ke)se[Ke]=se[Ke]/Ne[W];return ue||at.splice(W,1),new Ee(me.type,se,at)}function E(me){const W=new Array(me.length);for(let ue=me.length-1,Te=1;ue>=0;--ue)W[ue]=Te,Te*=me[ue];return W}function de(me,W,ue,Te){const Ne=me.reduce((at,se)=>at*se,1);return new Ee(ue,new Te(Ne).fill(W),me)}function we(me,W){let ue,Te;if(typeof W=="number")ue="float32",Te=Float32Array;else if(typeof W=="bigint")ue="int64",Te=BigInt64Array;else throw new Error(`Unsupported data type: ${typeof W}`);return de(me,W,ue,Te)}function $e(me,W){return we(me.dims,W)}function Oe(me){return de(me,1n,"int64",BigInt64Array)}function Fe(me){return Oe(me.dims)}function nt(me){return de(me,0n,"int64",BigInt64Array)}function Je(me){return nt(me.dims)}function lt(me,W){if(me.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(me.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(W))throw new Error("The precision must be either 'binary' or 'ubinary'");const ue=W==="binary",Te=ue?"int8":"uint8",Ne=ue?Int8Array:Uint8Array,at=me.data,se=new Ne(at.length/8);for(let Ke=0;Ke<at.length;++Ke){const ct=at[Ke]>0?1:0,Be=Math.floor(Ke/8),mt=Ke%8;se[Be]|=ct<<7-mt,ue&&mt===0&&(se[Be]-=128)}return new Ee(Te,se,[me.dims[0],me.dims[1]/8])}}},es={};function Rr(It){var Se=es[It];if(Se!==void 0)return Se.exports;var j=es[It]={exports:{}};return Ms[It](j,j.exports,Rr),j.exports}Rr.m=Ms,(()=>{var It=Object.getPrototypeOf?j=>Object.getPrototypeOf(j):j=>j.__proto__,Se;Rr.t=function(j,F){if(F&1&&(j=this(j)),F&8||typeof j=="object"&&j&&(F&4&&j.__esModule||F&16&&typeof j.then=="function"))return j;var he=Object.create(null);Rr.r(he);var be={};Se=Se||[null,It({}),It([]),It(It)];for(var Ce=F&2&&j;typeof Ce=="object"&&!~Se.indexOf(Ce);Ce=It(Ce))Object.getOwnPropertyNames(Ce).forEach(Ee=>be[Ee]=()=>j[Ee]);return be.default=()=>j,Rr.d(he,be),he}})(),Rr.d=(It,Se)=>{for(var j in Se)Rr.o(Se,j)&&!Rr.o(It,j)&&Object.defineProperty(It,j,{enumerable:!0,get:Se[j]})},Rr.o=(It,Se)=>Object.prototype.hasOwnProperty.call(It,Se),Rr.r=It=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(It,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(It,"__esModule",{value:!0})},(()=>{var It;if(typeof self.location.href=="string"&&(It=self.location.href),!It)throw new Error("Automatic publicPath is not supported in this browser");It=It.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),Rr.p=It})(),Rr.b=new URL("./",self.location.href);var p={};/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Rr.r(p),Rr.d(p,{ASTFeatureExtractor:()=>er.ASTFeatureExtractor,ASTForAudioClassification:()=>y.ASTForAudioClassification,ASTModel:()=>y.ASTModel,ASTPreTrainedModel:()=>y.ASTPreTrainedModel,AlbertForMaskedLM:()=>y.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>y.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>y.AlbertForSequenceClassification,AlbertModel:()=>y.AlbertModel,AlbertPreTrainedModel:()=>y.AlbertPreTrainedModel,AlbertTokenizer:()=>ar.AlbertTokenizer,AudioClassificationPipeline:()=>Hr.AudioClassificationPipeline,AutoConfig:()=>bc.AutoConfig,AutoModel:()=>y.AutoModel,AutoModelForAudioClassification:()=>y.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>y.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>y.AutoModelForCTC,AutoModelForCausalLM:()=>y.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>y.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>y.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>y.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>y.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>y.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>y.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>y.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>y.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>y.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>y.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>y.AutoModelForObjectDetection,AutoModelForQuestionAnswering:()=>y.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>y.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>y.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>y.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>y.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>y.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>y.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>y.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>y.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>y.AutoModelForVision2Seq,AutoModelForXVector:()=>y.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>y.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>er.AutoProcessor,AutoTokenizer:()=>ar.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>Hr.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>y.BartForConditionalGeneration,BartForSequenceClassification:()=>y.BartForSequenceClassification,BartModel:()=>y.BartModel,BartPretrainedModel:()=>y.BartPretrainedModel,BartTokenizer:()=>ar.BartTokenizer,BaseModelOutput:()=>y.BaseModelOutput,BaseStreamer:()=>Mc.BaseStreamer,BeitFeatureExtractor:()=>er.BeitFeatureExtractor,BeitForImageClassification:()=>y.BeitForImageClassification,BeitModel:()=>y.BeitModel,BeitPreTrainedModel:()=>y.BeitPreTrainedModel,BertForMaskedLM:()=>y.BertForMaskedLM,BertForQuestionAnswering:()=>y.BertForQuestionAnswering,BertForSequenceClassification:()=>y.BertForSequenceClassification,BertForTokenClassification:()=>y.BertForTokenClassification,BertModel:()=>y.BertModel,BertPreTrainedModel:()=>y.BertPreTrainedModel,BertTokenizer:()=>ar.BertTokenizer,BitImageProcessor:()=>er.BitImageProcessor,BlenderbotForConditionalGeneration:()=>y.BlenderbotForConditionalGeneration,BlenderbotModel:()=>y.BlenderbotModel,BlenderbotPreTrainedModel:()=>y.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>y.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>y.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>y.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>ar.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>ar.BlenderbotTokenizer,BloomForCausalLM:()=>y.BloomForCausalLM,BloomModel:()=>y.BloomModel,BloomPreTrainedModel:()=>y.BloomPreTrainedModel,BloomTokenizer:()=>ar.BloomTokenizer,CLIPFeatureExtractor:()=>er.CLIPFeatureExtractor,CLIPImageProcessor:()=>er.CLIPImageProcessor,CLIPModel:()=>y.CLIPModel,CLIPPreTrainedModel:()=>y.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>y.CLIPSegForImageSegmentation,CLIPSegModel:()=>y.CLIPSegModel,CLIPSegPreTrainedModel:()=>y.CLIPSegPreTrainedModel,CLIPTextModel:()=>y.CLIPTextModel,CLIPTextModelWithProjection:()=>y.CLIPTextModelWithProjection,CLIPTokenizer:()=>ar.CLIPTokenizer,CLIPVisionModel:()=>y.CLIPVisionModel,CLIPVisionModelWithProjection:()=>y.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>y.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>y.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>y.CamembertForSequenceClassification,CamembertForTokenClassification:()=>y.CamembertForTokenClassification,CamembertModel:()=>y.CamembertModel,CamembertPreTrainedModel:()=>y.CamembertPreTrainedModel,CamembertTokenizer:()=>ar.CamembertTokenizer,CausalLMOutput:()=>y.CausalLMOutput,CausalLMOutputWithPast:()=>y.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>er.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>y.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>y.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>y.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>er.ClapFeatureExtractor,ClapModel:()=>y.ClapModel,ClapPreTrainedModel:()=>y.ClapPreTrainedModel,ClapTextModelWithProjection:()=>y.ClapTextModelWithProjection,CodeGenForCausalLM:()=>y.CodeGenForCausalLM,CodeGenModel:()=>y.CodeGenModel,CodeGenPreTrainedModel:()=>y.CodeGenPreTrainedModel,CodeGenTokenizer:()=>ar.CodeGenTokenizer,CodeLlamaTokenizer:()=>ar.CodeLlamaTokenizer,CohereForCausalLM:()=>y.CohereForCausalLM,CohereModel:()=>y.CohereModel,CoherePreTrainedModel:()=>y.CoherePreTrainedModel,CohereTokenizer:()=>ar.CohereTokenizer,ConvBertForMaskedLM:()=>y.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>y.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>y.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>y.ConvBertForTokenClassification,ConvBertModel:()=>y.ConvBertModel,ConvBertPreTrainedModel:()=>y.ConvBertPreTrainedModel,ConvBertTokenizer:()=>ar.ConvBertTokenizer,ConvNextFeatureExtractor:()=>er.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>y.ConvNextForImageClassification,ConvNextImageProcessor:()=>er.ConvNextImageProcessor,ConvNextModel:()=>y.ConvNextModel,ConvNextPreTrainedModel:()=>y.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>y.ConvNextV2ForImageClassification,ConvNextV2Model:()=>y.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>y.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>er.DPTFeatureExtractor,DPTForDepthEstimation:()=>y.DPTForDepthEstimation,DPTImageProcessor:()=>er.DPTImageProcessor,DPTModel:()=>y.DPTModel,DPTPreTrainedModel:()=>y.DPTPreTrainedModel,DebertaForMaskedLM:()=>y.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>y.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>y.DebertaForSequenceClassification,DebertaForTokenClassification:()=>y.DebertaForTokenClassification,DebertaModel:()=>y.DebertaModel,DebertaPreTrainedModel:()=>y.DebertaPreTrainedModel,DebertaTokenizer:()=>ar.DebertaTokenizer,DebertaV2ForMaskedLM:()=>y.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>y.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>y.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>y.DebertaV2ForTokenClassification,DebertaV2Model:()=>y.DebertaV2Model,DebertaV2PreTrainedModel:()=>y.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>ar.DebertaV2Tokenizer,DecisionTransformerModel:()=>y.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>y.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>er.DeiTFeatureExtractor,DeiTForImageClassification:()=>y.DeiTForImageClassification,DeiTModel:()=>y.DeiTModel,DeiTPreTrainedModel:()=>y.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>y.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>y.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>Hr.DepthEstimationPipeline,DepthProForDepthEstimation:()=>y.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>y.DepthProPreTrainedModel,DetrFeatureExtractor:()=>er.DetrFeatureExtractor,DetrForObjectDetection:()=>y.DetrForObjectDetection,DetrForSegmentation:()=>y.DetrForSegmentation,DetrModel:()=>y.DetrModel,DetrObjectDetectionOutput:()=>y.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>y.DetrPreTrainedModel,DetrSegmentationOutput:()=>y.DetrSegmentationOutput,Dinov2ForImageClassification:()=>y.Dinov2ForImageClassification,Dinov2Model:()=>y.Dinov2Model,Dinov2PreTrainedModel:()=>y.Dinov2PreTrainedModel,DistilBertForMaskedLM:()=>y.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>y.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>y.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>y.DistilBertForTokenClassification,DistilBertModel:()=>y.DistilBertModel,DistilBertPreTrainedModel:()=>y.DistilBertPreTrainedModel,DistilBertTokenizer:()=>ar.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>Hr.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>er.DonutFeatureExtractor,DonutSwinModel:()=>y.DonutSwinModel,DonutSwinPreTrainedModel:()=>y.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>y.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>er.EfficientNetImageProcessor,EfficientNetModel:()=>y.EfficientNetModel,EfficientNetPreTrainedModel:()=>y.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>y.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>y.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>y.ElectraForSequenceClassification,ElectraForTokenClassification:()=>y.ElectraForTokenClassification,ElectraModel:()=>y.ElectraModel,ElectraPreTrainedModel:()=>y.ElectraPreTrainedModel,ElectraTokenizer:()=>ar.ElectraTokenizer,EosTokenCriteria:()=>lo.EosTokenCriteria,EsmForMaskedLM:()=>y.EsmForMaskedLM,EsmForSequenceClassification:()=>y.EsmForSequenceClassification,EsmForTokenClassification:()=>y.EsmForTokenClassification,EsmModel:()=>y.EsmModel,EsmPreTrainedModel:()=>y.EsmPreTrainedModel,EsmTokenizer:()=>ar.EsmTokenizer,FFT:()=>En.FFT,FalconForCausalLM:()=>y.FalconForCausalLM,FalconModel:()=>y.FalconModel,FalconPreTrainedModel:()=>y.FalconPreTrainedModel,FalconTokenizer:()=>ar.FalconTokenizer,FastViTForImageClassification:()=>y.FastViTForImageClassification,FastViTModel:()=>y.FastViTModel,FastViTPreTrainedModel:()=>y.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>Hr.FeatureExtractionPipeline,FeatureExtractor:()=>er.FeatureExtractor,FillMaskPipeline:()=>Hr.FillMaskPipeline,Florence2ForConditionalGeneration:()=>y.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>y.Florence2PreTrainedModel,Florence2Processor:()=>er.Florence2Processor,GLPNFeatureExtractor:()=>er.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>y.GLPNForDepthEstimation,GLPNModel:()=>y.GLPNModel,GLPNPreTrainedModel:()=>y.GLPNPreTrainedModel,GPT2LMHeadModel:()=>y.GPT2LMHeadModel,GPT2Model:()=>y.GPT2Model,GPT2PreTrainedModel:()=>y.GPT2PreTrainedModel,GPT2Tokenizer:()=>ar.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>y.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>y.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>y.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>y.GPTJForCausalLM,GPTJModel:()=>y.GPTJModel,GPTJPreTrainedModel:()=>y.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>y.GPTNeoForCausalLM,GPTNeoModel:()=>y.GPTNeoModel,GPTNeoPreTrainedModel:()=>y.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>y.GPTNeoXForCausalLM,GPTNeoXModel:()=>y.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>y.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>ar.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>y.Gemma2ForCausalLM,Gemma2Model:()=>y.Gemma2Model,Gemma2PreTrainedModel:()=>y.Gemma2PreTrainedModel,GemmaForCausalLM:()=>y.GemmaForCausalLM,GemmaModel:()=>y.GemmaModel,GemmaPreTrainedModel:()=>y.GemmaPreTrainedModel,GemmaTokenizer:()=>ar.GemmaTokenizer,GraniteForCausalLM:()=>y.GraniteForCausalLM,GraniteModel:()=>y.GraniteModel,GranitePreTrainedModel:()=>y.GranitePreTrainedModel,Grok1Tokenizer:()=>ar.Grok1Tokenizer,GroupViTModel:()=>y.GroupViTModel,GroupViTPreTrainedModel:()=>y.GroupViTPreTrainedModel,HerbertTokenizer:()=>ar.HerbertTokenizer,HieraForImageClassification:()=>y.HieraForImageClassification,HieraModel:()=>y.HieraModel,HieraPreTrainedModel:()=>y.HieraPreTrainedModel,HubertForCTC:()=>y.HubertForCTC,HubertForSequenceClassification:()=>y.HubertForSequenceClassification,HubertModel:()=>y.HubertModel,HubertPreTrainedModel:()=>y.HubertPreTrainedModel,ImageClassificationPipeline:()=>Hr.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>Hr.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>er.ImageFeatureExtractor,ImageMattingOutput:()=>y.ImageMattingOutput,ImageSegmentationPipeline:()=>Hr.ImageSegmentationPipeline,ImageToImagePipeline:()=>Hr.ImageToImagePipeline,ImageToTextPipeline:()=>Hr.ImageToTextPipeline,InterruptableStoppingCriteria:()=>lo.InterruptableStoppingCriteria,JAISLMHeadModel:()=>y.JAISLMHeadModel,JAISModel:()=>y.JAISModel,JAISPreTrainedModel:()=>y.JAISPreTrainedModel,LlamaForCausalLM:()=>y.LlamaForCausalLM,LlamaModel:()=>y.LlamaModel,LlamaPreTrainedModel:()=>y.LlamaPreTrainedModel,LlamaTokenizer:()=>ar.LlamaTokenizer,LlavaForConditionalGeneration:()=>y.LlavaForConditionalGeneration,LlavaPreTrainedModel:()=>y.LlavaPreTrainedModel,LongT5ForConditionalGeneration:()=>y.LongT5ForConditionalGeneration,LongT5Model:()=>y.LongT5Model,LongT5PreTrainedModel:()=>y.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>y.M2M100ForConditionalGeneration,M2M100Model:()=>y.M2M100Model,M2M100PreTrainedModel:()=>y.M2M100PreTrainedModel,M2M100Tokenizer:()=>ar.M2M100Tokenizer,MBart50Tokenizer:()=>ar.MBart50Tokenizer,MBartForCausalLM:()=>y.MBartForCausalLM,MBartForConditionalGeneration:()=>y.MBartForConditionalGeneration,MBartForSequenceClassification:()=>y.MBartForSequenceClassification,MBartModel:()=>y.MBartModel,MBartPreTrainedModel:()=>y.MBartPreTrainedModel,MBartTokenizer:()=>ar.MBartTokenizer,MPNetForMaskedLM:()=>y.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>y.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>y.MPNetForSequenceClassification,MPNetForTokenClassification:()=>y.MPNetForTokenClassification,MPNetModel:()=>y.MPNetModel,MPNetPreTrainedModel:()=>y.MPNetPreTrainedModel,MPNetTokenizer:()=>ar.MPNetTokenizer,MT5ForConditionalGeneration:()=>y.MT5ForConditionalGeneration,MT5Model:()=>y.MT5Model,MT5PreTrainedModel:()=>y.MT5PreTrainedModel,MarianMTModel:()=>y.MarianMTModel,MarianModel:()=>y.MarianModel,MarianPreTrainedModel:()=>y.MarianPreTrainedModel,MarianTokenizer:()=>ar.MarianTokenizer,MaskFormerFeatureExtractor:()=>er.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>y.MaskFormerForInstanceSegmentation,MaskFormerModel:()=>y.MaskFormerModel,MaskFormerPreTrainedModel:()=>y.MaskFormerPreTrainedModel,MaskedLMOutput:()=>y.MaskedLMOutput,MaxLengthCriteria:()=>lo.MaxLengthCriteria,MistralForCausalLM:()=>y.MistralForCausalLM,MistralModel:()=>y.MistralModel,MistralPreTrainedModel:()=>y.MistralPreTrainedModel,MobileBertForMaskedLM:()=>y.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>y.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>y.MobileBertForSequenceClassification,MobileBertModel:()=>y.MobileBertModel,MobileBertPreTrainedModel:()=>y.MobileBertPreTrainedModel,MobileBertTokenizer:()=>ar.MobileBertTokenizer,MobileNetV1FeatureExtractor:()=>er.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>y.MobileNetV1ForImageClassification,MobileNetV1Model:()=>y.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>y.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>er.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>y.MobileNetV2ForImageClassification,MobileNetV2Model:()=>y.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>y.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>er.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>y.MobileNetV3ForImageClassification,MobileNetV3Model:()=>y.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>y.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>er.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>y.MobileNetV4ForImageClassification,MobileNetV4Model:()=>y.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>y.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>er.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>y.MobileViTForImageClassification,MobileViTImageProcessor:()=>er.MobileViTImageProcessor,MobileViTModel:()=>y.MobileViTModel,MobileViTPreTrainedModel:()=>y.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>y.MobileViTV2ForImageClassification,MobileViTV2Model:()=>y.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>y.MobileViTV2PreTrainedModel,ModelOutput:()=>y.ModelOutput,Moondream1ForConditionalGeneration:()=>y.Moondream1ForConditionalGeneration,MptForCausalLM:()=>y.MptForCausalLM,MptModel:()=>y.MptModel,MptPreTrainedModel:()=>y.MptPreTrainedModel,MusicgenForCausalLM:()=>y.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>y.MusicgenForConditionalGeneration,MusicgenModel:()=>y.MusicgenModel,MusicgenPreTrainedModel:()=>y.MusicgenPreTrainedModel,NllbTokenizer:()=>ar.NllbTokenizer,NomicBertModel:()=>y.NomicBertModel,NomicBertPreTrainedModel:()=>y.NomicBertPreTrainedModel,NougatImageProcessor:()=>er.NougatImageProcessor,NougatTokenizer:()=>ar.NougatTokenizer,OPTForCausalLM:()=>y.OPTForCausalLM,OPTModel:()=>y.OPTModel,OPTPreTrainedModel:()=>y.OPTPreTrainedModel,ObjectDetectionPipeline:()=>Hr.ObjectDetectionPipeline,OpenELMForCausalLM:()=>y.OpenELMForCausalLM,OpenELMModel:()=>y.OpenELMModel,OpenELMPreTrainedModel:()=>y.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>er.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>y.OwlViTForObjectDetection,OwlViTModel:()=>y.OwlViTModel,OwlViTPreTrainedModel:()=>y.OwlViTPreTrainedModel,OwlViTProcessor:()=>er.OwlViTProcessor,Owlv2ForObjectDetection:()=>y.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>er.Owlv2ImageProcessor,Owlv2Model:()=>y.Owlv2Model,Owlv2PreTrainedModel:()=>y.Owlv2PreTrainedModel,Phi3ForCausalLM:()=>y.Phi3ForCausalLM,Phi3Model:()=>y.Phi3Model,Phi3PreTrainedModel:()=>y.Phi3PreTrainedModel,PhiForCausalLM:()=>y.PhiForCausalLM,PhiModel:()=>y.PhiModel,PhiPreTrainedModel:()=>y.PhiPreTrainedModel,Pipeline:()=>Hr.Pipeline,PreTrainedModel:()=>y.PreTrainedModel,PreTrainedTokenizer:()=>ar.PreTrainedTokenizer,PretrainedConfig:()=>bc.PretrainedConfig,PretrainedMixin:()=>y.PretrainedMixin,Processor:()=>er.Processor,PvtForImageClassification:()=>y.PvtForImageClassification,PvtImageProcessor:()=>er.PvtImageProcessor,PvtModel:()=>y.PvtModel,PvtPreTrainedModel:()=>y.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>er.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>y.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>y.PyAnnoteModel,PyAnnotePreTrainedModel:()=>y.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>er.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>y.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>Hr.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>y.Qwen2ForCausalLM,Qwen2Model:()=>y.Qwen2Model,Qwen2PreTrainedModel:()=>y.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>ar.Qwen2Tokenizer,RTDetrForObjectDetection:()=>y.RTDetrForObjectDetection,RTDetrImageProcessor:()=>er.RTDetrImageProcessor,RTDetrModel:()=>y.RTDetrModel,RTDetrObjectDetectionOutput:()=>y.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>y.RTDetrPreTrainedModel,RawImage:()=>Af.RawImage,ResNetForImageClassification:()=>y.ResNetForImageClassification,ResNetModel:()=>y.ResNetModel,ResNetPreTrainedModel:()=>y.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>y.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>y.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>y.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>y.RoFormerForTokenClassification,RoFormerModel:()=>y.RoFormerModel,RoFormerPreTrainedModel:()=>y.RoFormerPreTrainedModel,RoFormerTokenizer:()=>ar.RoFormerTokenizer,RobertaForMaskedLM:()=>y.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>y.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>y.RobertaForSequenceClassification,RobertaForTokenClassification:()=>y.RobertaForTokenClassification,RobertaModel:()=>y.RobertaModel,RobertaPreTrainedModel:()=>y.RobertaPreTrainedModel,RobertaTokenizer:()=>ar.RobertaTokenizer,SamImageProcessor:()=>er.SamImageProcessor,SamImageSegmentationOutput:()=>y.SamImageSegmentationOutput,SamModel:()=>y.SamModel,SamPreTrainedModel:()=>y.SamPreTrainedModel,SamProcessor:()=>er.SamProcessor,SapiensFeatureExtractor:()=>er.SapiensFeatureExtractor,SapiensForDepthEstimation:()=>y.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>y.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>y.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>y.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>er.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>er.SegformerFeatureExtractor,SegformerForImageClassification:()=>y.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>y.SegformerForSemanticSegmentation,SegformerModel:()=>y.SegformerModel,SegformerPreTrainedModel:()=>y.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>y.Seq2SeqLMOutput,SequenceClassifierOutput:()=>y.SequenceClassifierOutput,SiglipImageProcessor:()=>er.SiglipImageProcessor,SiglipModel:()=>y.SiglipModel,SiglipPreTrainedModel:()=>y.SiglipPreTrainedModel,SiglipTextModel:()=>y.SiglipTextModel,SiglipTokenizer:()=>ar.SiglipTokenizer,SiglipVisionModel:()=>y.SiglipVisionModel,SpeechT5FeatureExtractor:()=>er.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>y.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>y.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>y.SpeechT5HifiGan,SpeechT5Model:()=>y.SpeechT5Model,SpeechT5PreTrainedModel:()=>y.SpeechT5PreTrainedModel,SpeechT5Processor:()=>er.SpeechT5Processor,SpeechT5Tokenizer:()=>ar.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>y.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>y.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>y.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>y.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>y.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>ar.SqueezeBertTokenizer,StableLmForCausalLM:()=>y.StableLmForCausalLM,StableLmModel:()=>y.StableLmModel,StableLmPreTrainedModel:()=>y.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>y.Starcoder2ForCausalLM,Starcoder2Model:()=>y.Starcoder2Model,Starcoder2PreTrainedModel:()=>y.Starcoder2PreTrainedModel,StoppingCriteria:()=>lo.StoppingCriteria,StoppingCriteriaList:()=>lo.StoppingCriteriaList,SummarizationPipeline:()=>Hr.SummarizationPipeline,Swin2SRForImageSuperResolution:()=>y.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>er.Swin2SRImageProcessor,Swin2SRModel:()=>y.Swin2SRModel,Swin2SRPreTrainedModel:()=>y.Swin2SRPreTrainedModel,SwinForImageClassification:()=>y.SwinForImageClassification,SwinModel:()=>y.SwinModel,SwinPreTrainedModel:()=>y.SwinPreTrainedModel,T5ForConditionalGeneration:()=>y.T5ForConditionalGeneration,T5Model:()=>y.T5Model,T5PreTrainedModel:()=>y.T5PreTrainedModel,T5Tokenizer:()=>ar.T5Tokenizer,TableTransformerForObjectDetection:()=>y.TableTransformerForObjectDetection,TableTransformerModel:()=>y.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>y.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>y.TableTransformerPreTrainedModel,Tensor:()=>ln.Tensor,Text2TextGenerationPipeline:()=>Hr.Text2TextGenerationPipeline,TextClassificationPipeline:()=>Hr.TextClassificationPipeline,TextGenerationPipeline:()=>Hr.TextGenerationPipeline,TextStreamer:()=>Mc.TextStreamer,TextToAudioPipeline:()=>Hr.TextToAudioPipeline,TokenClassificationPipeline:()=>Hr.TokenClassificationPipeline,TokenClassifierOutput:()=>y.TokenClassifierOutput,TokenizerModel:()=>ar.TokenizerModel,TrOCRForCausalLM:()=>y.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>y.TrOCRPreTrainedModel,TranslationPipeline:()=>Hr.TranslationPipeline,UniSpeechForCTC:()=>y.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>y.UniSpeechForSequenceClassification,UniSpeechModel:()=>y.UniSpeechModel,UniSpeechPreTrainedModel:()=>y.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>y.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>y.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>y.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>y.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>y.UniSpeechSatPreTrainedModel,ViTFeatureExtractor:()=>er.ViTFeatureExtractor,ViTForImageClassification:()=>y.ViTForImageClassification,ViTImageProcessor:()=>er.ViTImageProcessor,ViTMAEModel:()=>y.ViTMAEModel,ViTMAEPreTrainedModel:()=>y.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>y.ViTMSNForImageClassification,ViTMSNModel:()=>y.ViTMSNModel,ViTMSNPreTrainedModel:()=>y.ViTMSNPreTrainedModel,ViTModel:()=>y.ViTModel,ViTPreTrainedModel:()=>y.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>y.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>y.VitMatteForImageMatting,VitMatteImageProcessor:()=>er.VitMatteImageProcessor,VitMattePreTrainedModel:()=>y.VitMattePreTrainedModel,VitsModel:()=>y.VitsModel,VitsModelOutput:()=>y.VitsModelOutput,VitsPreTrainedModel:()=>y.VitsPreTrainedModel,VitsTokenizer:()=>ar.VitsTokenizer,Wav2Vec2BertForCTC:()=>y.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>y.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>y.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>y.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>ar.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>er.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>y.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>y.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>y.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>y.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>y.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>er.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>y.WavLMForAudioFrameClassification,WavLMForCTC:()=>y.WavLMForCTC,WavLMForSequenceClassification:()=>y.WavLMForSequenceClassification,WavLMForXVector:()=>y.WavLMForXVector,WavLMModel:()=>y.WavLMModel,WavLMPreTrainedModel:()=>y.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>er.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>y.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>y.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>er.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>y.WhisperForConditionalGeneration,WhisperModel:()=>y.WhisperModel,WhisperPreTrainedModel:()=>y.WhisperPreTrainedModel,WhisperProcessor:()=>er.WhisperProcessor,WhisperTextStreamer:()=>Mc.WhisperTextStreamer,WhisperTokenizer:()=>ar.WhisperTokenizer,XLMForQuestionAnswering:()=>y.XLMForQuestionAnswering,XLMForSequenceClassification:()=>y.XLMForSequenceClassification,XLMForTokenClassification:()=>y.XLMForTokenClassification,XLMModel:()=>y.XLMModel,XLMPreTrainedModel:()=>y.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>y.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>y.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>y.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>y.XLMRobertaForTokenClassification,XLMRobertaModel:()=>y.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>y.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>ar.XLMRobertaTokenizer,XLMTokenizer:()=>ar.XLMTokenizer,XLMWithLMHeadModel:()=>y.XLMWithLMHeadModel,XVectorOutput:()=>y.XVectorOutput,YolosFeatureExtractor:()=>er.YolosFeatureExtractor,YolosForObjectDetection:()=>y.YolosForObjectDetection,YolosModel:()=>y.YolosModel,YolosObjectDetectionOutput:()=>y.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>y.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>Hr.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>Hr.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>Hr.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>Hr.ZeroShotObjectDetectionPipeline,bankers_round:()=>En.bankers_round,cat:()=>ln.cat,cos_sim:()=>En.cos_sim,dot:()=>En.dot,dynamic_time_warping:()=>En.dynamic_time_warping,env:()=>Pf.env,full:()=>ln.full,full_like:()=>ln.full_like,getKeyValueShapes:()=>bc.getKeyValueShapes,hamming:()=>xi.hamming,hanning:()=>xi.hanning,interpolate:()=>ln.interpolate,interpolate_4d:()=>ln.interpolate_4d,interpolate_data:()=>En.interpolate_data,is_chinese_char:()=>ar.is_chinese_char,layer_norm:()=>ln.layer_norm,log_softmax:()=>En.log_softmax,magnitude:()=>En.magnitude,matmul:()=>ln.matmul,max:()=>En.max,mean:()=>ln.mean,mean_pooling:()=>ln.mean_pooling,medianFilter:()=>En.medianFilter,mel_filter_bank:()=>xi.mel_filter_bank,min:()=>En.min,ones:()=>ln.ones,ones_like:()=>ln.ones_like,permute:()=>ln.permute,permute_data:()=>En.permute_data,pipeline:()=>Hr.pipeline,quantize_embeddings:()=>ln.quantize_embeddings,read_audio:()=>xi.read_audio,rfft:()=>ln.rfft,round:()=>En.round,softmax:()=>En.softmax,spectrogram:()=>xi.spectrogram,stack:()=>ln.stack,std_mean:()=>ln.std_mean,topk:()=>ln.topk,window_function:()=>xi.window_function,zeros:()=>ln.zeros,zeros_like:()=>ln.zeros_like});var Pf=Rr("./src/env.js"),Hr=Rr("./src/pipelines.js"),y=Rr("./src/models.js"),ar=Rr("./src/tokenizers.js"),er=Rr("./src/processors.js"),bc=Rr("./src/configs.js"),xi=Rr("./src/utils/audio.js"),Af=Rr("./src/utils/image.js"),ln=Rr("./src/utils/tensor.js"),En=Rr("./src/utils/maths.js"),Mc=Rr("./src/generation/streamers.js"),lo=Rr("./src/generation/stopping_criteria.js");p.ASTFeatureExtractor,p.ASTForAudioClassification,p.ASTModel,p.ASTPreTrainedModel,p.AlbertForMaskedLM,p.AlbertForQuestionAnswering,p.AlbertForSequenceClassification,p.AlbertModel,p.AlbertPreTrainedModel,p.AlbertTokenizer,p.AudioClassificationPipeline,p.AutoConfig,p.AutoModel,p.AutoModelForAudioClassification,p.AutoModelForAudioFrameClassification,p.AutoModelForCTC,p.AutoModelForCausalLM,p.AutoModelForDepthEstimation,p.AutoModelForDocumentQuestionAnswering,p.AutoModelForImageClassification,p.AutoModelForImageFeatureExtraction,p.AutoModelForImageMatting,p.AutoModelForImageSegmentation,p.AutoModelForImageToImage,p.AutoModelForMaskGeneration,p.AutoModelForMaskedLM,p.AutoModelForNormalEstimation,p.AutoModelForObjectDetection,p.AutoModelForQuestionAnswering,p.AutoModelForSemanticSegmentation,p.AutoModelForSeq2SeqLM,p.AutoModelForSequenceClassification,p.AutoModelForSpeechSeq2Seq,p.AutoModelForTextToSpectrogram,p.AutoModelForTextToWaveform,p.AutoModelForTokenClassification,p.AutoModelForUniversalSegmentation,p.AutoModelForVision2Seq,p.AutoModelForXVector,p.AutoModelForZeroShotObjectDetection,p.AutoProcessor,p.AutoTokenizer,p.AutomaticSpeechRecognitionPipeline,p.BartForConditionalGeneration,p.BartForSequenceClassification,p.BartModel,p.BartPretrainedModel,p.BartTokenizer,p.BaseModelOutput,p.BaseStreamer,p.BeitFeatureExtractor,p.BeitForImageClassification,p.BeitModel,p.BeitPreTrainedModel,p.BertForMaskedLM,p.BertForQuestionAnswering,p.BertForSequenceClassification,p.BertForTokenClassification,p.BertModel,p.BertPreTrainedModel,p.BertTokenizer,p.BitImageProcessor,p.BlenderbotForConditionalGeneration,p.BlenderbotModel,p.BlenderbotPreTrainedModel,p.BlenderbotSmallForConditionalGeneration,p.BlenderbotSmallModel,p.BlenderbotSmallPreTrainedModel,p.BlenderbotSmallTokenizer,p.BlenderbotTokenizer,p.BloomForCausalLM,p.BloomModel,p.BloomPreTrainedModel,p.BloomTokenizer,p.CLIPFeatureExtractor,p.CLIPImageProcessor,p.CLIPModel,p.CLIPPreTrainedModel,p.CLIPSegForImageSegmentation,p.CLIPSegModel,p.CLIPSegPreTrainedModel,p.CLIPTextModel,p.CLIPTextModelWithProjection,p.CLIPTokenizer,p.CLIPVisionModel,p.CLIPVisionModelWithProjection,p.CamembertForMaskedLM,p.CamembertForQuestionAnswering,p.CamembertForSequenceClassification,p.CamembertForTokenClassification,p.CamembertModel,p.CamembertPreTrainedModel,p.CamembertTokenizer,p.CausalLMOutput,p.CausalLMOutputWithPast,p.ChineseCLIPFeatureExtractor,p.ChineseCLIPModel,p.ChineseCLIPPreTrainedModel,p.ClapAudioModelWithProjection,p.ClapFeatureExtractor,p.ClapModel,p.ClapPreTrainedModel,p.ClapTextModelWithProjection,p.CodeGenForCausalLM,p.CodeGenModel,p.CodeGenPreTrainedModel,p.CodeGenTokenizer,p.CodeLlamaTokenizer,p.CohereForCausalLM,p.CohereModel,p.CoherePreTrainedModel,p.CohereTokenizer,p.ConvBertForMaskedLM,p.ConvBertForQuestionAnswering,p.ConvBertForSequenceClassification,p.ConvBertForTokenClassification,p.ConvBertModel,p.ConvBertPreTrainedModel,p.ConvBertTokenizer,p.ConvNextFeatureExtractor,p.ConvNextForImageClassification,p.ConvNextImageProcessor,p.ConvNextModel,p.ConvNextPreTrainedModel,p.ConvNextV2ForImageClassification,p.ConvNextV2Model,p.ConvNextV2PreTrainedModel,p.DPTFeatureExtractor,p.DPTForDepthEstimation,p.DPTImageProcessor,p.DPTModel,p.DPTPreTrainedModel,p.DebertaForMaskedLM,p.DebertaForQuestionAnswering,p.DebertaForSequenceClassification,p.DebertaForTokenClassification,p.DebertaModel,p.DebertaPreTrainedModel,p.DebertaTokenizer,p.DebertaV2ForMaskedLM,p.DebertaV2ForQuestionAnswering,p.DebertaV2ForSequenceClassification,p.DebertaV2ForTokenClassification,p.DebertaV2Model,p.DebertaV2PreTrainedModel,p.DebertaV2Tokenizer,p.DecisionTransformerModel,p.DecisionTransformerPreTrainedModel,p.DeiTFeatureExtractor,p.DeiTForImageClassification,p.DeiTModel,p.DeiTPreTrainedModel,p.DepthAnythingForDepthEstimation,p.DepthAnythingPreTrainedModel,p.DepthEstimationPipeline,p.DepthProForDepthEstimation,p.DepthProPreTrainedModel,p.DetrFeatureExtractor,p.DetrForObjectDetection,p.DetrForSegmentation,p.DetrModel,p.DetrObjectDetectionOutput,p.DetrPreTrainedModel,p.DetrSegmentationOutput,p.Dinov2ForImageClassification,p.Dinov2Model,p.Dinov2PreTrainedModel,p.DistilBertForMaskedLM,p.DistilBertForQuestionAnswering,p.DistilBertForSequenceClassification,p.DistilBertForTokenClassification,p.DistilBertModel,p.DistilBertPreTrainedModel,p.DistilBertTokenizer,p.DocumentQuestionAnsweringPipeline,p.DonutFeatureExtractor,p.DonutSwinModel,p.DonutSwinPreTrainedModel,p.EfficientNetForImageClassification,p.EfficientNetImageProcessor,p.EfficientNetModel,p.EfficientNetPreTrainedModel,p.ElectraForMaskedLM,p.ElectraForQuestionAnswering,p.ElectraForSequenceClassification,p.ElectraForTokenClassification,p.ElectraModel,p.ElectraPreTrainedModel,p.ElectraTokenizer,p.EosTokenCriteria,p.EsmForMaskedLM,p.EsmForSequenceClassification,p.EsmForTokenClassification,p.EsmModel,p.EsmPreTrainedModel,p.EsmTokenizer,p.FFT,p.FalconForCausalLM,p.FalconModel,p.FalconPreTrainedModel,p.FalconTokenizer,p.FastViTForImageClassification,p.FastViTModel,p.FastViTPreTrainedModel,p.FeatureExtractionPipeline,p.FeatureExtractor,p.FillMaskPipeline,p.Florence2ForConditionalGeneration,p.Florence2PreTrainedModel,p.Florence2Processor,p.GLPNFeatureExtractor,p.GLPNForDepthEstimation,p.GLPNModel,p.GLPNPreTrainedModel,p.GPT2LMHeadModel,p.GPT2Model,p.GPT2PreTrainedModel,p.GPT2Tokenizer,p.GPTBigCodeForCausalLM,p.GPTBigCodeModel,p.GPTBigCodePreTrainedModel,p.GPTJForCausalLM,p.GPTJModel,p.GPTJPreTrainedModel,p.GPTNeoForCausalLM,p.GPTNeoModel,p.GPTNeoPreTrainedModel,p.GPTNeoXForCausalLM,p.GPTNeoXModel,p.GPTNeoXPreTrainedModel,p.GPTNeoXTokenizer,p.Gemma2ForCausalLM,p.Gemma2Model,p.Gemma2PreTrainedModel,p.GemmaForCausalLM,p.GemmaModel,p.GemmaPreTrainedModel,p.GemmaTokenizer,p.GraniteForCausalLM,p.GraniteModel,p.GranitePreTrainedModel,p.Grok1Tokenizer,p.GroupViTModel,p.GroupViTPreTrainedModel,p.HerbertTokenizer,p.HieraForImageClassification,p.HieraModel,p.HieraPreTrainedModel,p.HubertForCTC,p.HubertForSequenceClassification,p.HubertModel,p.HubertPreTrainedModel,p.ImageClassificationPipeline,p.ImageFeatureExtractionPipeline,p.ImageFeatureExtractor,p.ImageMattingOutput,p.ImageSegmentationPipeline,p.ImageToImagePipeline,p.ImageToTextPipeline,p.InterruptableStoppingCriteria,p.JAISLMHeadModel,p.JAISModel,p.JAISPreTrainedModel,p.LlamaForCausalLM,p.LlamaModel,p.LlamaPreTrainedModel,p.LlamaTokenizer,p.LlavaForConditionalGeneration,p.LlavaPreTrainedModel,p.LongT5ForConditionalGeneration,p.LongT5Model,p.LongT5PreTrainedModel,p.M2M100ForConditionalGeneration,p.M2M100Model,p.M2M100PreTrainedModel,p.M2M100Tokenizer,p.MBart50Tokenizer,p.MBartForCausalLM,p.MBartForConditionalGeneration,p.MBartForSequenceClassification,p.MBartModel,p.MBartPreTrainedModel,p.MBartTokenizer,p.MPNetForMaskedLM,p.MPNetForQuestionAnswering,p.MPNetForSequenceClassification,p.MPNetForTokenClassification,p.MPNetModel,p.MPNetPreTrainedModel,p.MPNetTokenizer,p.MT5ForConditionalGeneration,p.MT5Model,p.MT5PreTrainedModel,p.MarianMTModel,p.MarianModel,p.MarianPreTrainedModel,p.MarianTokenizer,p.MaskFormerFeatureExtractor,p.MaskFormerForInstanceSegmentation,p.MaskFormerModel,p.MaskFormerPreTrainedModel,p.MaskedLMOutput,p.MaxLengthCriteria,p.MistralForCausalLM,p.MistralModel,p.MistralPreTrainedModel,p.MobileBertForMaskedLM,p.MobileBertForQuestionAnswering,p.MobileBertForSequenceClassification,p.MobileBertModel,p.MobileBertPreTrainedModel,p.MobileBertTokenizer,p.MobileNetV1FeatureExtractor,p.MobileNetV1ForImageClassification,p.MobileNetV1Model,p.MobileNetV1PreTrainedModel,p.MobileNetV2FeatureExtractor,p.MobileNetV2ForImageClassification,p.MobileNetV2Model,p.MobileNetV2PreTrainedModel,p.MobileNetV3FeatureExtractor,p.MobileNetV3ForImageClassification,p.MobileNetV3Model,p.MobileNetV3PreTrainedModel,p.MobileNetV4FeatureExtractor,p.MobileNetV4ForImageClassification,p.MobileNetV4Model,p.MobileNetV4PreTrainedModel,p.MobileViTFeatureExtractor,p.MobileViTForImageClassification,p.MobileViTImageProcessor,p.MobileViTModel,p.MobileViTPreTrainedModel,p.MobileViTV2ForImageClassification,p.MobileViTV2Model,p.MobileViTV2PreTrainedModel,p.ModelOutput,p.Moondream1ForConditionalGeneration,p.MptForCausalLM,p.MptModel,p.MptPreTrainedModel,p.MusicgenForCausalLM,p.MusicgenForConditionalGeneration,p.MusicgenModel,p.MusicgenPreTrainedModel,p.NllbTokenizer,p.NomicBertModel,p.NomicBertPreTrainedModel,p.NougatImageProcessor,p.NougatTokenizer,p.OPTForCausalLM,p.OPTModel,p.OPTPreTrainedModel,p.ObjectDetectionPipeline,p.OpenELMForCausalLM,p.OpenELMModel,p.OpenELMPreTrainedModel,p.OwlViTFeatureExtractor,p.OwlViTForObjectDetection,p.OwlViTModel,p.OwlViTPreTrainedModel,p.OwlViTProcessor,p.Owlv2ForObjectDetection,p.Owlv2ImageProcessor,p.Owlv2Model,p.Owlv2PreTrainedModel,p.Phi3ForCausalLM,p.Phi3Model,p.Phi3PreTrainedModel,p.PhiForCausalLM,p.PhiModel,p.PhiPreTrainedModel,p.Pipeline,p.PreTrainedModel,p.PreTrainedTokenizer,p.PretrainedConfig,p.PretrainedMixin,p.Processor,p.PvtForImageClassification,p.PvtImageProcessor,p.PvtModel,p.PvtPreTrainedModel,p.PyAnnoteFeatureExtractor,p.PyAnnoteForAudioFrameClassification,p.PyAnnoteModel,p.PyAnnotePreTrainedModel,p.PyAnnoteProcessor,p.QuestionAnsweringModelOutput,p.QuestionAnsweringPipeline,p.Qwen2ForCausalLM,p.Qwen2Model,p.Qwen2PreTrainedModel,p.Qwen2Tokenizer,p.RTDetrForObjectDetection,p.RTDetrImageProcessor,p.RTDetrModel,p.RTDetrObjectDetectionOutput,p.RTDetrPreTrainedModel,p.RawImage,p.ResNetForImageClassification,p.ResNetModel,p.ResNetPreTrainedModel,p.RoFormerForMaskedLM,p.RoFormerForQuestionAnswering,p.RoFormerForSequenceClassification,p.RoFormerForTokenClassification,p.RoFormerModel,p.RoFormerPreTrainedModel,p.RoFormerTokenizer,p.RobertaForMaskedLM,p.RobertaForQuestionAnswering,p.RobertaForSequenceClassification,p.RobertaForTokenClassification,p.RobertaModel,p.RobertaPreTrainedModel,p.RobertaTokenizer,p.SamImageProcessor,p.SamImageSegmentationOutput,p.SamModel,p.SamPreTrainedModel,p.SamProcessor,p.SapiensFeatureExtractor,p.SapiensForDepthEstimation,p.SapiensForNormalEstimation,p.SapiensForSemanticSegmentation,p.SapiensPreTrainedModel,p.SeamlessM4TFeatureExtractor,p.SegformerFeatureExtractor,p.SegformerForImageClassification,p.SegformerForSemanticSegmentation,p.SegformerModel,p.SegformerPreTrainedModel,p.Seq2SeqLMOutput,p.SequenceClassifierOutput,p.SiglipImageProcessor,p.SiglipModel,p.SiglipPreTrainedModel,p.SiglipTextModel,p.SiglipTokenizer,p.SiglipVisionModel,p.SpeechT5FeatureExtractor,p.SpeechT5ForSpeechToText,p.SpeechT5ForTextToSpeech,p.SpeechT5HifiGan,p.SpeechT5Model,p.SpeechT5PreTrainedModel,p.SpeechT5Processor,p.SpeechT5Tokenizer,p.SqueezeBertForMaskedLM,p.SqueezeBertForQuestionAnswering,p.SqueezeBertForSequenceClassification,p.SqueezeBertModel,p.SqueezeBertPreTrainedModel,p.SqueezeBertTokenizer,p.StableLmForCausalLM,p.StableLmModel,p.StableLmPreTrainedModel,p.Starcoder2ForCausalLM,p.Starcoder2Model,p.Starcoder2PreTrainedModel,p.StoppingCriteria,p.StoppingCriteriaList,p.SummarizationPipeline,p.Swin2SRForImageSuperResolution,p.Swin2SRImageProcessor,p.Swin2SRModel,p.Swin2SRPreTrainedModel,p.SwinForImageClassification,p.SwinModel,p.SwinPreTrainedModel,p.T5ForConditionalGeneration,p.T5Model,p.T5PreTrainedModel,p.T5Tokenizer,p.TableTransformerForObjectDetection,p.TableTransformerModel,p.TableTransformerObjectDetectionOutput,p.TableTransformerPreTrainedModel,p.Tensor,p.Text2TextGenerationPipeline,p.TextClassificationPipeline,p.TextGenerationPipeline,p.TextStreamer,p.TextToAudioPipeline,p.TokenClassificationPipeline,p.TokenClassifierOutput,p.TokenizerModel,p.TrOCRForCausalLM,p.TrOCRPreTrainedModel,p.TranslationPipeline,p.UniSpeechForCTC,p.UniSpeechForSequenceClassification,p.UniSpeechModel,p.UniSpeechPreTrainedModel,p.UniSpeechSatForAudioFrameClassification,p.UniSpeechSatForCTC,p.UniSpeechSatForSequenceClassification,p.UniSpeechSatModel,p.UniSpeechSatPreTrainedModel,p.ViTFeatureExtractor,p.ViTForImageClassification,p.ViTImageProcessor,p.ViTMAEModel,p.ViTMAEPreTrainedModel,p.ViTMSNForImageClassification,p.ViTMSNModel,p.ViTMSNPreTrainedModel,p.ViTModel,p.ViTPreTrainedModel,p.VisionEncoderDecoderModel,p.VitMatteForImageMatting,p.VitMatteImageProcessor,p.VitMattePreTrainedModel,p.VitsModel,p.VitsModelOutput,p.VitsPreTrainedModel,p.VitsTokenizer,p.Wav2Vec2BertForCTC,p.Wav2Vec2BertForSequenceClassification,p.Wav2Vec2BertModel,p.Wav2Vec2BertPreTrainedModel,p.Wav2Vec2CTCTokenizer,p.Wav2Vec2FeatureExtractor,p.Wav2Vec2ForAudioFrameClassification,p.Wav2Vec2ForCTC,p.Wav2Vec2ForSequenceClassification,p.Wav2Vec2Model,p.Wav2Vec2PreTrainedModel,p.Wav2Vec2ProcessorWithLM,p.WavLMForAudioFrameClassification,p.WavLMForCTC,p.WavLMForSequenceClassification,p.WavLMForXVector,p.WavLMModel,p.WavLMPreTrainedModel,p.WeSpeakerFeatureExtractor,p.WeSpeakerResNetModel,p.WeSpeakerResNetPreTrainedModel,p.WhisperFeatureExtractor,p.WhisperForConditionalGeneration,p.WhisperModel,p.WhisperPreTrainedModel,p.WhisperProcessor,p.WhisperTextStreamer,p.WhisperTokenizer,p.XLMForQuestionAnswering,p.XLMForSequenceClassification,p.XLMForTokenClassification,p.XLMModel,p.XLMPreTrainedModel,p.XLMRobertaForMaskedLM,p.XLMRobertaForQuestionAnswering,p.XLMRobertaForSequenceClassification,p.XLMRobertaForTokenClassification,p.XLMRobertaModel,p.XLMRobertaPreTrainedModel,p.XLMRobertaTokenizer,p.XLMTokenizer,p.XLMWithLMHeadModel,p.XVectorOutput,p.YolosFeatureExtractor,p.YolosForObjectDetection,p.YolosModel,p.YolosObjectDetectionOutput,p.YolosPreTrainedModel,p.ZeroShotAudioClassificationPipeline,p.ZeroShotClassificationPipeline,p.ZeroShotImageClassificationPipeline,p.ZeroShotObjectDetectionPipeline,p.bankers_round,p.cat,p.cos_sim,p.dot,p.dynamic_time_warping,p.env,p.full,p.full_like,p.getKeyValueShapes,p.hamming,p.hanning,p.interpolate,p.interpolate_4d,p.interpolate_data,p.is_chinese_char,p.layer_norm,p.log_softmax,p.magnitude,p.matmul,p.max,p.mean,p.mean_pooling,p.medianFilter,p.mel_filter_bank,p.min,p.ones,p.ones_like,p.permute,p.permute_data;var If=p.pipeline;p.quantize_embeddings,p.read_audio,p.rfft,p.round,p.softmax,p.spectrogram,p.stack,p.std_mean,p.topk,p.window_function,p.zeros,p.zeros_like;class gd{static async getInstance(Se){return this.instance===null&&(console.log("Creating Instance"),this.instance=If(this.task,this.model,{progress_callback:Se})),this.instance}}Me(gd,"task","summarization"),Me(gd,"model","Xenova/distilbart-cnn-6-6"),Me(gd,"instance",null),self.addEventListener("message",async It=>(console.log("Web worker received",It),async function(){const j=await(await gd.getInstance(()=>{}))(It.data.context);console.log("Service worker result",j),self.postMessage({status:"complete",output:j[0]})}(),!0))})();
